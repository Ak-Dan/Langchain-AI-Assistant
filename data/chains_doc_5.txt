




Migrating from LLMMathChain | 🦜️🔗 LangChain








Skip to main contentThese docs will be deprecated and no longer maintained with the release of LangChain v1.0 in October 2025. Visit the v1.0 alpha docsIntegrationsAPI ReferenceMoreContributingPeopleError referenceLangSmithLangGraphLangChain HubLangChain JS/TSv0.3v0.3v0.2v0.1💬SearchIntroductionTutorialsBuild a Question Answering application over a Graph DatabaseTutorialsBuild a simple LLM application with chat models and prompt templatesBuild a ChatbotBuild a Retrieval Augmented Generation (RAG) App: Part 2Build an Extraction ChainBuild an AgentTaggingBuild a Retrieval Augmented Generation (RAG) App: Part 1Build a semantic search engineBuild a Question/Answering system over SQL dataSummarize TextHow-to guidesHow-to guidesHow to use tools in a chainHow to use a vectorstore as a retrieverHow to add memory to chatbotsHow to use example selectorsHow to add a semantic layer over graph databaseHow to invoke runnables in parallelHow to stream chat model responsesHow to add default invocation args to a RunnableHow to add retrieval to chatbotsHow to use few shot examples in chat modelsHow to do tool/function callingHow to install LangChain packagesHow to add examples to the prompt for query analysisHow to use few shot examplesHow to run custom functionsHow to use output parsers to parse an LLM response into structured formatHow to handle cases where no queries are generatedHow to route between sub-chainsHow to return structured data from a modelHow to summarize text through parallelizationHow to summarize text through iterative refinementHow to summarize text in a single LLM callHow to use toolkitsHow to add ad-hoc tool calling capability to LLMs and Chat ModelsBuild an Agent with AgentExecutor (Legacy)How to construct knowledge graphsHow to partially format prompt templatesHow to handle multiple queries when doing query analysisHow to use built-in tools and toolkitsHow to pass through arguments from one step to the nextHow to compose prompts togetherHow to handle multiple retrievers when doing query analysisHow to add values to a chain's stateHow to construct filters for query analysisHow to configure runtime chain internalsHow to deal with high-cardinality categoricals when doing query analysisCustom Document LoaderHow to use the MultiQueryRetrieverHow to add scores to retriever resultsCachingHow to use callbacks in async environmentsHow to attach callbacks to a runnableHow to propagate callbacks  constructorHow to dispatch custom callback eventsHow to pass callbacks in at runtimeHow to split by characterHow to cache chat model responsesHow to handle rate limitsHow to init any model in one lineHow to track token usage in ChatModelsHow to add tools to chatbotsHow to split codeHow to do retrieval with contextual compressionHow to convert Runnables to ToolsHow to create custom callback handlersHow to create a custom chat model classCustom EmbeddingsHow to create a custom LLM classCustom RetrieverHow to create toolsHow to debug your LLM appsHow to load CSVsHow to load documents from a directoryHow to load HTMLHow to load JSONHow to load MarkdownHow to load Microsoft Office filesHow to load PDFsHow to load web pagesHow to create a dynamic (self-constructing) chainText embedding modelsHow to combine results from multiple retrieversHow to select examples from a LangSmith datasetHow to select examples by lengthHow to select examples by maximal marginal relevance (MMR)How to select examples by n-gram overlapHow to select examples by similarityHow to use reference examples when doing extractionHow to handle long text when doing extractionHow to use prompting alone (no tool calling) to do extractionHow to add fallbacks to a runnableHow to filter messagesHybrid SearchHow to use the LangChain indexing APIHow to inspect runnablesLangChain Expression Language CheatsheetHow to cache LLM responsesHow to track token usage for LLMsRun models locallyHow to get log probabilitiesHow to reorder retrieved results to mitigate the "lost in the middle" effectHow to split Markdown by HeadersHow to merge consecutive messages of the same typeHow to add message historyHow to migrate from legacy LangChain agents to LangGraphHow to retrieve using multiple vectors per documentHow to pass multimodal data to modelsHow to use multimodal promptsHow to create a custom Output ParserHow to use the output-fixing parserHow to parse JSON outputHow to retry when a parsing error occursHow to parse text from message objectsHow to parse XML outputHow to parse YAML outputHow to use the Parent Document RetrieverHow to use LangChain with different Pydantic versionsHow to add chat historyHow to get a RAG application to add citationsHow to do per-user retrievalHow to get your RAG application to return sourcesHow to stream results from your RAG applicationHow to split JSON dataHow to recursively split text by charactersResponse metadataHow to pass runtime secrets to runnablesHow to do "self-querying" retrievalHow to split text based on semantic similarityHow to chain runnablesHow to save and load LangChain objectsHow to split text by tokensHow to split HTMLHow to do question answering over CSVsHow to deal with large databases when doing SQL question-answeringHow to better prompt when doing SQL question-answeringHow to do query validation as part of SQL question-answeringHow to stream runnablesHow to stream responses from an LLMHow to use a time-weighted vector store retrieverHow to return artifacts from a toolHow to use chat models to call toolsHow to disable parallel tool callingHow to force models to call a toolHow to access the RunnableConfig from a toolHow to pass tool outputs to chat modelsHow to pass run time values to toolsHow to stream events from a toolHow to stream tool callsHow to convert tools to OpenAI FunctionsHow to handle tool errorsHow to use few-shot prompting with tool callingHow to add a human-in-the-loop for toolsHow to bind model-specific toolsHow to trim messagesHow to create and query vector storesConceptual guideAgentsArchitectureAsync programming with LangChainCallbacksChat historyChat modelsDocument loadersEmbedding modelsEvaluationExample selectorsFew-shot promptingConceptual guideKey-value storesLangChain Expression Language (LCEL)MessagesMultimodalityOutput parsersPrompt TemplatesRetrieval augmented generation (RAG)RetrievalRetrieversRunnable interfaceStreamingStructured outputsTestingString-in, string-out llmsText splittersTokensTool callingToolsTracingVector storesWhy LangChain?Ecosystem🦜🛠️ LangSmith🦜🕸️ LangGraphVersionsv0.3v0.2Pydantic compatibilityMigrating from v0.0 chainsHow to migrate from v0.0 chainsMigrating from ConstitutionalChainMigrating from ConversationalChainMigrating from ConversationalRetrievalChainMigrating from LLMChainMigrating from LLMMathChainMigrating from LLMRouterChainMigrating from MapReduceDocumentsChainMigrating from MapRerankDocumentsChainMigrating from MultiPromptChainMigrating from RefineDocumentsChainMigrating from RetrievalQAMigrating from StuffDocumentsChainUpgrading to LangGraph memoryHow to migrate to LangGraph memoryHow to use BaseChatMessageHistory with LangGraphMigrating off ConversationBufferMemory or ConversationStringBufferMemoryMigrating off ConversationBufferWindowMemory or ConversationTokenBufferMemoryMigrating off ConversationSummaryMemory or ConversationSummaryBufferMemoryA Long-Term Memory AgentRelease policySecurity PolicyVersionsMigrating from v0.0 chainsMigrating from LLMMathChainOn this pageMigrating from LLMMathChain
LLMMathChain enabled the evaluation of mathematical expressions generated by a LLM. Instructions for generating the expressions were formatted into the prompt, and the expressions were parsed out of the string response before evaluation using the numexpr library.
This is more naturally achieved via tool calling. We can equip a chat model with a simple calculator tool leveraging numexpr and construct a simple chain around it using LangGraph. Some advantages of this approach include:

Leverage tool-calling capabilities of chat models that have been fine-tuned for this purpose;
Reduce parsing errors from extracting expression from a string LLM response;
Delegation of instructions to message roles (e.g., chat models can understand what a ToolMessage represents without the need for additional prompting);
Support for streaming, both of individual tokens and chain steps.

%pip install --upgrade --quiet numexpr
import osfrom getpass import getpassif "OPENAI_API_KEY" not in os.environ:    os.environ["OPENAI_API_KEY"] = getpass()
Legacy​
Detailsfrom langchain.chains import LLMMathChainfrom langchain_core.prompts import ChatPromptTemplatefrom langchain_openai import ChatOpenAIllm = ChatOpenAI(model="gpt-4o-mini")chain = LLMMathChain.from_llm(llm)chain.invoke("What is 551368 divided by 82?")API Reference:ChatPromptTemplate{'question': 'What is 551368 divided by 82?', 'answer': 'Answer: 6724.0'}
LangGraph​
Detailsimport mathfrom typing import Annotated, Sequenceimport numexprfrom langchain_core.messages import BaseMessagefrom langchain_core.runnables import RunnableConfigfrom langchain_core.tools import toolfrom langchain_openai import ChatOpenAIfrom langgraph.graph import END, StateGraphfrom langgraph.graph.message import add_messagesfrom langgraph.prebuilt.tool_node import ToolNodefrom typing_extensions import TypedDict@tooldef calculator(expression: str) -> str:    """Calculate expression using Python's numexpr library.    Expression should be a single line mathematical expression    that solves the problem.    Examples:        "37593 * 67" for "37593 times 67"        "37593**(1/5)" for "37593^(1/5)"    """    local_dict = {"pi": math.pi, "e": math.e}    return str(        numexpr.evaluate(            expression.strip(),            global_dict={},  # restrict access to globals            local_dict=local_dict,  # add common mathematical functions        )    )llm = ChatOpenAI(model="gpt-4o-mini", temperature=0)tools = [calculator]llm_with_tools = llm.bind_tools(tools, tool_choice="any")class ChainState(TypedDict):    """LangGraph state."""    messages: Annotated[Sequence[BaseMessage], add_messages]async def acall_chain(state: ChainState, config: RunnableConfig):    last_message = state["messages"][-1]    response = await llm_with_tools.ainvoke(state["messages"], config)    return {"messages": [response]}async def acall_model(state: ChainState, config: RunnableConfig):    response = await llm.ainvoke(state["messages"], config)    return {"messages": [response]}graph_builder = StateGraph(ChainState)graph_builder.add_node("call_tool", acall_chain)graph_builder.add_node("execute_tool", ToolNode(tools))graph_builder.add_node("call_model", acall_model)graph_builder.set_entry_point("call_tool")graph_builder.add_edge("call_tool", "execute_tool")graph_builder.add_edge("execute_tool", "call_model")graph_builder.add_edge("call_model", END)chain = graph_builder.compile()API Reference:BaseMessage | RunnableConfig | tool | StateGraph | add_messages | ToolNode# Visualize chain:from IPython.display import ImageImage(chain.get_graph().draw_mermaid_png())# Stream chain steps:example_query = "What is 551368 divided by 82"events = chain.astream(    {"messages": [("user", example_query)]},    stream_mode="values",)async for event in events:    event["messages"][-1].pretty_print()================================[1m Human Message [0m=================================What is 551368 divided by 82==================================[1m Ai Message [0m==================================Tool Calls:  calculator (call_1ic3gjuII0Aq9vxlSYiwvjSb) Call ID: call_1ic3gjuII0Aq9vxlSYiwvjSb  Args:    expression: 551368 / 82=================================[1m Tool Message [0m=================================Name: calculator6724.0==================================[1m Ai Message [0m==================================551368 divided by 82 equals 6724.
Next steps​
See guides for building and working with tools here.
Check out the LangGraph documentation for detail on building with LangGraph.Edit this pagePreviousMigrating from LLMChainNextMigrating from LLMRouterChainLegacyLangGraphNext stepsCommunityLangChain ForumTwitterSlackGitHubOrganizationPythonJS/TSMoreHomepageBlogYouTubeCopyright © 2025 LangChain, Inc.

