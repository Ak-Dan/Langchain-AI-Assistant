




Migrating from RefineDocumentsChain | ü¶úÔ∏èüîó LangChain








Skip to main contentThese docs will be deprecated and no longer maintained with the release of LangChain v1.0 in October 2025. Visit the v1.0 alpha docsIntegrationsAPI ReferenceMoreContributingPeopleError referenceLangSmithLangGraphLangChain HubLangChain JS/TSv0.3v0.3v0.2v0.1üí¨SearchIntroductionTutorialsBuild a Question Answering application over a Graph DatabaseTutorialsBuild a simple LLM application with chat models and prompt templatesBuild a ChatbotBuild a Retrieval Augmented Generation (RAG) App: Part 2Build an Extraction ChainBuild an AgentTaggingBuild a Retrieval Augmented Generation (RAG) App: Part 1Build a semantic search engineBuild a Question/Answering system over SQL dataSummarize TextHow-to guidesHow-to guidesHow to use tools in a chainHow to use a vectorstore as a retrieverHow to add memory to chatbotsHow to use example selectorsHow to add a semantic layer over graph databaseHow to invoke runnables in parallelHow to stream chat model responsesHow to add default invocation args to a RunnableHow to add retrieval to chatbotsHow to use few shot examples in chat modelsHow to do tool/function callingHow to install LangChain packagesHow to add examples to the prompt for query analysisHow to use few shot examplesHow to run custom functionsHow to use output parsers to parse an LLM response into structured formatHow to handle cases where no queries are generatedHow to route between sub-chainsHow to return structured data from a modelHow to summarize text through parallelizationHow to summarize text through iterative refinementHow to summarize text in a single LLM callHow to use toolkitsHow to add ad-hoc tool calling capability to LLMs and Chat ModelsBuild an Agent with AgentExecutor (Legacy)How to construct knowledge graphsHow to partially format prompt templatesHow to handle multiple queries when doing query analysisHow to use built-in tools and toolkitsHow to pass through arguments from one step to the nextHow to compose prompts togetherHow to handle multiple retrievers when doing query analysisHow to add values to a chain's stateHow to construct filters for query analysisHow to configure runtime chain internalsHow to deal with high-cardinality categoricals when doing query analysisCustom Document LoaderHow to use the MultiQueryRetrieverHow to add scores to retriever resultsCachingHow to use callbacks in async environmentsHow to attach callbacks to a runnableHow to propagate callbacks  constructorHow to dispatch custom callback eventsHow to pass callbacks in at runtimeHow to split by characterHow to cache chat model responsesHow to handle rate limitsHow to init any model in one lineHow to track token usage in ChatModelsHow to add tools to chatbotsHow to split codeHow to do retrieval with contextual compressionHow to convert Runnables to ToolsHow to create custom callback handlersHow to create a custom chat model classCustom EmbeddingsHow to create a custom LLM classCustom RetrieverHow to create toolsHow to debug your LLM appsHow to load CSVsHow to load documents from a directoryHow to load HTMLHow to load JSONHow to load MarkdownHow to load Microsoft Office filesHow to load PDFsHow to load web pagesHow to create a dynamic (self-constructing) chainText embedding modelsHow to combine results from multiple retrieversHow to select examples from a LangSmith datasetHow to select examples by lengthHow to select examples by maximal marginal relevance (MMR)How to select examples by n-gram overlapHow to select examples by similarityHow to use reference examples when doing extractionHow to handle long text when doing extractionHow to use prompting alone (no tool calling) to do extractionHow to add fallbacks to a runnableHow to filter messagesHybrid SearchHow to use the LangChain indexing APIHow to inspect runnablesLangChain Expression Language CheatsheetHow to cache LLM responsesHow to track token usage for LLMsRun models locallyHow to get log probabilitiesHow to reorder retrieved results to mitigate the "lost in the middle" effectHow to split Markdown by HeadersHow to merge consecutive messages of the same typeHow to add message historyHow to migrate from legacy LangChain agents to LangGraphHow to retrieve using multiple vectors per documentHow to pass multimodal data to modelsHow to use multimodal promptsHow to create a custom Output ParserHow to use the output-fixing parserHow to parse JSON outputHow to retry when a parsing error occursHow to parse text from message objectsHow to parse XML outputHow to parse YAML outputHow to use the Parent Document RetrieverHow to use LangChain with different Pydantic versionsHow to add chat historyHow to get a RAG application to add citationsHow to do per-user retrievalHow to get your RAG application to return sourcesHow to stream results from your RAG applicationHow to split JSON dataHow to recursively split text by charactersResponse metadataHow to pass runtime secrets to runnablesHow to do "self-querying" retrievalHow to split text based on semantic similarityHow to chain runnablesHow to save and load LangChain objectsHow to split text by tokensHow to split HTMLHow to do question answering over CSVsHow to deal with large databases when doing SQL question-answeringHow to better prompt when doing SQL question-answeringHow to do query validation as part of SQL question-answeringHow to stream runnablesHow to stream responses from an LLMHow to use a time-weighted vector store retrieverHow to return artifacts from a toolHow to use chat models to call toolsHow to disable parallel tool callingHow to force models to call a toolHow to access the RunnableConfig from a toolHow to pass tool outputs to chat modelsHow to pass run time values to toolsHow to stream events from a toolHow to stream tool callsHow to convert tools to OpenAI FunctionsHow to handle tool errorsHow to use few-shot prompting with tool callingHow to add a human-in-the-loop for toolsHow to bind model-specific toolsHow to trim messagesHow to create and query vector storesConceptual guideAgentsArchitectureAsync programming with LangChainCallbacksChat historyChat modelsDocument loadersEmbedding modelsEvaluationExample selectorsFew-shot promptingConceptual guideKey-value storesLangChain Expression Language (LCEL)MessagesMultimodalityOutput parsersPrompt TemplatesRetrieval augmented generation (RAG)RetrievalRetrieversRunnable interfaceStreamingStructured outputsTestingString-in, string-out llmsText splittersTokensTool callingToolsTracingVector storesWhy LangChain?Ecosystemü¶úüõ†Ô∏è LangSmithü¶úüï∏Ô∏è LangGraphVersionsv0.3v0.2Pydantic compatibilityMigrating from v0.0 chainsHow to migrate from v0.0 chainsMigrating from ConstitutionalChainMigrating from ConversationalChainMigrating from ConversationalRetrievalChainMigrating from LLMChainMigrating from LLMMathChainMigrating from LLMRouterChainMigrating from MapReduceDocumentsChainMigrating from MapRerankDocumentsChainMigrating from MultiPromptChainMigrating from RefineDocumentsChainMigrating from RetrievalQAMigrating from StuffDocumentsChainUpgrading to LangGraph memoryHow to migrate to LangGraph memoryHow to use BaseChatMessageHistory with LangGraphMigrating off ConversationBufferMemory or ConversationStringBufferMemoryMigrating off ConversationBufferWindowMemory or ConversationTokenBufferMemoryMigrating off ConversationSummaryMemory or ConversationSummaryBufferMemoryA Long-Term Memory AgentRelease policySecurity PolicyVersionsMigrating from v0.0 chainsMigrating from RefineDocumentsChainOn this pageMigrating from RefineDocumentsChain
RefineDocumentsChain implements a strategy for analyzing long texts. The strategy is as follows:

Split a text into smaller documents;
Apply a process to the first document;
Refine or update the result based on the next document;
Repeat through the sequence of documents until finished.

A common process applied in this context is summarization, in which a running summary is modified as we proceed through chunks of a long text. This is particularly useful for texts that are large compared to the context window of a given LLM.
A LangGraph implementation confers a number of advantages for this problem:

Where RefineDocumentsChain refines the summary via a for loop inside the class, a LangGraph implementation lets you step through the execution to monitor or otherwise steer it if needed.
The LangGraph implementation supports streaming of both execution steps and individual tokens.
Because it is assembled from modular components, it is also simple to extend or modify (e.g., to incorporate tool calling or other behavior).

Below we will go through both RefineDocumentsChain and a corresponding LangGraph implementation on a simple example for illustrative purposes.
Let's first load a chat model:

Select chat model:Google Gemini‚ñæOpenAIAnthropicAzureGoogle GeminiGoogle VertexAWSGroqCohereNVIDIAFireworks AIMistral AITogether AIIBM watsonxDatabricksxAIPerplexityDeepSeekChatOCIGenAIpip install -qU "langchain[google-genai]"import getpassimport osif not os.environ.get("GOOGLE_API_KEY"):  os.environ["GOOGLE_API_KEY"] = getpass.getpass("Enter API key for Google Gemini: ")from langchain.chat_models import init_chat_modelllm = init_chat_model("gemini-2.5-flash", model_provider="google_genai")
Example‚Äã
Let's go through an example where we summarize a sequence of documents. We first generate some simple documents for illustrative purposes:
from langchain_core.documents import Documentdocuments = [    Document(page_content="Apples are red", metadata={"title": "apple_book"}),    Document(page_content="Blueberries are blue", metadata={"title": "blueberry_book"}),    Document(page_content="Bananas are yelow", metadata={"title": "banana_book"}),]API Reference:Document
Legacy‚Äã
DetailsBelow we show an implementation with RefineDocumentsChain. We define the prompt templates for the initial summarization and successive refinements, instantiate separate LLMChain objects for these two purposes, and instantiate RefineDocumentsChain with these components.from langchain.chains import LLMChain, RefineDocumentsChainfrom langchain_core.prompts import ChatPromptTemplate, PromptTemplatefrom langchain_openai import ChatOpenAI# This controls how each document will be formatted. Specifically,# it will be passed to `format_document` - see that function for more# details.document_prompt = PromptTemplate(    input_variables=["page_content"], template="{page_content}")document_variable_name = "context"# The prompt here should take as an input variable the# `document_variable_name`summarize_prompt = ChatPromptTemplate(    [        ("human", "Write a concise summary of the following: {context}"),    ])initial_llm_chain = LLMChain(llm=llm, prompt=summarize_prompt)initial_response_name = "existing_answer"# The prompt here should take as an input variable the# `document_variable_name` as well as `initial_response_name`refine_template = """Produce a final summary.Existing summary up to this point:{existing_answer}New context:------------{context}------------Given the new context, refine the original summary."""refine_prompt = ChatPromptTemplate([("human", refine_template)])refine_llm_chain = LLMChain(llm=llm, prompt=refine_prompt)chain = RefineDocumentsChain(    initial_llm_chain=initial_llm_chain,    refine_llm_chain=refine_llm_chain,    document_prompt=document_prompt,    document_variable_name=document_variable_name,    initial_response_name=initial_response_name,)API Reference:ChatPromptTemplate | PromptTemplateWe can now invoke our chain:result = chain.invoke(documents)result["output_text"]'Apples are typically red in color, blueberries are blue, and bananas are yellow.'The LangSmith trace is composed of three LLM calls: one for the initial summary, and two more updates of that summary. The process completes when we update the summary with content from the final document.
LangGraph‚Äã
DetailsBelow we show a LangGraph implementation of this process:
We use the same two templates as before.
We generate a simple chain for the initial summary that plucks out the first document, formats it into a prompt and runs inference with our LLM.
We generate a second refine_summary_chain that operates on each successive document, refining the initial summary.
We will need to install langgraph:pip install -qU langgraphimport operatorfrom typing import List, Literal, TypedDictfrom langchain_core.output_parsers import StrOutputParserfrom langchain_core.prompts import ChatPromptTemplatefrom langchain_core.runnables import RunnableConfigfrom langchain_openai import ChatOpenAIfrom langgraph.constants import Sendfrom langgraph.graph import END, START, StateGraphllm = ChatOpenAI(model="gpt-4o-mini", temperature=0)# Initial summarysummarize_prompt = ChatPromptTemplate(    [        ("human", "Write a concise summary of the following: {context}"),    ])initial_summary_chain = summarize_prompt | llm | StrOutputParser()# Refining the summary with new docsrefine_template = """Produce a final summary.Existing summary up to this point:{existing_answer}New context:------------{context}------------Given the new context, refine the original summary."""refine_prompt = ChatPromptTemplate([("human", refine_template)])refine_summary_chain = refine_prompt | llm | StrOutputParser()# For LangGraph, we will define the state of the graph to hold the query,# destination, and final answer.class State(TypedDict):    contents: List[str]    index: int    summary: str# We define functions for each node, including a node that generates# the initial summary:async def generate_initial_summary(state: State, config: RunnableConfig):    summary = await initial_summary_chain.ainvoke(        state["contents"][0],        config,    )    return {"summary": summary, "index": 1}# And a node that refines the summary based on the next documentasync def refine_summary(state: State, config: RunnableConfig):    content = state["contents"][state["index"]]    summary = await refine_summary_chain.ainvoke(        {"existing_answer": state["summary"], "context": content},        config,    )    return {"summary": summary, "index": state["index"] + 1}# Here we implement logic to either exit the application or refine# the summary.def should_refine(state: State) -> Literal["refine_summary", END]:    if state["index"] >= len(state["contents"]):        return END    else:        return "refine_summary"graph = StateGraph(State)graph.add_node("generate_initial_summary", generate_initial_summary)graph.add_node("refine_summary", refine_summary)graph.add_edge(START, "generate_initial_summary")graph.add_conditional_edges("generate_initial_summary", should_refine)graph.add_conditional_edges("refine_summary", should_refine)app = graph.compile()API Reference:StrOutputParser | ChatPromptTemplate | RunnableConfig | Send | StateGraphfrom IPython.display import ImageImage(app.get_graph().draw_mermaid_png())We can step through the execution as follows, printing out the summary as it is refined:async for step in app.astream(    {"contents": [doc.page_content for doc in documents]},    stream_mode="values",):    if summary := step.get("summary"):        print(summary)Apples are typically red in color.Apples are typically red in color, while blueberries are blue.Apples are typically red in color, blueberries are blue, and bananas are yellow.In the LangSmith trace we again recover three LLM calls, performing the same functions as before.Note that we can stream tokens from the application, including from intermediate steps:async for event in app.astream_events(    {"contents": [doc.page_content for doc in documents]}, version="v2"):    kind = event["event"]    if kind == "on_chat_model_stream":        content = event["data"]["chunk"].content        if content:            print(content, end="|")    elif kind == "on_chat_model_end":        print("\n\n")Ap|ples| are| characterized| by| their| red| color|.|Ap|ples| are| characterized| by| their| red| color|,| while| blueberries| are| known| for| their| blue| hue|.|Ap|ples| are| characterized| by| their| red| color|,| blueberries| are| known| for| their| blue| hue|,| and| bananas| are| recognized| for| their| yellow| color|.|
Next steps‚Äã
See this tutorial for more LLM-based summarization strategies.
Check out the LangGraph documentation for detail on building with LangGraph.Edit this pagePreviousMigrating from MultiPromptChainNextMigrating from RetrievalQAExampleLegacyLangGraphNext stepsCommunityLangChain ForumTwitterSlackGitHubOrganizationPythonJS/TSMoreHomepageBlogYouTubeCopyright ¬© 2025 LangChain, Inc.

