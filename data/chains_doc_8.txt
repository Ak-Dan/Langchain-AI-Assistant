




Migrating from MapRerankDocumentsChain | ü¶úÔ∏èüîó LangChain








Skip to main contentThese docs will be deprecated and no longer maintained with the release of LangChain v1.0 in October 2025. Visit the v1.0 alpha docsIntegrationsAPI ReferenceMoreContributingPeopleError referenceLangSmithLangGraphLangChain HubLangChain JS/TSv0.3v0.3v0.2v0.1üí¨SearchIntroductionTutorialsBuild a Question Answering application over a Graph DatabaseTutorialsBuild a simple LLM application with chat models and prompt templatesBuild a ChatbotBuild a Retrieval Augmented Generation (RAG) App: Part 2Build an Extraction ChainBuild an AgentTaggingBuild a Retrieval Augmented Generation (RAG) App: Part 1Build a semantic search engineBuild a Question/Answering system over SQL dataSummarize TextHow-to guidesHow-to guidesHow to use tools in a chainHow to use a vectorstore as a retrieverHow to add memory to chatbotsHow to use example selectorsHow to add a semantic layer over graph databaseHow to invoke runnables in parallelHow to stream chat model responsesHow to add default invocation args to a RunnableHow to add retrieval to chatbotsHow to use few shot examples in chat modelsHow to do tool/function callingHow to install LangChain packagesHow to add examples to the prompt for query analysisHow to use few shot examplesHow to run custom functionsHow to use output parsers to parse an LLM response into structured formatHow to handle cases where no queries are generatedHow to route between sub-chainsHow to return structured data from a modelHow to summarize text through parallelizationHow to summarize text through iterative refinementHow to summarize text in a single LLM callHow to use toolkitsHow to add ad-hoc tool calling capability to LLMs and Chat ModelsBuild an Agent with AgentExecutor (Legacy)How to construct knowledge graphsHow to partially format prompt templatesHow to handle multiple queries when doing query analysisHow to use built-in tools and toolkitsHow to pass through arguments from one step to the nextHow to compose prompts togetherHow to handle multiple retrievers when doing query analysisHow to add values to a chain's stateHow to construct filters for query analysisHow to configure runtime chain internalsHow to deal with high-cardinality categoricals when doing query analysisCustom Document LoaderHow to use the MultiQueryRetrieverHow to add scores to retriever resultsCachingHow to use callbacks in async environmentsHow to attach callbacks to a runnableHow to propagate callbacks  constructorHow to dispatch custom callback eventsHow to pass callbacks in at runtimeHow to split by characterHow to cache chat model responsesHow to handle rate limitsHow to init any model in one lineHow to track token usage in ChatModelsHow to add tools to chatbotsHow to split codeHow to do retrieval with contextual compressionHow to convert Runnables to ToolsHow to create custom callback handlersHow to create a custom chat model classCustom EmbeddingsHow to create a custom LLM classCustom RetrieverHow to create toolsHow to debug your LLM appsHow to load CSVsHow to load documents from a directoryHow to load HTMLHow to load JSONHow to load MarkdownHow to load Microsoft Office filesHow to load PDFsHow to load web pagesHow to create a dynamic (self-constructing) chainText embedding modelsHow to combine results from multiple retrieversHow to select examples from a LangSmith datasetHow to select examples by lengthHow to select examples by maximal marginal relevance (MMR)How to select examples by n-gram overlapHow to select examples by similarityHow to use reference examples when doing extractionHow to handle long text when doing extractionHow to use prompting alone (no tool calling) to do extractionHow to add fallbacks to a runnableHow to filter messagesHybrid SearchHow to use the LangChain indexing APIHow to inspect runnablesLangChain Expression Language CheatsheetHow to cache LLM responsesHow to track token usage for LLMsRun models locallyHow to get log probabilitiesHow to reorder retrieved results to mitigate the "lost in the middle" effectHow to split Markdown by HeadersHow to merge consecutive messages of the same typeHow to add message historyHow to migrate from legacy LangChain agents to LangGraphHow to retrieve using multiple vectors per documentHow to pass multimodal data to modelsHow to use multimodal promptsHow to create a custom Output ParserHow to use the output-fixing parserHow to parse JSON outputHow to retry when a parsing error occursHow to parse text from message objectsHow to parse XML outputHow to parse YAML outputHow to use the Parent Document RetrieverHow to use LangChain with different Pydantic versionsHow to add chat historyHow to get a RAG application to add citationsHow to do per-user retrievalHow to get your RAG application to return sourcesHow to stream results from your RAG applicationHow to split JSON dataHow to recursively split text by charactersResponse metadataHow to pass runtime secrets to runnablesHow to do "self-querying" retrievalHow to split text based on semantic similarityHow to chain runnablesHow to save and load LangChain objectsHow to split text by tokensHow to split HTMLHow to do question answering over CSVsHow to deal with large databases when doing SQL question-answeringHow to better prompt when doing SQL question-answeringHow to do query validation as part of SQL question-answeringHow to stream runnablesHow to stream responses from an LLMHow to use a time-weighted vector store retrieverHow to return artifacts from a toolHow to use chat models to call toolsHow to disable parallel tool callingHow to force models to call a toolHow to access the RunnableConfig from a toolHow to pass tool outputs to chat modelsHow to pass run time values to toolsHow to stream events from a toolHow to stream tool callsHow to convert tools to OpenAI FunctionsHow to handle tool errorsHow to use few-shot prompting with tool callingHow to add a human-in-the-loop for toolsHow to bind model-specific toolsHow to trim messagesHow to create and query vector storesConceptual guideAgentsArchitectureAsync programming with LangChainCallbacksChat historyChat modelsDocument loadersEmbedding modelsEvaluationExample selectorsFew-shot promptingConceptual guideKey-value storesLangChain Expression Language (LCEL)MessagesMultimodalityOutput parsersPrompt TemplatesRetrieval augmented generation (RAG)RetrievalRetrieversRunnable interfaceStreamingStructured outputsTestingString-in, string-out llmsText splittersTokensTool callingToolsTracingVector storesWhy LangChain?Ecosystemü¶úüõ†Ô∏è LangSmithü¶úüï∏Ô∏è LangGraphVersionsv0.3v0.2Pydantic compatibilityMigrating from v0.0 chainsHow to migrate from v0.0 chainsMigrating from ConstitutionalChainMigrating from ConversationalChainMigrating from ConversationalRetrievalChainMigrating from LLMChainMigrating from LLMMathChainMigrating from LLMRouterChainMigrating from MapReduceDocumentsChainMigrating from MapRerankDocumentsChainMigrating from MultiPromptChainMigrating from RefineDocumentsChainMigrating from RetrievalQAMigrating from StuffDocumentsChainUpgrading to LangGraph memoryHow to migrate to LangGraph memoryHow to use BaseChatMessageHistory with LangGraphMigrating off ConversationBufferMemory or ConversationStringBufferMemoryMigrating off ConversationBufferWindowMemory or ConversationTokenBufferMemoryMigrating off ConversationSummaryMemory or ConversationSummaryBufferMemoryA Long-Term Memory AgentRelease policySecurity PolicyVersionsMigrating from v0.0 chainsMigrating from MapRerankDocumentsChainOn this pageMigrating from MapRerankDocumentsChain
MapRerankDocumentsChain implements a strategy for analyzing long texts. The strategy is as follows:

Split a text into smaller documents;
Map a process to the set of documents, where the process includes generating a score;
Rank the results by score and return the maximum.

A common process in this scenario is question-answering using pieces of context from a document. Forcing the model to generate a score along with its answer helps to select for answers generated only by relevant context.
An LangGraph implementation allows for the incorporation of tool calling and other features for this problem. Below we will go through both MapRerankDocumentsChain and a corresponding LangGraph implementation on a simple example for illustrative purposes.
Example‚Äã
Let's go through an example where we analyze a set of documents. Let's use the following 3 documents:
from langchain_core.documents import Documentdocuments = [    Document(page_content="Alice has blue eyes", metadata={"title": "book_chapter_2"}),    Document(page_content="Bob has brown eyes", metadata={"title": "book_chapter_1"}),    Document(        page_content="Charlie has green eyes", metadata={"title": "book_chapter_3"}    ),]API Reference:Document
Legacy‚Äã
DetailsBelow we show an implementation with MapRerankDocumentsChain. We define the prompt template for a question-answering task and instantiate a LLMChain object for this purpose. We define how documents are formatted into the prompt and ensure consistency among the keys in the various prompts.from langchain.chains import LLMChain, MapRerankDocumentsChainfrom langchain.output_parsers.regex import RegexParserfrom langchain_core.prompts import PromptTemplatefrom langchain_openai import OpenAIdocument_variable_name = "context"llm = OpenAI()# The prompt here should take as an input variable the# `document_variable_name`# The actual prompt will need to be a lot more complex, this is just# an example.prompt_template = (    "What color are Bob's eyes? "    "Output both your answer and a score (1-10) of how confident "    "you are in the format: <Answer>\nScore: <Score>.\n\n"    "Provide no other commentary.\n\n"    "Context: {context}")output_parser = RegexParser(    regex=r"(.*?)\nScore: (.*)",    output_keys=["answer", "score"],)prompt = PromptTemplate(    template=prompt_template,    input_variables=["context"],    output_parser=output_parser,)llm_chain = LLMChain(llm=llm, prompt=prompt)chain = MapRerankDocumentsChain(    llm_chain=llm_chain,    document_variable_name=document_variable_name,    rank_key="score",    answer_key="answer",)API Reference:PromptTemplateresponse = chain.invoke(documents)response["output_text"]/langchain/libs/langchain/langchain/chains/llm.py:369: UserWarning: The apply_and_parse method is deprecated, instead pass an output parser directly to LLMChain.  warnings.warn('Brown'Inspecting the LangSmith trace for the above run, we can see three LLM calls-- one for each document-- and that the scoring mechanism mitigated against hallucinations.
LangGraph‚Äã
DetailsBelow we show a LangGraph implementation of this process. Note that our template is simplified, as we delegate the formatting instructions to the chat model's tool-calling features via the .with_structured_output method.Here we follow a basic map-reduce workflow to execute the LLM calls in parallel.We will need to install langgraph:pip install -qU langgraphimport operatorfrom typing import Annotated, List, TypedDictfrom langchain_core.prompts import ChatPromptTemplatefrom langchain_openai import ChatOpenAIfrom langgraph.constants import Sendfrom langgraph.graph import END, START, StateGraphclass AnswerWithScore(TypedDict):    answer: str    score: Annotated[int, ..., "Score from 1-10."]llm = ChatOpenAI(model="gpt-4o-mini", temperature=0)prompt_template = "What color are Bob's eyes?\n\nContext: {context}"prompt = ChatPromptTemplate.from_template(prompt_template)# The below chain formats context from a document into a prompt, then# generates a response structured according to the AnswerWithScore schema.map_chain = prompt | llm.with_structured_output(AnswerWithScore)# Below we define the components that will make up the graph# This will be the overall state of the graph.# It will contain the input document contents, corresponding# answers with scores, and a final answer.class State(TypedDict):    contents: List[str]    answers_with_scores: Annotated[list, operator.add]    answer: str# This will be the state of the node that we will "map" all# documents to in order to generate answers with scoresclass MapState(TypedDict):    content: str# Here we define the logic to map out over the documents# We will use this an edge in the graphdef map_analyses(state: State):    # We will return a list of `Send` objects    # Each `Send` object consists of the name of a node in the graph    # as well as the state to send to that node    return [        Send("generate_analysis", {"content": content}) for content in state["contents"]    ]# Here we generate an answer with score, given a documentasync def generate_analysis(state: MapState):    response = await map_chain.ainvoke(state["content"])    return {"answers_with_scores": [response]}# Here we will select the top answerdef pick_top_ranked(state: State):    ranked_answers = sorted(        state["answers_with_scores"], key=lambda x: -int(x["score"])    )    return {"answer": ranked_answers[0]}# Construct the graph: here we put everything together to construct our graphgraph = StateGraph(State)graph.add_node("generate_analysis", generate_analysis)graph.add_node("pick_top_ranked", pick_top_ranked)graph.add_conditional_edges(START, map_analyses, ["generate_analysis"])graph.add_edge("generate_analysis", "pick_top_ranked")graph.add_edge("pick_top_ranked", END)app = graph.compile()API Reference:ChatPromptTemplate | Send | StateGraphfrom IPython.display import ImageImage(app.get_graph().draw_mermaid_png())result = await app.ainvoke({"contents": [doc.page_content for doc in documents]})result["answer"]{'answer': 'Bob has brown eyes.', 'score': 10}Inspecting the LangSmith trace for the above run, we can see three LLM calls as before. Using the model's tool-calling features have also enabled us to remove the parsing step.
Next steps‚Äã
See these how-to guides for more on question-answering tasks with RAG.
Check out the LangGraph documentation for detail on building with LangGraph, including this guide on the details of map-reduce in LangGraph.Edit this pagePreviousMigrating from MapReduceDocumentsChainNextMigrating from MultiPromptChainExampleLegacyLangGraphNext stepsCommunityLangChain ForumTwitterSlackGitHubOrganizationPythonJS/TSMoreHomepageBlogYouTubeCopyright ¬© 2025 LangChain, Inc.

