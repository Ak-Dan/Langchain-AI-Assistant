{
  "ids": [
    "doc_0_chunk_0",
    "doc_0_chunk_1",
    "doc_0_chunk_2",
    "doc_0_chunk_3",
    "doc_0_chunk_4",
    "doc_0_chunk_5",
    "doc_0_chunk_6",
    "doc_0_chunk_7",
    "doc_0_chunk_8",
    "doc_0_chunk_9",
    "doc_0_chunk_10",
    "doc_0_chunk_11",
    "doc_0_chunk_12",
    "doc_0_chunk_13",
    "doc_0_chunk_14",
    "doc_0_chunk_15",
    "doc_0_chunk_16",
    "doc_0_chunk_17",
    "doc_0_chunk_18",
    "doc_0_chunk_19",
    "doc_0_chunk_20",
    "doc_0_chunk_21",
    "doc_0_chunk_22",
    "doc_0_chunk_23",
    "doc_0_chunk_24",
    "doc_0_chunk_25",
    "doc_0_chunk_26",
    "doc_0_chunk_27",
    "doc_1_chunk_0",
    "doc_1_chunk_1",
    "doc_1_chunk_2",
    "doc_1_chunk_3",
    "doc_1_chunk_4",
    "doc_1_chunk_5",
    "doc_1_chunk_6",
    "doc_1_chunk_7",
    "doc_1_chunk_8",
    "doc_1_chunk_9",
    "doc_1_chunk_10",
    "doc_1_chunk_11",
    "doc_1_chunk_12",
    "doc_1_chunk_13",
    "doc_1_chunk_14",
    "doc_1_chunk_15",
    "doc_1_chunk_16",
    "doc_1_chunk_17",
    "doc_1_chunk_18",
    "doc_1_chunk_19",
    "doc_1_chunk_20",
    "doc_1_chunk_21",
    "doc_1_chunk_22",
    "doc_1_chunk_23",
    "doc_1_chunk_24",
    "doc_1_chunk_25",
    "doc_1_chunk_26",
    "doc_1_chunk_27",
    "doc_1_chunk_28",
    "doc_1_chunk_29",
    "doc_1_chunk_30",
    "doc_1_chunk_31",
    "doc_1_chunk_32",
    "doc_1_chunk_33",
    "doc_1_chunk_34",
    "doc_1_chunk_35",
    "doc_1_chunk_36",
    "doc_1_chunk_37",
    "doc_1_chunk_38",
    "doc_1_chunk_39",
    "doc_1_chunk_40",
    "doc_2_chunk_0",
    "doc_2_chunk_1",
    "doc_2_chunk_2",
    "doc_2_chunk_3",
    "doc_2_chunk_4",
    "doc_2_chunk_5",
    "doc_2_chunk_6",
    "doc_2_chunk_7",
    "doc_2_chunk_8",
    "doc_2_chunk_9",
    "doc_2_chunk_10",
    "doc_2_chunk_11",
    "doc_2_chunk_12",
    "doc_2_chunk_13",
    "doc_2_chunk_14",
    "doc_2_chunk_15",
    "doc_2_chunk_16",
    "doc_2_chunk_17",
    "doc_2_chunk_18",
    "doc_2_chunk_19",
    "doc_2_chunk_20",
    "doc_2_chunk_21",
    "doc_2_chunk_22",
    "doc_2_chunk_23",
    "doc_2_chunk_24",
    "doc_2_chunk_25",
    "doc_2_chunk_26",
    "doc_2_chunk_27",
    "doc_2_chunk_28",
    "doc_2_chunk_29",
    "doc_2_chunk_30",
    "doc_2_chunk_31",
    "doc_2_chunk_32",
    "doc_2_chunk_33",
    "doc_2_chunk_34",
    "doc_2_chunk_35",
    "doc_2_chunk_36",
    "doc_2_chunk_37",
    "doc_2_chunk_38",
    "doc_2_chunk_39",
    "doc_2_chunk_40",
    "doc_3_chunk_0",
    "doc_3_chunk_1",
    "doc_3_chunk_2",
    "doc_3_chunk_3",
    "doc_3_chunk_4",
    "doc_3_chunk_5",
    "doc_3_chunk_6",
    "doc_3_chunk_7",
    "doc_3_chunk_8",
    "doc_3_chunk_9",
    "doc_3_chunk_10",
    "doc_3_chunk_11",
    "doc_3_chunk_12",
    "doc_3_chunk_13",
    "doc_3_chunk_14",
    "doc_3_chunk_15",
    "doc_3_chunk_16",
    "doc_3_chunk_17",
    "doc_3_chunk_18",
    "doc_3_chunk_19",
    "doc_3_chunk_20",
    "doc_3_chunk_21",
    "doc_3_chunk_22",
    "doc_3_chunk_23",
    "doc_3_chunk_24",
    "doc_3_chunk_25",
    "doc_3_chunk_26",
    "doc_3_chunk_27",
    "doc_3_chunk_28",
    "doc_3_chunk_29",
    "doc_3_chunk_30",
    "doc_3_chunk_31",
    "doc_3_chunk_32",
    "doc_3_chunk_33",
    "doc_3_chunk_34",
    "doc_3_chunk_35",
    "doc_3_chunk_36",
    "doc_3_chunk_37",
    "doc_3_chunk_38",
    "doc_3_chunk_39",
    "doc_3_chunk_40",
    "doc_3_chunk_41",
    "doc_3_chunk_42",
    "doc_4_chunk_0",
    "doc_4_chunk_1",
    "doc_4_chunk_2",
    "doc_4_chunk_3",
    "doc_4_chunk_4",
    "doc_4_chunk_5",
    "doc_4_chunk_6",
    "doc_4_chunk_7",
    "doc_4_chunk_8",
    "doc_4_chunk_9",
    "doc_4_chunk_10",
    "doc_4_chunk_11",
    "doc_4_chunk_12",
    "doc_4_chunk_13",
    "doc_4_chunk_14",
    "doc_4_chunk_15",
    "doc_4_chunk_16",
    "doc_4_chunk_17",
    "doc_4_chunk_18",
    "doc_4_chunk_19",
    "doc_4_chunk_20",
    "doc_4_chunk_21",
    "doc_4_chunk_22",
    "doc_4_chunk_23",
    "doc_4_chunk_24",
    "doc_4_chunk_25",
    "doc_4_chunk_26",
    "doc_4_chunk_27",
    "doc_4_chunk_28",
    "doc_4_chunk_29",
    "doc_5_chunk_0",
    "doc_5_chunk_1",
    "doc_5_chunk_2",
    "doc_5_chunk_3",
    "doc_5_chunk_4",
    "doc_5_chunk_5",
    "doc_5_chunk_6",
    "doc_5_chunk_7",
    "doc_5_chunk_8",
    "doc_5_chunk_9",
    "doc_5_chunk_10",
    "doc_5_chunk_11",
    "doc_5_chunk_12",
    "doc_5_chunk_13",
    "doc_5_chunk_14",
    "doc_5_chunk_15",
    "doc_5_chunk_16",
    "doc_5_chunk_17",
    "doc_5_chunk_18",
    "doc_5_chunk_19",
    "doc_5_chunk_20",
    "doc_5_chunk_21",
    "doc_5_chunk_22",
    "doc_5_chunk_23",
    "doc_5_chunk_24",
    "doc_5_chunk_25",
    "doc_5_chunk_26",
    "doc_5_chunk_27",
    "doc_5_chunk_28",
    "doc_5_chunk_29",
    "doc_5_chunk_30",
    "doc_6_chunk_0",
    "doc_6_chunk_1",
    "doc_6_chunk_2",
    "doc_6_chunk_3",
    "doc_6_chunk_4",
    "doc_6_chunk_5",
    "doc_6_chunk_6",
    "doc_6_chunk_7",
    "doc_6_chunk_8",
    "doc_6_chunk_9",
    "doc_6_chunk_10",
    "doc_6_chunk_11",
    "doc_6_chunk_12",
    "doc_6_chunk_13",
    "doc_6_chunk_14",
    "doc_6_chunk_15",
    "doc_6_chunk_16",
    "doc_6_chunk_17",
    "doc_6_chunk_18",
    "doc_6_chunk_19",
    "doc_6_chunk_20",
    "doc_6_chunk_21",
    "doc_6_chunk_22",
    "doc_6_chunk_23",
    "doc_6_chunk_24",
    "doc_6_chunk_25",
    "doc_6_chunk_26",
    "doc_6_chunk_27",
    "doc_6_chunk_28",
    "doc_6_chunk_29",
    "doc_6_chunk_30",
    "doc_6_chunk_31",
    "doc_6_chunk_32",
    "doc_6_chunk_33",
    "doc_6_chunk_34",
    "doc_6_chunk_35",
    "doc_6_chunk_36",
    "doc_6_chunk_37",
    "doc_6_chunk_38",
    "doc_6_chunk_39",
    "doc_6_chunk_40",
    "doc_6_chunk_41",
    "doc_6_chunk_42",
    "doc_6_chunk_43",
    "doc_6_chunk_44",
    "doc_7_chunk_0",
    "doc_7_chunk_1",
    "doc_7_chunk_2",
    "doc_7_chunk_3",
    "doc_7_chunk_4",
    "doc_7_chunk_5",
    "doc_7_chunk_6",
    "doc_7_chunk_7",
    "doc_7_chunk_8",
    "doc_7_chunk_9",
    "doc_7_chunk_10",
    "doc_7_chunk_11",
    "doc_7_chunk_12",
    "doc_7_chunk_13",
    "doc_7_chunk_14",
    "doc_7_chunk_15",
    "doc_7_chunk_16",
    "doc_7_chunk_17",
    "doc_7_chunk_18",
    "doc_7_chunk_19",
    "doc_7_chunk_20",
    "doc_7_chunk_21",
    "doc_7_chunk_22",
    "doc_7_chunk_23",
    "doc_7_chunk_24",
    "doc_7_chunk_25",
    "doc_7_chunk_26",
    "doc_8_chunk_0",
    "doc_8_chunk_1",
    "doc_8_chunk_2",
    "doc_8_chunk_3",
    "doc_8_chunk_4",
    "doc_8_chunk_5",
    "doc_8_chunk_6",
    "doc_8_chunk_7",
    "doc_8_chunk_8",
    "doc_8_chunk_9",
    "doc_8_chunk_10",
    "doc_8_chunk_11",
    "doc_8_chunk_12",
    "doc_8_chunk_13",
    "doc_8_chunk_14",
    "doc_8_chunk_15",
    "doc_8_chunk_16",
    "doc_8_chunk_17",
    "doc_8_chunk_18",
    "doc_8_chunk_19",
    "doc_8_chunk_20",
    "doc_8_chunk_21",
    "doc_8_chunk_22",
    "doc_8_chunk_23",
    "doc_8_chunk_24",
    "doc_8_chunk_25",
    "doc_8_chunk_26",
    "doc_8_chunk_27",
    "doc_8_chunk_28",
    "doc_8_chunk_29",
    "doc_9_chunk_0",
    "doc_9_chunk_1",
    "doc_9_chunk_2",
    "doc_9_chunk_3",
    "doc_9_chunk_4",
    "doc_9_chunk_5",
    "doc_9_chunk_6",
    "doc_9_chunk_7",
    "doc_9_chunk_8",
    "doc_9_chunk_9",
    "doc_9_chunk_10",
    "doc_9_chunk_11",
    "doc_9_chunk_12",
    "doc_9_chunk_13",
    "doc_9_chunk_14",
    "doc_9_chunk_15",
    "doc_9_chunk_16",
    "doc_9_chunk_17",
    "doc_9_chunk_18",
    "doc_9_chunk_19",
    "doc_9_chunk_20",
    "doc_9_chunk_21",
    "doc_9_chunk_22",
    "doc_9_chunk_23",
    "doc_9_chunk_24",
    "doc_9_chunk_25",
    "doc_9_chunk_26",
    "doc_9_chunk_27",
    "doc_9_chunk_28",
    "doc_9_chunk_29",
    "doc_9_chunk_30",
    "doc_9_chunk_31",
    "doc_9_chunk_32",
    "doc_10_chunk_0",
    "doc_10_chunk_1",
    "doc_10_chunk_2",
    "doc_10_chunk_3",
    "doc_10_chunk_4",
    "doc_10_chunk_5",
    "doc_10_chunk_6",
    "doc_10_chunk_7",
    "doc_10_chunk_8",
    "doc_10_chunk_9",
    "doc_10_chunk_10",
    "doc_10_chunk_11",
    "doc_10_chunk_12",
    "doc_10_chunk_13",
    "doc_10_chunk_14",
    "doc_10_chunk_15",
    "doc_10_chunk_16",
    "doc_10_chunk_17",
    "doc_10_chunk_18",
    "doc_10_chunk_19",
    "doc_10_chunk_20",
    "doc_10_chunk_21",
    "doc_10_chunk_22",
    "doc_10_chunk_23",
    "doc_10_chunk_24",
    "doc_10_chunk_25",
    "doc_10_chunk_26",
    "doc_10_chunk_27",
    "doc_10_chunk_28",
    "doc_10_chunk_29",
    "doc_10_chunk_30",
    "doc_10_chunk_31",
    "doc_10_chunk_32",
    "doc_10_chunk_33",
    "doc_10_chunk_34",
    "doc_10_chunk_35",
    "doc_10_chunk_36",
    "doc_10_chunk_37",
    "doc_10_chunk_38",
    "doc_10_chunk_39",
    "doc_10_chunk_40",
    "doc_10_chunk_41",
    "doc_10_chunk_42",
    "doc_10_chunk_43",
    "doc_10_chunk_44",
    "doc_10_chunk_45",
    "doc_10_chunk_46",
    "doc_10_chunk_47",
    "doc_10_chunk_48",
    "doc_10_chunk_49",
    "doc_10_chunk_50",
    "doc_10_chunk_51",
    "doc_10_chunk_52",
    "doc_10_chunk_53",
    "doc_10_chunk_54",
    "doc_10_chunk_55",
    "doc_10_chunk_56",
    "doc_10_chunk_57",
    "doc_10_chunk_58",
    "doc_10_chunk_59",
    "doc_10_chunk_60",
    "doc_10_chunk_61",
    "doc_10_chunk_62",
    "doc_10_chunk_63",
    "doc_10_chunk_64",
    "doc_11_chunk_0",
    "doc_11_chunk_1",
    "doc_11_chunk_2",
    "doc_11_chunk_3",
    "doc_11_chunk_4",
    "doc_11_chunk_5",
    "doc_11_chunk_6",
    "doc_11_chunk_7",
    "doc_11_chunk_8",
    "doc_11_chunk_9",
    "doc_11_chunk_10",
    "doc_11_chunk_11",
    "doc_11_chunk_12",
    "doc_11_chunk_13",
    "doc_11_chunk_14",
    "doc_11_chunk_15",
    "doc_11_chunk_16",
    "doc_11_chunk_17",
    "doc_11_chunk_18",
    "doc_11_chunk_19",
    "doc_11_chunk_20",
    "doc_11_chunk_21",
    "doc_11_chunk_22",
    "doc_11_chunk_23",
    "doc_11_chunk_24",
    "doc_11_chunk_25",
    "doc_11_chunk_26",
    "doc_11_chunk_27",
    "doc_11_chunk_28",
    "doc_11_chunk_29",
    "doc_11_chunk_30",
    "doc_11_chunk_31",
    "doc_11_chunk_32",
    "doc_11_chunk_33",
    "doc_11_chunk_34",
    "doc_12_chunk_0",
    "doc_12_chunk_1",
    "doc_12_chunk_2",
    "doc_12_chunk_3",
    "doc_12_chunk_4",
    "doc_12_chunk_5",
    "doc_12_chunk_6",
    "doc_12_chunk_7",
    "doc_12_chunk_8",
    "doc_12_chunk_9",
    "doc_12_chunk_10",
    "doc_12_chunk_11",
    "doc_12_chunk_12",
    "doc_12_chunk_13",
    "doc_12_chunk_14",
    "doc_12_chunk_15",
    "doc_12_chunk_16",
    "doc_12_chunk_17",
    "doc_12_chunk_18",
    "doc_12_chunk_19",
    "doc_12_chunk_20",
    "doc_12_chunk_21",
    "doc_12_chunk_22",
    "doc_12_chunk_23",
    "doc_12_chunk_24",
    "doc_12_chunk_25",
    "doc_12_chunk_26",
    "doc_12_chunk_27",
    "doc_12_chunk_28",
    "doc_12_chunk_29",
    "doc_12_chunk_30",
    "doc_12_chunk_31",
    "doc_12_chunk_32",
    "doc_12_chunk_33",
    "doc_12_chunk_34",
    "doc_12_chunk_35",
    "doc_12_chunk_36"
  ],
  "documents": [
    "How to migrate from v0.0 chains | 🦜️🔗 LangChain",
    "Skip to main contentThese docs will be deprecated and no longer maintained with the release of LangChain v1.0 in October 2025. Visit the v1.0 alpha docsIntegrationsAPI ReferenceMoreContributingPeopleError referenceLangSmithLangGraphLangChain HubLangChain JS/TSv0.3v0.3v0.2v0.1💬SearchIntroductionTutorialsBuild a Question Answering application over a Graph DatabaseTutorialsBuild a simple LLM application with chat models and prompt templatesBuild a ChatbotBuild a Retrieval Augmented Generation",
    "a ChatbotBuild a Retrieval Augmented Generation (RAG) App: Part 2Build an Extraction ChainBuild an AgentTaggingBuild a Retrieval Augmented Generation (RAG) App: Part 1Build a semantic search engineBuild a Question/Answering system over SQL dataSummarize TextHow-to guidesHow-to guidesHow to use tools in a chainHow to use a vectorstore as a retrieverHow to add memory to chatbotsHow to use example selectorsHow to add a semantic layer over graph databaseHow to invoke runnables in parallelHow to",
    "databaseHow to invoke runnables in parallelHow to stream chat model responsesHow to add default invocation args to a RunnableHow to add retrieval to chatbotsHow to use few shot examples in chat modelsHow to do tool/function callingHow to install LangChain packagesHow to add examples to the prompt for query analysisHow to use few shot examplesHow to run custom functionsHow to use output parsers to parse an LLM response into structured formatHow to handle cases where no queries are generatedHow",
    "to handle cases where no queries are generatedHow to route between sub-chainsHow to return structured data from a modelHow to summarize text through parallelizationHow to summarize text through iterative refinementHow to summarize text in a single LLM callHow to use toolkitsHow to add ad-hoc tool calling capability to LLMs and Chat ModelsBuild an Agent with AgentExecutor (Legacy)How to construct knowledge graphsHow to partially format prompt templatesHow to handle multiple queries when doing",
    "to handle multiple queries when doing query analysisHow to use built-in tools and toolkitsHow to pass through arguments from one step to the nextHow to compose prompts togetherHow to handle multiple retrievers when doing query analysisHow to add values to a chain's stateHow to construct filters for query analysisHow to configure runtime chain internalsHow to deal with high-cardinality categoricals when doing query analysisCustom Document LoaderHow to use the MultiQueryRetrieverHow to add scores",
    "to use the MultiQueryRetrieverHow to add scores to retriever resultsCachingHow to use callbacks in async environmentsHow to attach callbacks to a runnableHow to propagate callbacks  constructorHow to dispatch custom callback eventsHow to pass callbacks in at runtimeHow to split by characterHow to cache chat model responsesHow to handle rate limitsHow to init any model in one lineHow to track token usage in ChatModelsHow to add tools to chatbotsHow to split codeHow to do retrieval with",
    "chatbotsHow to split codeHow to do retrieval with contextual compressionHow to convert Runnables to ToolsHow to create custom callback handlersHow to create a custom chat model classCustom EmbeddingsHow to create a custom LLM classCustom RetrieverHow to create toolsHow to debug your LLM appsHow to load CSVsHow to load documents from a directoryHow to load HTMLHow to load JSONHow to load MarkdownHow to load Microsoft Office filesHow to load PDFsHow to load web pagesHow to create a dynamic",
    "PDFsHow to load web pagesHow to create a dynamic (self-constructing) chainText embedding modelsHow to combine results from multiple retrieversHow to select examples from a LangSmith datasetHow to select examples by lengthHow to select examples by maximal marginal relevance (MMR)How to select examples by n-gram overlapHow to select examples by similarityHow to use reference examples when doing extractionHow to handle long text when doing extractionHow to use prompting alone (no tool calling) to",
    "to use prompting alone (no tool calling) to do extractionHow to add fallbacks to a runnableHow to filter messagesHybrid SearchHow to use the LangChain indexing APIHow to inspect runnablesLangChain Expression Language CheatsheetHow to cache LLM responsesHow to track token usage for LLMsRun models locallyHow to get log probabilitiesHow to reorder retrieved results to mitigate the \"lost in the middle\" effectHow to split Markdown by HeadersHow to merge consecutive messages of the same typeHow to",
    "merge consecutive messages of the same typeHow to add message historyHow to migrate from legacy LangChain agents to LangGraphHow to retrieve using multiple vectors per documentHow to pass multimodal data to modelsHow to use multimodal promptsHow to create a custom Output ParserHow to use the output-fixing parserHow to parse JSON outputHow to retry when a parsing error occursHow to parse text from message objectsHow to parse XML outputHow to parse YAML outputHow to use the Parent Document",
    "parse YAML outputHow to use the Parent Document RetrieverHow to use LangChain with different Pydantic versionsHow to add chat historyHow to get a RAG application to add citationsHow to do per-user retrievalHow to get your RAG application to return sourcesHow to stream results from your RAG applicationHow to split JSON dataHow to recursively split text by charactersResponse metadataHow to pass runtime secrets to runnablesHow to do \"self-querying\" retrievalHow to split text based on semantic",
    "retrievalHow to split text based on semantic similarityHow to chain runnablesHow to save and load LangChain objectsHow to split text by tokensHow to split HTMLHow to do question answering over CSVsHow to deal with large databases when doing SQL question-answeringHow to better prompt when doing SQL question-answeringHow to do query validation as part of SQL question-answeringHow to stream runnablesHow to stream responses from an LLMHow to use a time-weighted vector store retrieverHow to return",
    "time-weighted vector store retrieverHow to return artifacts from a toolHow to use chat models to call toolsHow to disable parallel tool callingHow to force models to call a toolHow to access the RunnableConfig from a toolHow to pass tool outputs to chat modelsHow to pass run time values to toolsHow to stream events from a toolHow to stream tool callsHow to convert tools to OpenAI FunctionsHow to handle tool errorsHow to use few-shot prompting with tool callingHow to add a human-in-the-loop for",
    "tool callingHow to add a human-in-the-loop for toolsHow to bind model-specific toolsHow to trim messagesHow to create and query vector storesConceptual guideAgentsArchitectureAsync programming with LangChainCallbacksChat historyChat modelsDocument loadersEmbedding modelsEvaluationExample selectorsFew-shot promptingConceptual guideKey-value storesLangChain Expression Language (LCEL)MessagesMultimodalityOutput parsersPrompt TemplatesRetrieval augmented generation (RAG)RetrievalRetrieversRunnable",
    "generation (RAG)RetrievalRetrieversRunnable interfaceStreamingStructured outputsTestingString-in, string-out llmsText splittersTokensTool callingToolsTracingVector storesWhy LangChain?Ecosystem🦜🛠️ LangSmith🦜🕸️ LangGraphVersionsv0.3v0.2Pydantic compatibilityMigrating from v0.0 chainsHow to migrate from v0.0 chainsMigrating from ConstitutionalChainMigrating from ConversationalChainMigrating from ConversationalRetrievalChainMigrating from LLMChainMigrating from LLMMathChainMigrating from",
    "LLMChainMigrating from LLMMathChainMigrating from LLMRouterChainMigrating from MapReduceDocumentsChainMigrating from MapRerankDocumentsChainMigrating from MultiPromptChainMigrating from RefineDocumentsChainMigrating from RetrievalQAMigrating from StuffDocumentsChainUpgrading to LangGraph memoryHow to migrate to LangGraph memoryHow to use BaseChatMessageHistory with LangGraphMigrating off ConversationBufferMemory or ConversationStringBufferMemoryMigrating off ConversationBufferWindowMemory or",
    "off ConversationBufferWindowMemory or ConversationTokenBufferMemoryMigrating off ConversationSummaryMemory or ConversationSummaryBufferMemoryA Long-Term Memory AgentRelease policySecurity PolicyVersionsMigrating from v0.0 chainsOn this pageHow to migrate from v0.0 chains",
    "LangChain has evolved since its initial release, and many of the original \"Chain\" classes\nhave been deprecated in favor of the more flexible and powerful frameworks of LCEL and LangGraph.\nThis guide will help you migrate your existing v0.0 chains to the new abstractions.\nHow deprecated implementations workEven though many of these implementations are deprecated, they are still supported in the codebase.",
    "However, they are not recommended for new development, and we recommend re-implementing them using the following guides!To see the planned removal version for each deprecated implementation, check their API reference.\nPrerequisitesThese guides assume some familiarity with the following concepts:\nLangChain Expression Language\nLangGraph",
    "LangChain maintains a number of legacy abstractions. Many of these can be reimplemented via short combinations of LCEL and LangGraph primitives.\nLCEL​\nLCEL is designed to streamline the process of building useful apps with LLMs and combining related components. It does this by providing:",
    "A unified interface: Every LCEL object implements the Runnable interface, which defines a common set of invocation methods (invoke, batch, stream, ainvoke, ...). This makes it possible to also automatically and consistently support useful operations like streaming of intermediate steps and batching, since every chain composed of LCEL objects is itself an LCEL object.",
    "Composition primitives: LCEL provides a number of primitives that make it easy to compose chains, parallelize components, add fallbacks, dynamically configure chain internals, and more.",
    "LangGraph​\nLangGraph, built on top of LCEL, allows for performant orchestrations of application components while maintaining concise and readable code. It includes built-in persistence, support for cycles, and prioritizes controllability.\nIf LCEL grows unwieldy for larger or more complex chains, they may benefit from a LangGraph implementation.\nAdvantages​\nUsing these frameworks for existing v0.0 chains confers some advantages:",
    "The resulting chains typically implement the full Runnable interface, including streaming and asynchronous support where appropriate;\nThe chains may be more easily extended or modified;\nThe parameters of the chain are typically surfaced for easier customization (e.g., prompts) over previous versions, which tended to be subclasses and had opaque parameters and internals.",
    "If using LangGraph, the chain supports built-in persistence, allowing for conversational experiences via a \"memory\" of the chat history.\nIf using LangGraph, the steps of the chain can be streamed, allowing for greater control and customizability.",
    "The below pages assist with migration from various specific chains to LCEL and LangGraph:\n\nLLMChain\nConversationChain\nRetrievalQA\nConversationalRetrievalChain\nStuffDocumentsChain\nMapReduceDocumentsChain\nMapRerankDocumentsChain\nRefineDocumentsChain\nLLMRouterChain\nMultiPromptChain\nLLMMathChain\nConstitutionalChain",
    "Check out the LCEL conceptual docs and LangGraph docs for more background information.Edit this pagePreviousPydantic compatibilityNextHow to migrate from v0.0 chainsLCELLangGraphAdvantagesCommunityLangChain ForumTwitterSlackGitHubOrganizationPythonJS/TSMoreHomepageBlogYouTubeCopyright © 2025 LangChain, Inc.",
    "Migrating from ConstitutionalChain | 🦜️🔗 LangChain",
    "Skip to main contentThese docs will be deprecated and no longer maintained with the release of LangChain v1.0 in October 2025. Visit the v1.0 alpha docsIntegrationsAPI ReferenceMoreContributingPeopleError referenceLangSmithLangGraphLangChain HubLangChain JS/TSv0.3v0.3v0.2v0.1💬SearchIntroductionTutorialsBuild a Question Answering application over a Graph DatabaseTutorialsBuild a simple LLM application with chat models and prompt templatesBuild a ChatbotBuild a Retrieval Augmented Generation",
    "a ChatbotBuild a Retrieval Augmented Generation (RAG) App: Part 2Build an Extraction ChainBuild an AgentTaggingBuild a Retrieval Augmented Generation (RAG) App: Part 1Build a semantic search engineBuild a Question/Answering system over SQL dataSummarize TextHow-to guidesHow-to guidesHow to use tools in a chainHow to use a vectorstore as a retrieverHow to add memory to chatbotsHow to use example selectorsHow to add a semantic layer over graph databaseHow to invoke runnables in parallelHow to",
    "databaseHow to invoke runnables in parallelHow to stream chat model responsesHow to add default invocation args to a RunnableHow to add retrieval to chatbotsHow to use few shot examples in chat modelsHow to do tool/function callingHow to install LangChain packagesHow to add examples to the prompt for query analysisHow to use few shot examplesHow to run custom functionsHow to use output parsers to parse an LLM response into structured formatHow to handle cases where no queries are generatedHow",
    "to handle cases where no queries are generatedHow to route between sub-chainsHow to return structured data from a modelHow to summarize text through parallelizationHow to summarize text through iterative refinementHow to summarize text in a single LLM callHow to use toolkitsHow to add ad-hoc tool calling capability to LLMs and Chat ModelsBuild an Agent with AgentExecutor (Legacy)How to construct knowledge graphsHow to partially format prompt templatesHow to handle multiple queries when doing",
    "to handle multiple queries when doing query analysisHow to use built-in tools and toolkitsHow to pass through arguments from one step to the nextHow to compose prompts togetherHow to handle multiple retrievers when doing query analysisHow to add values to a chain's stateHow to construct filters for query analysisHow to configure runtime chain internalsHow to deal with high-cardinality categoricals when doing query analysisCustom Document LoaderHow to use the MultiQueryRetrieverHow to add scores",
    "to use the MultiQueryRetrieverHow to add scores to retriever resultsCachingHow to use callbacks in async environmentsHow to attach callbacks to a runnableHow to propagate callbacks  constructorHow to dispatch custom callback eventsHow to pass callbacks in at runtimeHow to split by characterHow to cache chat model responsesHow to handle rate limitsHow to init any model in one lineHow to track token usage in ChatModelsHow to add tools to chatbotsHow to split codeHow to do retrieval with",
    "chatbotsHow to split codeHow to do retrieval with contextual compressionHow to convert Runnables to ToolsHow to create custom callback handlersHow to create a custom chat model classCustom EmbeddingsHow to create a custom LLM classCustom RetrieverHow to create toolsHow to debug your LLM appsHow to load CSVsHow to load documents from a directoryHow to load HTMLHow to load JSONHow to load MarkdownHow to load Microsoft Office filesHow to load PDFsHow to load web pagesHow to create a dynamic",
    "PDFsHow to load web pagesHow to create a dynamic (self-constructing) chainText embedding modelsHow to combine results from multiple retrieversHow to select examples from a LangSmith datasetHow to select examples by lengthHow to select examples by maximal marginal relevance (MMR)How to select examples by n-gram overlapHow to select examples by similarityHow to use reference examples when doing extractionHow to handle long text when doing extractionHow to use prompting alone (no tool calling) to",
    "to use prompting alone (no tool calling) to do extractionHow to add fallbacks to a runnableHow to filter messagesHybrid SearchHow to use the LangChain indexing APIHow to inspect runnablesLangChain Expression Language CheatsheetHow to cache LLM responsesHow to track token usage for LLMsRun models locallyHow to get log probabilitiesHow to reorder retrieved results to mitigate the \"lost in the middle\" effectHow to split Markdown by HeadersHow to merge consecutive messages of the same typeHow to",
    "merge consecutive messages of the same typeHow to add message historyHow to migrate from legacy LangChain agents to LangGraphHow to retrieve using multiple vectors per documentHow to pass multimodal data to modelsHow to use multimodal promptsHow to create a custom Output ParserHow to use the output-fixing parserHow to parse JSON outputHow to retry when a parsing error occursHow to parse text from message objectsHow to parse XML outputHow to parse YAML outputHow to use the Parent Document",
    "parse YAML outputHow to use the Parent Document RetrieverHow to use LangChain with different Pydantic versionsHow to add chat historyHow to get a RAG application to add citationsHow to do per-user retrievalHow to get your RAG application to return sourcesHow to stream results from your RAG applicationHow to split JSON dataHow to recursively split text by charactersResponse metadataHow to pass runtime secrets to runnablesHow to do \"self-querying\" retrievalHow to split text based on semantic",
    "retrievalHow to split text based on semantic similarityHow to chain runnablesHow to save and load LangChain objectsHow to split text by tokensHow to split HTMLHow to do question answering over CSVsHow to deal with large databases when doing SQL question-answeringHow to better prompt when doing SQL question-answeringHow to do query validation as part of SQL question-answeringHow to stream runnablesHow to stream responses from an LLMHow to use a time-weighted vector store retrieverHow to return",
    "time-weighted vector store retrieverHow to return artifacts from a toolHow to use chat models to call toolsHow to disable parallel tool callingHow to force models to call a toolHow to access the RunnableConfig from a toolHow to pass tool outputs to chat modelsHow to pass run time values to toolsHow to stream events from a toolHow to stream tool callsHow to convert tools to OpenAI FunctionsHow to handle tool errorsHow to use few-shot prompting with tool callingHow to add a human-in-the-loop for",
    "tool callingHow to add a human-in-the-loop for toolsHow to bind model-specific toolsHow to trim messagesHow to create and query vector storesConceptual guideAgentsArchitectureAsync programming with LangChainCallbacksChat historyChat modelsDocument loadersEmbedding modelsEvaluationExample selectorsFew-shot promptingConceptual guideKey-value storesLangChain Expression Language (LCEL)MessagesMultimodalityOutput parsersPrompt TemplatesRetrieval augmented generation (RAG)RetrievalRetrieversRunnable",
    "generation (RAG)RetrievalRetrieversRunnable interfaceStreamingStructured outputsTestingString-in, string-out llmsText splittersTokensTool callingToolsTracingVector storesWhy LangChain?Ecosystem🦜🛠️ LangSmith🦜🕸️ LangGraphVersionsv0.3v0.2Pydantic compatibilityMigrating from v0.0 chainsHow to migrate from v0.0 chainsMigrating from ConstitutionalChainMigrating from ConversationalChainMigrating from ConversationalRetrievalChainMigrating from LLMChainMigrating from LLMMathChainMigrating from",
    "LLMChainMigrating from LLMMathChainMigrating from LLMRouterChainMigrating from MapReduceDocumentsChainMigrating from MapRerankDocumentsChainMigrating from MultiPromptChainMigrating from RefineDocumentsChainMigrating from RetrievalQAMigrating from StuffDocumentsChainUpgrading to LangGraph memoryHow to migrate to LangGraph memoryHow to use BaseChatMessageHistory with LangGraphMigrating off ConversationBufferMemory or ConversationStringBufferMemoryMigrating off ConversationBufferWindowMemory or",
    "off ConversationBufferWindowMemory or ConversationTokenBufferMemoryMigrating off ConversationSummaryMemory or ConversationSummaryBufferMemoryA Long-Term Memory AgentRelease policySecurity PolicyVersionsMigrating from v0.0 chainsMigrating from ConstitutionalChainOn this pageMigrating from ConstitutionalChain",
    "ConstitutionalChain allowed for a LLM to critique and revise generations based on principles, structured as combinations of critique and revision requests. For example, a principle might include a request to identify harmful content, and a request to rewrite the content.\nConstitutional AI principles are based on the Constitutional AI: Harmlessness from AI Feedback paper.",
    "In ConstitutionalChain, this structure of critique requests and associated revisions was formatted into a LLM prompt and parsed out of string responses. This is more naturally achieved via structured output features of chat models. We can construct a simple chain in LangGraph for this purpose. Some advantages of this approach include:",
    "Leverage tool-calling capabilities of chat models that have been fine-tuned for this purpose;\nReduce parsing errors from extracting expression from a string LLM response;\nDelegation of instructions to message roles (e.g., chat models can understand what a ToolMessage represents without the need for additional prompting);\nSupport for streaming, both of individual tokens and chain steps.",
    "%pip install --upgrade --quiet langchain-openai\nimport osfrom getpass import getpassif \"OPENAI_API_KEY\" not in os.environ:    os.environ[\"OPENAI_API_KEY\"] = getpass()\nLegacy​",
    "Detailsfrom langchain.chains import ConstitutionalChain, LLMChainfrom langchain.chains.constitutional_ai.models import ConstitutionalPrinciplefrom langchain_core.prompts import PromptTemplatefrom langchain_openai import OpenAIllm = OpenAI()qa_prompt = PromptTemplate(    template=\"Q: {question} A:\",    input_variables=[\"question\"],)qa_chain = LLMChain(llm=llm, prompt=qa_prompt)constitutional_chain = ConstitutionalChain.from_llm(    llm=llm,    chain=qa_chain,    constitutional_principles=[",
    "constitutional_principles=[        ConstitutionalPrinciple(            critique_request=\"Tell if this answer is good.\",            revision_request=\"Give a better answer.\",        )    ],    return_intermediate_steps=True,)result = constitutional_chain.invoke(\"What is the meaning of life?\")API Reference:PromptTemplateresult{'question': 'What is the meaning of life?', 'output': 'The meaning of life is a deeply personal and ever-evolving concept. It is a journey of self-discovery and growth,",
    "It is a journey of self-discovery and growth, and can be different for each individual. Some may find meaning in relationships, others in achieving their goals, and some may never find a concrete answer. Ultimately, the meaning of life is what we make of it.', 'initial_output': ' The meaning of life is a subjective concept that can vary from person to person. Some may believe that the purpose of life is to find happiness and fulfillment, while others may see it as a journey of self-discovery",
    "others may see it as a journey of self-discovery and personal growth. Ultimately, the meaning of life is something that each individual must determine for themselves.', 'critiques_and_revisions': [('This answer is good in that it recognizes and acknowledges the subjective nature of the question and provides a valid and thoughtful response. However, it could have also mentioned that the meaning of life is a complex and deeply personal concept that can also change and evolve over time for each",
    "can also change and evolve over time for each individual. Critique Needed.',   'The meaning of life is a deeply personal and ever-evolving concept. It is a journey of self-discovery and growth, and can be different for each individual. Some may find meaning in relationships, others in achieving their goals, and some may never find a concrete answer. Ultimately, the meaning of life is what we make of it.')]}Above, we've returned intermediate steps showing:",
    "The original question;\nThe initial output;\nCritiques and revisions;\nThe final output (matching a revision).",
    "LangGraph​",
    "DetailsBelow, we use the .with_structured_output method to simultaneously generate (1) a judgment of whether a critique is needed, and (2) the critique. We surface all prompts involved for clarity and ease of customizability.Note that we are also able to stream intermediate steps with this implementation, so we can monitor and if needed intervene during its execution.from typing import List, Optional, Tuplefrom langchain.chains.constitutional_ai.models import ConstitutionalPrinciplefrom",
    "import ConstitutionalPrinciplefrom langchain.chains.constitutional_ai.prompts import (    CRITIQUE_PROMPT,    REVISION_PROMPT,)from langchain_core.output_parsers import StrOutputParserfrom langchain_core.prompts import ChatPromptTemplatefrom langchain_openai import ChatOpenAIfrom langgraph.graph import END, START, StateGraphfrom typing_extensions import Annotated, TypedDictllm = ChatOpenAI(model=\"gpt-4o-mini\")class Critique(TypedDict):    \"\"\"Generate a critique, if needed.\"\"\"",
    "\"\"\"Generate a critique, if needed.\"\"\"    critique_needed: Annotated[bool, ..., \"Whether or not a critique is needed.\"]    critique: Annotated[str, ..., \"If needed, the critique.\"]critique_prompt = ChatPromptTemplate.from_template(    \"Critique this response according to the critique request. \"    \"If no critique is needed, specify that.\\n\\n\"    \"Query: {query}\\n\\n\"    \"Response: {response}\\n\\n\"    \"Critique request: {critique_request}\")revision_prompt = ChatPromptTemplate.from_template(",
    "= ChatPromptTemplate.from_template(    \"Revise this response according to the critique and reivsion request.\\n\\n\"    \"Query: {query}\\n\\n\"    \"Response: {response}\\n\\n\"    \"Critique request: {critique_request}\\n\\n\"    \"Critique: {critique}\\n\\n\"    \"If the critique does not identify anything worth changing, ignore the \"    \"revision request and return 'No revisions needed'. If the critique \"    \"does identify something worth changing, revise the response based on \"    \"the revision request.\\n\\n\"",
    "based on \"    \"the revision request.\\n\\n\"    \"Revision Request: {revision_request}\")chain = llm | StrOutputParser()critique_chain = critique_prompt | llm.with_structured_output(Critique)revision_chain = revision_prompt | llm | StrOutputParser()class State(TypedDict):    query: str    constitutional_principles: List[ConstitutionalPrinciple]    initial_response: str    critiques_and_revisions: List[Tuple[str, str]]    response: strasync def generate_response(state: State):    \"\"\"Generate initial",
    "State):    \"\"\"Generate initial response.\"\"\"    response = await chain.ainvoke(state[\"query\"])    return {\"response\": response, \"initial_response\": response}async def critique_and_revise(state: State):    \"\"\"Critique and revise response according to principles.\"\"\"    critiques_and_revisions = []    response = state[\"initial_response\"]    for principle in state[\"constitutional_principles\"]:        critique = await critique_chain.ainvoke(            {                \"query\": state[\"query\"],",
    "{                \"query\": state[\"query\"],                \"response\": response,                \"critique_request\": principle.critique_request,            }        )        if critique[\"critique_needed\"]:            revision = await revision_chain.ainvoke(                {                    \"query\": state[\"query\"],                    \"response\": response,                    \"critique_request\": principle.critique_request,                    \"critique\": critique[\"critique\"],",
    "critique[\"critique\"],                    \"revision_request\": principle.revision_request,                }            )            response = revision            critiques_and_revisions.append((critique[\"critique\"], revision))        else:            critiques_and_revisions.append((critique[\"critique\"], \"\"))    return {        \"critiques_and_revisions\": critiques_and_revisions,        \"response\": response,    }graph = StateGraph(State)graph.add_node(\"generate_response\",",
    "generate_response)graph.add_node(\"critique_and_revise\", critique_and_revise)graph.add_edge(START, \"generate_response\")graph.add_edge(\"generate_response\", \"critique_and_revise\")graph.add_edge(\"critique_and_revise\", END)app = graph.compile()API Reference:StrOutputParser | ChatPromptTemplate | StateGraphconstitutional_principles = [    ConstitutionalPrinciple(        critique_request=\"Tell if this answer is good.\",        revision_request=\"Give a better answer.\",    )]query = \"What is the meaning",
    "answer.\",    )]query = \"What is the meaning of life? Answer in 10 words or fewer.\"async for step in app.astream(    {\"query\": query, \"constitutional_principles\": constitutional_principles},    stream_mode=\"values\",):    subset = [\"initial_response\", \"critiques_and_revisions\", \"response\"]    print({k: v for k, v in step.items() if k in subset}){}{'initial_response': 'Finding purpose, connection, and joy in our experiences and relationships.', 'response': 'Finding purpose, connection, and joy in",
    "'Finding purpose, connection, and joy in our experiences and relationships.'}{'initial_response': 'Finding purpose, connection, and joy in our experiences and relationships.', 'critiques_and_revisions': [(\"The response exceeds the 10-word limit, providing a more elaborate answer than requested. A concise response, such as 'To seek purpose and joy in life,' would better align with the query.\", 'To seek purpose and joy in life.')], 'response': 'To seek purpose and joy in life.'}",
    "Next steps​\nSee guides for generating structured output here.\nCheck out the LangGraph documentation for detail on building with LangGraph.Edit this pagePreviousHow to migrate from v0.0 chainsNextMigrating from ConversationalChainLegacyLangGraphNext stepsCommunityLangChain ForumTwitterSlackGitHubOrganizationPythonJS/TSMoreHomepageBlogYouTubeCopyright © 2025 LangChain, Inc.",
    "Migrating from RefineDocumentsChain | 🦜️🔗 LangChain",
    "Skip to main contentThese docs will be deprecated and no longer maintained with the release of LangChain v1.0 in October 2025. Visit the v1.0 alpha docsIntegrationsAPI ReferenceMoreContributingPeopleError referenceLangSmithLangGraphLangChain HubLangChain JS/TSv0.3v0.3v0.2v0.1💬SearchIntroductionTutorialsBuild a Question Answering application over a Graph DatabaseTutorialsBuild a simple LLM application with chat models and prompt templatesBuild a ChatbotBuild a Retrieval Augmented Generation",
    "a ChatbotBuild a Retrieval Augmented Generation (RAG) App: Part 2Build an Extraction ChainBuild an AgentTaggingBuild a Retrieval Augmented Generation (RAG) App: Part 1Build a semantic search engineBuild a Question/Answering system over SQL dataSummarize TextHow-to guidesHow-to guidesHow to use tools in a chainHow to use a vectorstore as a retrieverHow to add memory to chatbotsHow to use example selectorsHow to add a semantic layer over graph databaseHow to invoke runnables in parallelHow to",
    "databaseHow to invoke runnables in parallelHow to stream chat model responsesHow to add default invocation args to a RunnableHow to add retrieval to chatbotsHow to use few shot examples in chat modelsHow to do tool/function callingHow to install LangChain packagesHow to add examples to the prompt for query analysisHow to use few shot examplesHow to run custom functionsHow to use output parsers to parse an LLM response into structured formatHow to handle cases where no queries are generatedHow",
    "to handle cases where no queries are generatedHow to route between sub-chainsHow to return structured data from a modelHow to summarize text through parallelizationHow to summarize text through iterative refinementHow to summarize text in a single LLM callHow to use toolkitsHow to add ad-hoc tool calling capability to LLMs and Chat ModelsBuild an Agent with AgentExecutor (Legacy)How to construct knowledge graphsHow to partially format prompt templatesHow to handle multiple queries when doing",
    "to handle multiple queries when doing query analysisHow to use built-in tools and toolkitsHow to pass through arguments from one step to the nextHow to compose prompts togetherHow to handle multiple retrievers when doing query analysisHow to add values to a chain's stateHow to construct filters for query analysisHow to configure runtime chain internalsHow to deal with high-cardinality categoricals when doing query analysisCustom Document LoaderHow to use the MultiQueryRetrieverHow to add scores",
    "to use the MultiQueryRetrieverHow to add scores to retriever resultsCachingHow to use callbacks in async environmentsHow to attach callbacks to a runnableHow to propagate callbacks  constructorHow to dispatch custom callback eventsHow to pass callbacks in at runtimeHow to split by characterHow to cache chat model responsesHow to handle rate limitsHow to init any model in one lineHow to track token usage in ChatModelsHow to add tools to chatbotsHow to split codeHow to do retrieval with",
    "chatbotsHow to split codeHow to do retrieval with contextual compressionHow to convert Runnables to ToolsHow to create custom callback handlersHow to create a custom chat model classCustom EmbeddingsHow to create a custom LLM classCustom RetrieverHow to create toolsHow to debug your LLM appsHow to load CSVsHow to load documents from a directoryHow to load HTMLHow to load JSONHow to load MarkdownHow to load Microsoft Office filesHow to load PDFsHow to load web pagesHow to create a dynamic",
    "PDFsHow to load web pagesHow to create a dynamic (self-constructing) chainText embedding modelsHow to combine results from multiple retrieversHow to select examples from a LangSmith datasetHow to select examples by lengthHow to select examples by maximal marginal relevance (MMR)How to select examples by n-gram overlapHow to select examples by similarityHow to use reference examples when doing extractionHow to handle long text when doing extractionHow to use prompting alone (no tool calling) to",
    "to use prompting alone (no tool calling) to do extractionHow to add fallbacks to a runnableHow to filter messagesHybrid SearchHow to use the LangChain indexing APIHow to inspect runnablesLangChain Expression Language CheatsheetHow to cache LLM responsesHow to track token usage for LLMsRun models locallyHow to get log probabilitiesHow to reorder retrieved results to mitigate the \"lost in the middle\" effectHow to split Markdown by HeadersHow to merge consecutive messages of the same typeHow to",
    "merge consecutive messages of the same typeHow to add message historyHow to migrate from legacy LangChain agents to LangGraphHow to retrieve using multiple vectors per documentHow to pass multimodal data to modelsHow to use multimodal promptsHow to create a custom Output ParserHow to use the output-fixing parserHow to parse JSON outputHow to retry when a parsing error occursHow to parse text from message objectsHow to parse XML outputHow to parse YAML outputHow to use the Parent Document",
    "parse YAML outputHow to use the Parent Document RetrieverHow to use LangChain with different Pydantic versionsHow to add chat historyHow to get a RAG application to add citationsHow to do per-user retrievalHow to get your RAG application to return sourcesHow to stream results from your RAG applicationHow to split JSON dataHow to recursively split text by charactersResponse metadataHow to pass runtime secrets to runnablesHow to do \"self-querying\" retrievalHow to split text based on semantic",
    "retrievalHow to split text based on semantic similarityHow to chain runnablesHow to save and load LangChain objectsHow to split text by tokensHow to split HTMLHow to do question answering over CSVsHow to deal with large databases when doing SQL question-answeringHow to better prompt when doing SQL question-answeringHow to do query validation as part of SQL question-answeringHow to stream runnablesHow to stream responses from an LLMHow to use a time-weighted vector store retrieverHow to return",
    "time-weighted vector store retrieverHow to return artifacts from a toolHow to use chat models to call toolsHow to disable parallel tool callingHow to force models to call a toolHow to access the RunnableConfig from a toolHow to pass tool outputs to chat modelsHow to pass run time values to toolsHow to stream events from a toolHow to stream tool callsHow to convert tools to OpenAI FunctionsHow to handle tool errorsHow to use few-shot prompting with tool callingHow to add a human-in-the-loop for",
    "tool callingHow to add a human-in-the-loop for toolsHow to bind model-specific toolsHow to trim messagesHow to create and query vector storesConceptual guideAgentsArchitectureAsync programming with LangChainCallbacksChat historyChat modelsDocument loadersEmbedding modelsEvaluationExample selectorsFew-shot promptingConceptual guideKey-value storesLangChain Expression Language (LCEL)MessagesMultimodalityOutput parsersPrompt TemplatesRetrieval augmented generation (RAG)RetrievalRetrieversRunnable",
    "generation (RAG)RetrievalRetrieversRunnable interfaceStreamingStructured outputsTestingString-in, string-out llmsText splittersTokensTool callingToolsTracingVector storesWhy LangChain?Ecosystem🦜🛠️ LangSmith🦜🕸️ LangGraphVersionsv0.3v0.2Pydantic compatibilityMigrating from v0.0 chainsHow to migrate from v0.0 chainsMigrating from ConstitutionalChainMigrating from ConversationalChainMigrating from ConversationalRetrievalChainMigrating from LLMChainMigrating from LLMMathChainMigrating from",
    "LLMChainMigrating from LLMMathChainMigrating from LLMRouterChainMigrating from MapReduceDocumentsChainMigrating from MapRerankDocumentsChainMigrating from MultiPromptChainMigrating from RefineDocumentsChainMigrating from RetrievalQAMigrating from StuffDocumentsChainUpgrading to LangGraph memoryHow to migrate to LangGraph memoryHow to use BaseChatMessageHistory with LangGraphMigrating off ConversationBufferMemory or ConversationStringBufferMemoryMigrating off ConversationBufferWindowMemory or",
    "off ConversationBufferWindowMemory or ConversationTokenBufferMemoryMigrating off ConversationSummaryMemory or ConversationSummaryBufferMemoryA Long-Term Memory AgentRelease policySecurity PolicyVersionsMigrating from v0.0 chainsMigrating from RefineDocumentsChainOn this pageMigrating from RefineDocumentsChain",
    "RefineDocumentsChain implements a strategy for analyzing long texts. The strategy is as follows:",
    "Split a text into smaller documents;\nApply a process to the first document;\nRefine or update the result based on the next document;\nRepeat through the sequence of documents until finished.",
    "A common process applied in this context is summarization, in which a running summary is modified as we proceed through chunks of a long text. This is particularly useful for texts that are large compared to the context window of a given LLM.\nA LangGraph implementation confers a number of advantages for this problem:",
    "Where RefineDocumentsChain refines the summary via a for loop inside the class, a LangGraph implementation lets you step through the execution to monitor or otherwise steer it if needed.\nThe LangGraph implementation supports streaming of both execution steps and individual tokens.\nBecause it is assembled from modular components, it is also simple to extend or modify (e.g., to incorporate tool calling or other behavior).",
    "Below we will go through both RefineDocumentsChain and a corresponding LangGraph implementation on a simple example for illustrative purposes.\nLet's first load a chat model:",
    "Select chat model:Google Gemini▾OpenAIAnthropicAzureGoogle GeminiGoogle VertexAWSGroqCohereNVIDIAFireworks AIMistral AITogether AIIBM watsonxDatabricksxAIPerplexityDeepSeekChatOCIGenAIpip install -qU \"langchain[google-genai]\"import getpassimport osif not os.environ.get(\"GOOGLE_API_KEY\"):  os.environ[\"GOOGLE_API_KEY\"] = getpass.getpass(\"Enter API key for Google Gemini: \")from langchain.chat_models import init_chat_modelllm = init_chat_model(\"gemini-2.5-flash\", model_provider=\"google_genai\")",
    "Example​\nLet's go through an example where we summarize a sequence of documents. We first generate some simple documents for illustrative purposes:\nfrom langchain_core.documents import Documentdocuments = [    Document(page_content=\"Apples are red\", metadata={\"title\": \"apple_book\"}),    Document(page_content=\"Blueberries are blue\", metadata={\"title\": \"blueberry_book\"}),    Document(page_content=\"Bananas are yelow\", metadata={\"title\": \"banana_book\"}),]API Reference:Document\nLegacy​",
    "DetailsBelow we show an implementation with RefineDocumentsChain. We define the prompt templates for the initial summarization and successive refinements, instantiate separate LLMChain objects for these two purposes, and instantiate RefineDocumentsChain with these components.from langchain.chains import LLMChain, RefineDocumentsChainfrom langchain_core.prompts import ChatPromptTemplate, PromptTemplatefrom langchain_openai import ChatOpenAI# This controls how each document will be formatted.",
    "controls how each document will be formatted. Specifically,# it will be passed to `format_document` - see that function for more# details.document_prompt = PromptTemplate(    input_variables=[\"page_content\"], template=\"{page_content}\")document_variable_name = \"context\"# The prompt here should take as an input variable the# `document_variable_name`summarize_prompt = ChatPromptTemplate(    [        (\"human\", \"Write a concise summary of the following: {context}\"),    ])initial_llm_chain =",
    "following: {context}\"),    ])initial_llm_chain = LLMChain(llm=llm, prompt=summarize_prompt)initial_response_name = \"existing_answer\"# The prompt here should take as an input variable the# `document_variable_name` as well as `initial_response_name`refine_template = \"\"\"Produce a final summary.Existing summary up to this point:{existing_answer}New context:------------{context}------------Given the new context, refine the original summary.\"\"\"refine_prompt = ChatPromptTemplate([(\"human\",",
    "= ChatPromptTemplate([(\"human\", refine_template)])refine_llm_chain = LLMChain(llm=llm, prompt=refine_prompt)chain = RefineDocumentsChain(    initial_llm_chain=initial_llm_chain,    refine_llm_chain=refine_llm_chain,    document_prompt=document_prompt,    document_variable_name=document_variable_name,    initial_response_name=initial_response_name,)API Reference:ChatPromptTemplate | PromptTemplateWe can now invoke our chain:result = chain.invoke(documents)result[\"output_text\"]'Apples are",
    "are typically red in color, blueberries are blue, and bananas are yellow.'The LangSmith trace is composed of three LLM calls: one for the initial summary, and two more updates of that summary. The process completes when we update the summary with content from the final document.",
    "LangGraph​\nDetailsBelow we show a LangGraph implementation of this process:\nWe use the same two templates as before.\nWe generate a simple chain for the initial summary that plucks out the first document, formats it into a prompt and runs inference with our LLM.\nWe generate a second refine_summary_chain that operates on each successive document, refining the initial summary.",
    "We will need to install langgraph:pip install -qU langgraphimport operatorfrom typing import List, Literal, TypedDictfrom langchain_core.output_parsers import StrOutputParserfrom langchain_core.prompts import ChatPromptTemplatefrom langchain_core.runnables import RunnableConfigfrom langchain_openai import ChatOpenAIfrom langgraph.constants import Sendfrom langgraph.graph import END, START, StateGraphllm = ChatOpenAI(model=\"gpt-4o-mini\", temperature=0)# Initial summarysummarize_prompt =",
    "temperature=0)# Initial summarysummarize_prompt = ChatPromptTemplate(    [        (\"human\", \"Write a concise summary of the following: {context}\"),    ])initial_summary_chain = summarize_prompt | llm | StrOutputParser()# Refining the summary with new docsrefine_template = \"\"\"Produce a final summary.Existing summary up to this point:{existing_answer}New context:------------{context}------------Given the new context, refine the original summary.\"\"\"refine_prompt = ChatPromptTemplate([(\"human\",",
    "= ChatPromptTemplate([(\"human\", refine_template)])refine_summary_chain = refine_prompt | llm | StrOutputParser()# For LangGraph, we will define the state of the graph to hold the query,# destination, and final answer.class State(TypedDict):    contents: List[str]    index: int    summary: str# We define functions for each node, including a node that generates# the initial summary:async def generate_initial_summary(state: State, config: RunnableConfig):    summary = await",
    "config: RunnableConfig):    summary = await initial_summary_chain.ainvoke(        state[\"contents\"][0],        config,    )    return {\"summary\": summary, \"index\": 1}# And a node that refines the summary based on the next documentasync def refine_summary(state: State, config: RunnableConfig):    content = state[\"contents\"][state[\"index\"]]    summary = await refine_summary_chain.ainvoke(        {\"existing_answer\": state[\"summary\"], \"context\": content},        config,    )    return {\"summary\":",
    "config,    )    return {\"summary\": summary, \"index\": state[\"index\"] + 1}# Here we implement logic to either exit the application or refine# the summary.def should_refine(state: State) -> Literal[\"refine_summary\", END]:    if state[\"index\"] >= len(state[\"contents\"]):        return END    else:        return \"refine_summary\"graph = StateGraph(State)graph.add_node(\"generate_initial_summary\", generate_initial_summary)graph.add_node(\"refine_summary\", refine_summary)graph.add_edge(START,",
    "refine_summary)graph.add_edge(START, \"generate_initial_summary\")graph.add_conditional_edges(\"generate_initial_summary\", should_refine)graph.add_conditional_edges(\"refine_summary\", should_refine)app = graph.compile()API Reference:StrOutputParser | ChatPromptTemplate | RunnableConfig | Send | StateGraphfrom IPython.display import ImageImage(app.get_graph().draw_mermaid_png())We can step through the execution as follows, printing out the summary as it is refined:async for step in app.astream(",
    "it is refined:async for step in app.astream(    {\"contents\": [doc.page_content for doc in documents]},    stream_mode=\"values\",):    if summary := step.get(\"summary\"):        print(summary)Apples are typically red in color.Apples are typically red in color, while blueberries are blue.Apples are typically red in color, blueberries are blue, and bananas are yellow.In the LangSmith trace we again recover three LLM calls, performing the same functions as before.Note that we can stream tokens from",
    "as before.Note that we can stream tokens from the application, including from intermediate steps:async for event in app.astream_events(    {\"contents\": [doc.page_content for doc in documents]}, version=\"v2\"):    kind = event[\"event\"]    if kind == \"on_chat_model_stream\":        content = event[\"data\"][\"chunk\"].content        if content:            print(content, end=\"|\")    elif kind == \"on_chat_model_end\":        print(\"\\n\\n\")Ap|ples| are| characterized| by| their| red| color|.|Ap|ples| are|",
    "by| their| red| color|.|Ap|ples| are| characterized| by| their| red| color|,| while| blueberries| are| known| for| their| blue| hue|.|Ap|ples| are| characterized| by| their| red| color|,| blueberries| are| known| for| their| blue| hue|,| and| bananas| are| recognized| for| their| yellow| color|.|",
    "Next steps​\nSee this tutorial for more LLM-based summarization strategies.\nCheck out the LangGraph documentation for detail on building with LangGraph.Edit this pagePreviousMigrating from MultiPromptChainNextMigrating from RetrievalQAExampleLegacyLangGraphNext stepsCommunityLangChain ForumTwitterSlackGitHubOrganizationPythonJS/TSMoreHomepageBlogYouTubeCopyright © 2025 LangChain, Inc.",
    "Migrating from RetrievalQA | 🦜️🔗 LangChain",
    "Skip to main contentThese docs will be deprecated and no longer maintained with the release of LangChain v1.0 in October 2025. Visit the v1.0 alpha docsIntegrationsAPI ReferenceMoreContributingPeopleError referenceLangSmithLangGraphLangChain HubLangChain JS/TSv0.3v0.3v0.2v0.1💬SearchIntroductionTutorialsBuild a Question Answering application over a Graph DatabaseTutorialsBuild a simple LLM application with chat models and prompt templatesBuild a ChatbotBuild a Retrieval Augmented Generation",
    "a ChatbotBuild a Retrieval Augmented Generation (RAG) App: Part 2Build an Extraction ChainBuild an AgentTaggingBuild a Retrieval Augmented Generation (RAG) App: Part 1Build a semantic search engineBuild a Question/Answering system over SQL dataSummarize TextHow-to guidesHow-to guidesHow to use tools in a chainHow to use a vectorstore as a retrieverHow to add memory to chatbotsHow to use example selectorsHow to add a semantic layer over graph databaseHow to invoke runnables in parallelHow to",
    "databaseHow to invoke runnables in parallelHow to stream chat model responsesHow to add default invocation args to a RunnableHow to add retrieval to chatbotsHow to use few shot examples in chat modelsHow to do tool/function callingHow to install LangChain packagesHow to add examples to the prompt for query analysisHow to use few shot examplesHow to run custom functionsHow to use output parsers to parse an LLM response into structured formatHow to handle cases where no queries are generatedHow",
    "to handle cases where no queries are generatedHow to route between sub-chainsHow to return structured data from a modelHow to summarize text through parallelizationHow to summarize text through iterative refinementHow to summarize text in a single LLM callHow to use toolkitsHow to add ad-hoc tool calling capability to LLMs and Chat ModelsBuild an Agent with AgentExecutor (Legacy)How to construct knowledge graphsHow to partially format prompt templatesHow to handle multiple queries when doing",
    "to handle multiple queries when doing query analysisHow to use built-in tools and toolkitsHow to pass through arguments from one step to the nextHow to compose prompts togetherHow to handle multiple retrievers when doing query analysisHow to add values to a chain's stateHow to construct filters for query analysisHow to configure runtime chain internalsHow to deal with high-cardinality categoricals when doing query analysisCustom Document LoaderHow to use the MultiQueryRetrieverHow to add scores",
    "to use the MultiQueryRetrieverHow to add scores to retriever resultsCachingHow to use callbacks in async environmentsHow to attach callbacks to a runnableHow to propagate callbacks  constructorHow to dispatch custom callback eventsHow to pass callbacks in at runtimeHow to split by characterHow to cache chat model responsesHow to handle rate limitsHow to init any model in one lineHow to track token usage in ChatModelsHow to add tools to chatbotsHow to split codeHow to do retrieval with",
    "chatbotsHow to split codeHow to do retrieval with contextual compressionHow to convert Runnables to ToolsHow to create custom callback handlersHow to create a custom chat model classCustom EmbeddingsHow to create a custom LLM classCustom RetrieverHow to create toolsHow to debug your LLM appsHow to load CSVsHow to load documents from a directoryHow to load HTMLHow to load JSONHow to load MarkdownHow to load Microsoft Office filesHow to load PDFsHow to load web pagesHow to create a dynamic",
    "PDFsHow to load web pagesHow to create a dynamic (self-constructing) chainText embedding modelsHow to combine results from multiple retrieversHow to select examples from a LangSmith datasetHow to select examples by lengthHow to select examples by maximal marginal relevance (MMR)How to select examples by n-gram overlapHow to select examples by similarityHow to use reference examples when doing extractionHow to handle long text when doing extractionHow to use prompting alone (no tool calling) to",
    "to use prompting alone (no tool calling) to do extractionHow to add fallbacks to a runnableHow to filter messagesHybrid SearchHow to use the LangChain indexing APIHow to inspect runnablesLangChain Expression Language CheatsheetHow to cache LLM responsesHow to track token usage for LLMsRun models locallyHow to get log probabilitiesHow to reorder retrieved results to mitigate the \"lost in the middle\" effectHow to split Markdown by HeadersHow to merge consecutive messages of the same typeHow to",
    "merge consecutive messages of the same typeHow to add message historyHow to migrate from legacy LangChain agents to LangGraphHow to retrieve using multiple vectors per documentHow to pass multimodal data to modelsHow to use multimodal promptsHow to create a custom Output ParserHow to use the output-fixing parserHow to parse JSON outputHow to retry when a parsing error occursHow to parse text from message objectsHow to parse XML outputHow to parse YAML outputHow to use the Parent Document",
    "parse YAML outputHow to use the Parent Document RetrieverHow to use LangChain with different Pydantic versionsHow to add chat historyHow to get a RAG application to add citationsHow to do per-user retrievalHow to get your RAG application to return sourcesHow to stream results from your RAG applicationHow to split JSON dataHow to recursively split text by charactersResponse metadataHow to pass runtime secrets to runnablesHow to do \"self-querying\" retrievalHow to split text based on semantic",
    "retrievalHow to split text based on semantic similarityHow to chain runnablesHow to save and load LangChain objectsHow to split text by tokensHow to split HTMLHow to do question answering over CSVsHow to deal with large databases when doing SQL question-answeringHow to better prompt when doing SQL question-answeringHow to do query validation as part of SQL question-answeringHow to stream runnablesHow to stream responses from an LLMHow to use a time-weighted vector store retrieverHow to return",
    "time-weighted vector store retrieverHow to return artifacts from a toolHow to use chat models to call toolsHow to disable parallel tool callingHow to force models to call a toolHow to access the RunnableConfig from a toolHow to pass tool outputs to chat modelsHow to pass run time values to toolsHow to stream events from a toolHow to stream tool callsHow to convert tools to OpenAI FunctionsHow to handle tool errorsHow to use few-shot prompting with tool callingHow to add a human-in-the-loop for",
    "tool callingHow to add a human-in-the-loop for toolsHow to bind model-specific toolsHow to trim messagesHow to create and query vector storesConceptual guideAgentsArchitectureAsync programming with LangChainCallbacksChat historyChat modelsDocument loadersEmbedding modelsEvaluationExample selectorsFew-shot promptingConceptual guideKey-value storesLangChain Expression Language (LCEL)MessagesMultimodalityOutput parsersPrompt TemplatesRetrieval augmented generation (RAG)RetrievalRetrieversRunnable",
    "generation (RAG)RetrievalRetrieversRunnable interfaceStreamingStructured outputsTestingString-in, string-out llmsText splittersTokensTool callingToolsTracingVector storesWhy LangChain?Ecosystem🦜🛠️ LangSmith🦜🕸️ LangGraphVersionsv0.3v0.2Pydantic compatibilityMigrating from v0.0 chainsHow to migrate from v0.0 chainsMigrating from ConstitutionalChainMigrating from ConversationalChainMigrating from ConversationalRetrievalChainMigrating from LLMChainMigrating from LLMMathChainMigrating from",
    "LLMChainMigrating from LLMMathChainMigrating from LLMRouterChainMigrating from MapReduceDocumentsChainMigrating from MapRerankDocumentsChainMigrating from MultiPromptChainMigrating from RefineDocumentsChainMigrating from RetrievalQAMigrating from StuffDocumentsChainUpgrading to LangGraph memoryHow to migrate to LangGraph memoryHow to use BaseChatMessageHistory with LangGraphMigrating off ConversationBufferMemory or ConversationStringBufferMemoryMigrating off ConversationBufferWindowMemory or",
    "off ConversationBufferWindowMemory or ConversationTokenBufferMemoryMigrating off ConversationSummaryMemory or ConversationSummaryBufferMemoryA Long-Term Memory AgentRelease policySecurity PolicyVersionsMigrating from v0.0 chainsMigrating from RetrievalQAOn this pageMigrating from RetrievalQA",
    "The RetrievalQA chain performed natural-language question answering over a data source using retrieval-augmented generation.\nSome advantages of switching to the LCEL implementation are:",
    "Easier customizability. Details such as the prompt and how documents are formatted are only configurable via specific parameters in the RetrievalQA chain.\nMore easily return source documents.\nSupport for runnable methods like streaming and async operations.",
    "Now let's look at them side-by-side. We'll use the following ingestion code to load a blog post by Lilian Weng on autonomous agents into a local vector store:\nShared setup​\nFor both versions, we'll need to load the data with the WebBaseLoader document loader, split it with RecursiveCharacterTextSplitter, and add it to an in-memory FAISS vector store.\nWe will also instantiate a chat model to use.",
    "We will also instantiate a chat model to use.\n%pip install --upgrade --quiet langchain-community langchain langchain-openai faiss-cpu beautifulsoup4\nimport osfrom getpass import getpassif \"OPENAI_API_KEY\" not in os.environ:    os.environ[\"OPENAI_API_KEY\"] = getpass()",
    "# Load docsfrom langchain_community.document_loaders import WebBaseLoaderfrom langchain_community.vectorstores import FAISSfrom langchain_openai.chat_models import ChatOpenAIfrom langchain_openai.embeddings import OpenAIEmbeddingsfrom langchain_text_splitters import RecursiveCharacterTextSplitterloader = WebBaseLoader(\"https://lilianweng.github.io/posts/2023-06-23-agent/\")data = loader.load()# Splittext_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=0)all_splits =",
    "chunk_overlap=0)all_splits = text_splitter.split_documents(data)# Store splitsvectorstore = FAISS.from_documents(documents=all_splits, embedding=OpenAIEmbeddings())# LLMllm = ChatOpenAI()",
    "Legacy​",
    "Detailsfrom langchain import hubfrom langchain.chains import RetrievalQA# See full prompt at https://smith.langchain.com/hub/rlm/rag-promptprompt = hub.pull(\"rlm/rag-prompt\")qa_chain = RetrievalQA.from_llm(    llm, retriever=vectorstore.as_retriever(), prompt=prompt)qa_chain(\"What are autonomous agents?\"){'query': 'What are autonomous agents?', 'result': 'Autonomous agents are LLM-empowered agents capable of handling autonomous design, planning, and performance of complex scientific",
    "planning, and performance of complex scientific experiments. These agents can browse the Internet, read documentation, execute code, call robotics experimentation APIs, and leverage other LLMs. They can generate reasoning steps, such as developing a novel anticancer drug, based on requested tasks.'}",
    "LCEL​",
    "Detailsfrom langchain import hubfrom langchain_core.output_parsers import StrOutputParserfrom langchain_core.runnables import RunnablePassthrough# See full prompt at https://smith.langchain.com/hub/rlm/rag-promptprompt = hub.pull(\"rlm/rag-prompt\")def format_docs(docs):    return \"\\n\\n\".join(doc.page_content for doc in docs)qa_chain = (    {        \"context\": vectorstore.as_retriever() | format_docs,        \"question\": RunnablePassthrough(),    }    | prompt    | llm    |",
    "}    | prompt    | llm    | StrOutputParser())qa_chain.invoke(\"What are autonomous agents?\")API Reference:StrOutputParser | RunnablePassthrough'Autonomous agents are agents empowered by large language models (LLMs) that can handle autonomous design, planning, and performance of complex tasks such as scientific experiments. These agents can use tools to browse the Internet, read documentation, execute code, call robotics experimentation APIs, and leverage other LLMs for their tasks. The model",
    "leverage other LLMs for their tasks. The model can come up with reasoning steps when given a specific task, such as developing a novel anticancer drug.'The LCEL implementation exposes the internals of what's happening around retrieving, formatting documents, and passing them through a prompt to the LLM, but it is more verbose. You can customize and wrap this composition logic in a helper function, or use the higher-level create_retrieval_chain and create_stuff_documents_chain helper method:from",
    "create_stuff_documents_chain helper method:from langchain import hubfrom langchain.chains import create_retrieval_chainfrom langchain.chains.combine_documents import create_stuff_documents_chain# See full prompt at https://smith.langchain.com/hub/langchain-ai/retrieval-qa-chatretrieval_qa_chat_prompt = hub.pull(\"langchain-ai/retrieval-qa-chat\")combine_docs_chain = create_stuff_documents_chain(llm, retrieval_qa_chat_prompt)rag_chain = create_retrieval_chain(vectorstore.as_retriever(),",
    "combine_docs_chain)rag_chain.invoke({\"input\": \"What are autonomous agents?\"}){'input': 'What are autonomous agents?', 'context': [Document(metadata={'source': 'https://lilianweng.github.io/posts/2023-06-23-agent/', 'title': \"LLM Powered Autonomous Agents | Lil'Log\", 'description': 'Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of",
    "serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\\nAgent System Overview In a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:', 'language': 'en'}, page_content='Boiko et al. (2023) also looked into LLM-empowered agents for scientific discovery, to handle autonomous design, planning, and performance",
    "autonomous design, planning, and performance of complex scientific experiments. This agent can use tools to browse the Internet, read documentation, execute code, call robotics experimentation APIs and leverage other LLMs.\\nFor example, when requested to \"develop a novel anticancer drug\", the model came up with the following reasoning steps:'),  Document(metadata={'source': 'https://lilianweng.github.io/posts/2023-06-23-agent/', 'title': \"LLM Powered Autonomous Agents | Lil'Log\", 'description':",
    "Autonomous Agents | Lil'Log\", 'description': 'Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\\nAgent System Overview In a LLM-powered autonomous agent system, LLM functions as the agent’s brain,",
    "agent system, LLM functions as the agent’s brain, complemented by several key components:', 'language': 'en'}, page_content='Weng, Lilian. (Jun 2023). “LLM-powered Autonomous Agents”. Lil’Log. https://lilianweng.github.io/posts/2023-06-23-agent/.'),  Document(metadata={'source': 'https://lilianweng.github.io/posts/2023-06-23-agent/', 'title': \"LLM Powered Autonomous Agents | Lil'Log\", 'description': 'Building agents with LLM (large language model) as its core controller is a cool concept.",
    "model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\\nAgent System Overview In a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:', 'language': 'en'}, page_content='Fig. 1.",
    "'language': 'en'}, page_content='Fig. 1. Overview of a LLM-powered autonomous agent system.\\nComponent One: Planning#\\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.\\nTask Decomposition#'),  Document(metadata={'source': 'https://lilianweng.github.io/posts/2023-06-23-agent/', 'title': \"LLM Powered Autonomous Agents | Lil'Log\", 'description': 'Building agents with LLM (large language model) as its core controller is a cool concept. Several",
    "as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\\nAgent System Overview In a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:', 'language': 'en'},",
    "by several key components:', 'language': 'en'}, page_content='Or\\n@article{weng2023agent,\\n  title   = \"LLM-powered Autonomous Agents\",\\n  author  = \"Weng, Lilian\",\\n  journal = \"lilianweng.github.io\",\\n  year    = \"2023\",\\n  month   = \"Jun\",\\n  url     = \"https://lilianweng.github.io/posts/2023-06-23-agent/\"\\n}\\nReferences#\\n[1] Wei et al. “Chain of thought prompting elicits reasoning in large language models.” NeurIPS 2022\\n[2] Yao et al. “Tree of Thoughts: Dliberate Problem Solving with",
    "“Tree of Thoughts: Dliberate Problem Solving with Large Language Models.” arXiv preprint arXiv:2305.10601 (2023).')], 'answer': 'Autonomous agents are entities capable of operating independently to perform tasks or make decisions without direct human intervention. In the context provided, autonomous agents empowered by Large Language Models (LLMs) are used for scientific discovery, including tasks like autonomous design, planning, and executing complex scientific experiments.'}",
    "Next steps​\nCheck out the LCEL conceptual docs for more background information on the LangChain expression language.Edit this pagePreviousMigrating from RefineDocumentsChainNextMigrating from StuffDocumentsChainShared setupLegacyLCELNext stepsCommunityLangChain ForumTwitterSlackGitHubOrganizationPythonJS/TSMoreHomepageBlogYouTubeCopyright © 2025 LangChain, Inc.",
    "Migrating from StuffDocumentsChain | 🦜️🔗 LangChain",
    "Skip to main contentThese docs will be deprecated and no longer maintained with the release of LangChain v1.0 in October 2025. Visit the v1.0 alpha docsIntegrationsAPI ReferenceMoreContributingPeopleError referenceLangSmithLangGraphLangChain HubLangChain JS/TSv0.3v0.3v0.2v0.1💬SearchIntroductionTutorialsBuild a Question Answering application over a Graph DatabaseTutorialsBuild a simple LLM application with chat models and prompt templatesBuild a ChatbotBuild a Retrieval Augmented Generation",
    "a ChatbotBuild a Retrieval Augmented Generation (RAG) App: Part 2Build an Extraction ChainBuild an AgentTaggingBuild a Retrieval Augmented Generation (RAG) App: Part 1Build a semantic search engineBuild a Question/Answering system over SQL dataSummarize TextHow-to guidesHow-to guidesHow to use tools in a chainHow to use a vectorstore as a retrieverHow to add memory to chatbotsHow to use example selectorsHow to add a semantic layer over graph databaseHow to invoke runnables in parallelHow to",
    "databaseHow to invoke runnables in parallelHow to stream chat model responsesHow to add default invocation args to a RunnableHow to add retrieval to chatbotsHow to use few shot examples in chat modelsHow to do tool/function callingHow to install LangChain packagesHow to add examples to the prompt for query analysisHow to use few shot examplesHow to run custom functionsHow to use output parsers to parse an LLM response into structured formatHow to handle cases where no queries are generatedHow",
    "to handle cases where no queries are generatedHow to route between sub-chainsHow to return structured data from a modelHow to summarize text through parallelizationHow to summarize text through iterative refinementHow to summarize text in a single LLM callHow to use toolkitsHow to add ad-hoc tool calling capability to LLMs and Chat ModelsBuild an Agent with AgentExecutor (Legacy)How to construct knowledge graphsHow to partially format prompt templatesHow to handle multiple queries when doing",
    "to handle multiple queries when doing query analysisHow to use built-in tools and toolkitsHow to pass through arguments from one step to the nextHow to compose prompts togetherHow to handle multiple retrievers when doing query analysisHow to add values to a chain's stateHow to construct filters for query analysisHow to configure runtime chain internalsHow to deal with high-cardinality categoricals when doing query analysisCustom Document LoaderHow to use the MultiQueryRetrieverHow to add scores",
    "to use the MultiQueryRetrieverHow to add scores to retriever resultsCachingHow to use callbacks in async environmentsHow to attach callbacks to a runnableHow to propagate callbacks  constructorHow to dispatch custom callback eventsHow to pass callbacks in at runtimeHow to split by characterHow to cache chat model responsesHow to handle rate limitsHow to init any model in one lineHow to track token usage in ChatModelsHow to add tools to chatbotsHow to split codeHow to do retrieval with",
    "chatbotsHow to split codeHow to do retrieval with contextual compressionHow to convert Runnables to ToolsHow to create custom callback handlersHow to create a custom chat model classCustom EmbeddingsHow to create a custom LLM classCustom RetrieverHow to create toolsHow to debug your LLM appsHow to load CSVsHow to load documents from a directoryHow to load HTMLHow to load JSONHow to load MarkdownHow to load Microsoft Office filesHow to load PDFsHow to load web pagesHow to create a dynamic",
    "PDFsHow to load web pagesHow to create a dynamic (self-constructing) chainText embedding modelsHow to combine results from multiple retrieversHow to select examples from a LangSmith datasetHow to select examples by lengthHow to select examples by maximal marginal relevance (MMR)How to select examples by n-gram overlapHow to select examples by similarityHow to use reference examples when doing extractionHow to handle long text when doing extractionHow to use prompting alone (no tool calling) to",
    "to use prompting alone (no tool calling) to do extractionHow to add fallbacks to a runnableHow to filter messagesHybrid SearchHow to use the LangChain indexing APIHow to inspect runnablesLangChain Expression Language CheatsheetHow to cache LLM responsesHow to track token usage for LLMsRun models locallyHow to get log probabilitiesHow to reorder retrieved results to mitigate the \"lost in the middle\" effectHow to split Markdown by HeadersHow to merge consecutive messages of the same typeHow to",
    "merge consecutive messages of the same typeHow to add message historyHow to migrate from legacy LangChain agents to LangGraphHow to retrieve using multiple vectors per documentHow to pass multimodal data to modelsHow to use multimodal promptsHow to create a custom Output ParserHow to use the output-fixing parserHow to parse JSON outputHow to retry when a parsing error occursHow to parse text from message objectsHow to parse XML outputHow to parse YAML outputHow to use the Parent Document",
    "parse YAML outputHow to use the Parent Document RetrieverHow to use LangChain with different Pydantic versionsHow to add chat historyHow to get a RAG application to add citationsHow to do per-user retrievalHow to get your RAG application to return sourcesHow to stream results from your RAG applicationHow to split JSON dataHow to recursively split text by charactersResponse metadataHow to pass runtime secrets to runnablesHow to do \"self-querying\" retrievalHow to split text based on semantic",
    "retrievalHow to split text based on semantic similarityHow to chain runnablesHow to save and load LangChain objectsHow to split text by tokensHow to split HTMLHow to do question answering over CSVsHow to deal with large databases when doing SQL question-answeringHow to better prompt when doing SQL question-answeringHow to do query validation as part of SQL question-answeringHow to stream runnablesHow to stream responses from an LLMHow to use a time-weighted vector store retrieverHow to return",
    "time-weighted vector store retrieverHow to return artifacts from a toolHow to use chat models to call toolsHow to disable parallel tool callingHow to force models to call a toolHow to access the RunnableConfig from a toolHow to pass tool outputs to chat modelsHow to pass run time values to toolsHow to stream events from a toolHow to stream tool callsHow to convert tools to OpenAI FunctionsHow to handle tool errorsHow to use few-shot prompting with tool callingHow to add a human-in-the-loop for",
    "tool callingHow to add a human-in-the-loop for toolsHow to bind model-specific toolsHow to trim messagesHow to create and query vector storesConceptual guideAgentsArchitectureAsync programming with LangChainCallbacksChat historyChat modelsDocument loadersEmbedding modelsEvaluationExample selectorsFew-shot promptingConceptual guideKey-value storesLangChain Expression Language (LCEL)MessagesMultimodalityOutput parsersPrompt TemplatesRetrieval augmented generation (RAG)RetrievalRetrieversRunnable",
    "generation (RAG)RetrievalRetrieversRunnable interfaceStreamingStructured outputsTestingString-in, string-out llmsText splittersTokensTool callingToolsTracingVector storesWhy LangChain?Ecosystem🦜🛠️ LangSmith🦜🕸️ LangGraphVersionsv0.3v0.2Pydantic compatibilityMigrating from v0.0 chainsHow to migrate from v0.0 chainsMigrating from ConstitutionalChainMigrating from ConversationalChainMigrating from ConversationalRetrievalChainMigrating from LLMChainMigrating from LLMMathChainMigrating from",
    "LLMChainMigrating from LLMMathChainMigrating from LLMRouterChainMigrating from MapReduceDocumentsChainMigrating from MapRerankDocumentsChainMigrating from MultiPromptChainMigrating from RefineDocumentsChainMigrating from RetrievalQAMigrating from StuffDocumentsChainUpgrading to LangGraph memoryHow to migrate to LangGraph memoryHow to use BaseChatMessageHistory with LangGraphMigrating off ConversationBufferMemory or ConversationStringBufferMemoryMigrating off ConversationBufferWindowMemory or",
    "off ConversationBufferWindowMemory or ConversationTokenBufferMemoryMigrating off ConversationSummaryMemory or ConversationSummaryBufferMemoryA Long-Term Memory AgentRelease policySecurity PolicyVersionsMigrating from v0.0 chainsMigrating from StuffDocumentsChainOn this pageMigrating from StuffDocumentsChain",
    "StuffDocumentsChain combines documents by concatenating them into a single context window. It is a straightforward and effective strategy for combining documents for question-answering, summarization, and other purposes.",
    "create_stuff_documents_chain is the recommended alternative. It functions the same as StuffDocumentsChain, with better support for streaming and batch functionality. Because it is a simple combination of LCEL primitives, it is also easier to extend and incorporate into other LangChain applications.\nBelow we will go through both StuffDocumentsChain and create_stuff_documents_chain on a simple example for illustrative purposes.\nLet's first load a chat model:",
    "Select chat model:Google Gemini▾OpenAIAnthropicAzureGoogle GeminiGoogle VertexAWSGroqCohereNVIDIAFireworks AIMistral AITogether AIIBM watsonxDatabricksxAIPerplexityDeepSeekChatOCIGenAIpip install -qU \"langchain[google-genai]\"import getpassimport osif not os.environ.get(\"GOOGLE_API_KEY\"):  os.environ[\"GOOGLE_API_KEY\"] = getpass.getpass(\"Enter API key for Google Gemini: \")from langchain.chat_models import init_chat_modelllm = init_chat_model(\"gemini-2.5-flash\", model_provider=\"google_genai\")",
    "Example​\nLet's go through an example where we analyze a set of documents. We first generate some simple documents for illustrative purposes:\nfrom langchain_core.documents import Documentdocuments = [    Document(page_content=\"Apples are red\", metadata={\"title\": \"apple_book\"}),    Document(page_content=\"Blueberries are blue\", metadata={\"title\": \"blueberry_book\"}),    Document(page_content=\"Bananas are yelow\", metadata={\"title\": \"banana_book\"}),]API Reference:Document\nLegacy​",
    "DetailsBelow we show an implementation with StuffDocumentsChain. We define the prompt template for a summarization task and instantiate a LLMChain object for this purpose. We define how documents are formatted into the prompt and ensure consistency among the keys in the various prompts.from langchain.chains import LLMChain, StuffDocumentsChainfrom langchain_core.prompts import ChatPromptTemplate, PromptTemplate# This controls how each document will be formatted. Specifically,# it will be passed",
    "be formatted. Specifically,# it will be passed to `format_document` - see that function for more# details.document_prompt = PromptTemplate(    input_variables=[\"page_content\"], template=\"{page_content}\")document_variable_name = \"context\"# The prompt here should take as an input variable the# `document_variable_name`prompt = ChatPromptTemplate.from_template(\"Summarize this content: {context}\")llm_chain = LLMChain(llm=llm, prompt=prompt)chain = StuffDocumentsChain(    llm_chain=llm_chain,",
    "= StuffDocumentsChain(    llm_chain=llm_chain,    document_prompt=document_prompt,    document_variable_name=document_variable_name,)API Reference:ChatPromptTemplate | PromptTemplateWe can now invoke our chain:result = chain.invoke(documents)result[\"output_text\"]'This content describes the colors of different fruits: apples are red, blueberries are blue, and bananas are yellow.'for chunk in chain.stream(documents):    print(chunk){'input_documents': [Document(metadata={'title': 'apple_book'},",
    "[Document(metadata={'title': 'apple_book'}, page_content='Apples are red'), Document(metadata={'title': 'blueberry_book'}, page_content='Blueberries are blue'), Document(metadata={'title': 'banana_book'}, page_content='Bananas are yelow')], 'output_text': 'This content describes the colors of different fruits: apples are red, blueberries are blue, and bananas are yellow.'}",
    "LCEL​",
    "DetailsBelow we show an implementation using create_stuff_documents_chain:from langchain.chains.combine_documents import create_stuff_documents_chainfrom langchain_core.prompts import ChatPromptTemplateprompt = ChatPromptTemplate.from_template(\"Summarize this content: {context}\")chain = create_stuff_documents_chain(llm, prompt)API Reference:ChatPromptTemplateInvoking the chain, we obtain a similar result as before:result = chain.invoke({\"context\": documents})result'This content describes the",
    "documents})result'This content describes the colors of different fruits: apples are red, blueberries are blue, and bananas are yellow.'Note that this implementation supports streaming of output tokens:for chunk in chain.stream({\"context\": documents}):    print(chunk, end=\" | \") | This |  content |  describes |  the |  colors |  of |  different |  fruits | : |  apples |  are |  red | , |  blue | berries |  are |  blue | , |  and |  bananas |  are |  yellow | . |  |",
    "Next steps​\nCheck out the LCEL conceptual docs for more background information.\nSee these how-to guides for more on question-answering tasks with RAG.\nSee this tutorial for more LLM-based summarization strategies.Edit this pagePreviousMigrating from RetrievalQANextHow to migrate to LangGraph memoryExampleLegacyLCELNext stepsCommunityLangChain ForumTwitterSlackGitHubOrganizationPythonJS/TSMoreHomepageBlogYouTubeCopyright © 2025 LangChain, Inc.",
    "Migrating from ConversationalChain | 🦜️🔗 LangChain",
    "Skip to main contentThese docs will be deprecated and no longer maintained with the release of LangChain v1.0 in October 2025. Visit the v1.0 alpha docsIntegrationsAPI ReferenceMoreContributingPeopleError referenceLangSmithLangGraphLangChain HubLangChain JS/TSv0.3v0.3v0.2v0.1💬SearchIntroductionTutorialsBuild a Question Answering application over a Graph DatabaseTutorialsBuild a simple LLM application with chat models and prompt templatesBuild a ChatbotBuild a Retrieval Augmented Generation",
    "a ChatbotBuild a Retrieval Augmented Generation (RAG) App: Part 2Build an Extraction ChainBuild an AgentTaggingBuild a Retrieval Augmented Generation (RAG) App: Part 1Build a semantic search engineBuild a Question/Answering system over SQL dataSummarize TextHow-to guidesHow-to guidesHow to use tools in a chainHow to use a vectorstore as a retrieverHow to add memory to chatbotsHow to use example selectorsHow to add a semantic layer over graph databaseHow to invoke runnables in parallelHow to",
    "databaseHow to invoke runnables in parallelHow to stream chat model responsesHow to add default invocation args to a RunnableHow to add retrieval to chatbotsHow to use few shot examples in chat modelsHow to do tool/function callingHow to install LangChain packagesHow to add examples to the prompt for query analysisHow to use few shot examplesHow to run custom functionsHow to use output parsers to parse an LLM response into structured formatHow to handle cases where no queries are generatedHow",
    "to handle cases where no queries are generatedHow to route between sub-chainsHow to return structured data from a modelHow to summarize text through parallelizationHow to summarize text through iterative refinementHow to summarize text in a single LLM callHow to use toolkitsHow to add ad-hoc tool calling capability to LLMs and Chat ModelsBuild an Agent with AgentExecutor (Legacy)How to construct knowledge graphsHow to partially format prompt templatesHow to handle multiple queries when doing",
    "to handle multiple queries when doing query analysisHow to use built-in tools and toolkitsHow to pass through arguments from one step to the nextHow to compose prompts togetherHow to handle multiple retrievers when doing query analysisHow to add values to a chain's stateHow to construct filters for query analysisHow to configure runtime chain internalsHow to deal with high-cardinality categoricals when doing query analysisCustom Document LoaderHow to use the MultiQueryRetrieverHow to add scores",
    "to use the MultiQueryRetrieverHow to add scores to retriever resultsCachingHow to use callbacks in async environmentsHow to attach callbacks to a runnableHow to propagate callbacks  constructorHow to dispatch custom callback eventsHow to pass callbacks in at runtimeHow to split by characterHow to cache chat model responsesHow to handle rate limitsHow to init any model in one lineHow to track token usage in ChatModelsHow to add tools to chatbotsHow to split codeHow to do retrieval with",
    "chatbotsHow to split codeHow to do retrieval with contextual compressionHow to convert Runnables to ToolsHow to create custom callback handlersHow to create a custom chat model classCustom EmbeddingsHow to create a custom LLM classCustom RetrieverHow to create toolsHow to debug your LLM appsHow to load CSVsHow to load documents from a directoryHow to load HTMLHow to load JSONHow to load MarkdownHow to load Microsoft Office filesHow to load PDFsHow to load web pagesHow to create a dynamic",
    "PDFsHow to load web pagesHow to create a dynamic (self-constructing) chainText embedding modelsHow to combine results from multiple retrieversHow to select examples from a LangSmith datasetHow to select examples by lengthHow to select examples by maximal marginal relevance (MMR)How to select examples by n-gram overlapHow to select examples by similarityHow to use reference examples when doing extractionHow to handle long text when doing extractionHow to use prompting alone (no tool calling) to",
    "to use prompting alone (no tool calling) to do extractionHow to add fallbacks to a runnableHow to filter messagesHybrid SearchHow to use the LangChain indexing APIHow to inspect runnablesLangChain Expression Language CheatsheetHow to cache LLM responsesHow to track token usage for LLMsRun models locallyHow to get log probabilitiesHow to reorder retrieved results to mitigate the \"lost in the middle\" effectHow to split Markdown by HeadersHow to merge consecutive messages of the same typeHow to",
    "merge consecutive messages of the same typeHow to add message historyHow to migrate from legacy LangChain agents to LangGraphHow to retrieve using multiple vectors per documentHow to pass multimodal data to modelsHow to use multimodal promptsHow to create a custom Output ParserHow to use the output-fixing parserHow to parse JSON outputHow to retry when a parsing error occursHow to parse text from message objectsHow to parse XML outputHow to parse YAML outputHow to use the Parent Document",
    "parse YAML outputHow to use the Parent Document RetrieverHow to use LangChain with different Pydantic versionsHow to add chat historyHow to get a RAG application to add citationsHow to do per-user retrievalHow to get your RAG application to return sourcesHow to stream results from your RAG applicationHow to split JSON dataHow to recursively split text by charactersResponse metadataHow to pass runtime secrets to runnablesHow to do \"self-querying\" retrievalHow to split text based on semantic",
    "retrievalHow to split text based on semantic similarityHow to chain runnablesHow to save and load LangChain objectsHow to split text by tokensHow to split HTMLHow to do question answering over CSVsHow to deal with large databases when doing SQL question-answeringHow to better prompt when doing SQL question-answeringHow to do query validation as part of SQL question-answeringHow to stream runnablesHow to stream responses from an LLMHow to use a time-weighted vector store retrieverHow to return",
    "time-weighted vector store retrieverHow to return artifacts from a toolHow to use chat models to call toolsHow to disable parallel tool callingHow to force models to call a toolHow to access the RunnableConfig from a toolHow to pass tool outputs to chat modelsHow to pass run time values to toolsHow to stream events from a toolHow to stream tool callsHow to convert tools to OpenAI FunctionsHow to handle tool errorsHow to use few-shot prompting with tool callingHow to add a human-in-the-loop for",
    "tool callingHow to add a human-in-the-loop for toolsHow to bind model-specific toolsHow to trim messagesHow to create and query vector storesConceptual guideAgentsArchitectureAsync programming with LangChainCallbacksChat historyChat modelsDocument loadersEmbedding modelsEvaluationExample selectorsFew-shot promptingConceptual guideKey-value storesLangChain Expression Language (LCEL)MessagesMultimodalityOutput parsersPrompt TemplatesRetrieval augmented generation (RAG)RetrievalRetrieversRunnable",
    "generation (RAG)RetrievalRetrieversRunnable interfaceStreamingStructured outputsTestingString-in, string-out llmsText splittersTokensTool callingToolsTracingVector storesWhy LangChain?Ecosystem🦜🛠️ LangSmith🦜🕸️ LangGraphVersionsv0.3v0.2Pydantic compatibilityMigrating from v0.0 chainsHow to migrate from v0.0 chainsMigrating from ConstitutionalChainMigrating from ConversationalChainMigrating from ConversationalRetrievalChainMigrating from LLMChainMigrating from LLMMathChainMigrating from",
    "LLMChainMigrating from LLMMathChainMigrating from LLMRouterChainMigrating from MapReduceDocumentsChainMigrating from MapRerankDocumentsChainMigrating from MultiPromptChainMigrating from RefineDocumentsChainMigrating from RetrievalQAMigrating from StuffDocumentsChainUpgrading to LangGraph memoryHow to migrate to LangGraph memoryHow to use BaseChatMessageHistory with LangGraphMigrating off ConversationBufferMemory or ConversationStringBufferMemoryMigrating off ConversationBufferWindowMemory or",
    "off ConversationBufferWindowMemory or ConversationTokenBufferMemoryMigrating off ConversationSummaryMemory or ConversationSummaryBufferMemoryA Long-Term Memory AgentRelease policySecurity PolicyVersionsMigrating from v0.0 chainsMigrating from ConversationalChainOn this pageMigrating from ConversationalChain",
    "ConversationChain incorporated a memory of previous messages to sustain a stateful conversation.\nSome advantages of switching to the Langgraph implementation are:",
    "Innate support for threads/separate sessions. To make this work with ConversationChain, you'd need to instantiate a separate memory class outside the chain.\nMore explicit parameters. ConversationChain contains a hidden default prompt, which can cause confusion.\nStreaming support. ConversationChain only supports streaming via callbacks.",
    "Langgraph's checkpointing system supports multiple threads or sessions, which can be specified via the \"thread_id\" key in its configuration parameters.\n%pip install --upgrade --quiet langchain langchain-openai\nimport osfrom getpass import getpassif \"OPENAI_API_KEY\" not in os.environ:    os.environ[\"OPENAI_API_KEY\"] = getpass()\nLegacy​",
    "Detailsfrom langchain.chains import ConversationChainfrom langchain.memory import ConversationBufferMemoryfrom langchain_core.prompts import ChatPromptTemplatefrom langchain_openai import ChatOpenAItemplate = \"\"\"You are a pirate. Answer the following questions as best you can.Chat history: {history}Question: {input}\"\"\"prompt = ChatPromptTemplate.from_template(template)memory = ConversationBufferMemory()chain = ConversationChain(    llm=ChatOpenAI(),    memory=memory,",
    "llm=ChatOpenAI(),    memory=memory,    prompt=prompt,)chain({\"input\": \"I'm Bob, how are you?\"})API Reference:ChatPromptTemplate{'input': \"I'm Bob, how are you?\", 'history': '', 'response': \"Arrr matey, I be a pirate sailin' the high seas. What be yer business with me?\"}chain({\"input\": \"What is my name?\"}){'input': 'What is my name?', 'history': \"Human: I'm Bob, how are you?\\nAI: Arrr matey, I be a pirate sailin' the high seas. What be yer business with me?\", 'response': 'Your name be Bob,",
    "with me?\", 'response': 'Your name be Bob, matey.'}",
    "Langgraph​",
    "Detailsimport uuidfrom langchain_openai import ChatOpenAIfrom langgraph.checkpoint.memory import MemorySaverfrom langgraph.graph import START, MessagesState, StateGraphmodel = ChatOpenAI(model=\"gpt-4o-mini\")# Define a new graphworkflow = StateGraph(state_schema=MessagesState)# Define the function that calls the modeldef call_model(state: MessagesState):    response = model.invoke(state[\"messages\"])    return {\"messages\": response}# Define the two nodes we will cycle",
    "response}# Define the two nodes we will cycle betweenworkflow.add_edge(START, \"model\")workflow.add_node(\"model\", call_model)# Add memorymemory = MemorySaver()app = workflow.compile(checkpointer=memory)# The thread id is a unique key that identifies# this particular conversation.# We'll just generate a random uuid here.thread_id = uuid.uuid4()config = {\"configurable\": {\"thread_id\": thread_id}}API Reference:MemorySaver | StateGraphquery = \"I'm Bob, how are you?\"input_messages = [    {",
    "Bob, how are you?\"input_messages = [    {        \"role\": \"system\",        \"content\": \"You are a pirate. Answer the following questions as best you can.\",    },    {\"role\": \"user\", \"content\": query},]for event in app.stream({\"messages\": input_messages}, config, stream_mode=\"values\"):    event[\"messages\"][-1].pretty_print()================================\u001b[1m Human Message \u001b[0m=================================I'm Bob, how are you?==================================\u001b[1m Ai Message",
    "Ai Message \u001b[0m==================================Ahoy, Bob! I be feelin' as lively as a ship in full sail! How be ye on this fine day?query = \"What is my name?\"input_messages = [{\"role\": \"user\", \"content\": query}]for event in app.stream({\"messages\": input_messages}, config, stream_mode=\"values\"):    event[\"messages\"][-1].pretty_print()================================\u001b[1m Human Message \u001b[0m=================================What is my name?==================================\u001b[1m Ai Message",
    "Ai Message \u001b[0m==================================Ye be callin' yerself Bob, I reckon! A fine name for a swashbuckler like yerself!",
    "Next steps​\nSee this tutorial for a more end-to-end guide on building with RunnableWithMessageHistory.\nCheck out the LCEL conceptual docs for more background information.Edit this pagePreviousMigrating from ConstitutionalChainNextMigrating from ConversationalRetrievalChainLegacyLanggraphNext stepsCommunityLangChain ForumTwitterSlackGitHubOrganizationPythonJS/TSMoreHomepageBlogYouTubeCopyright © 2025 LangChain, Inc.",
    "Migrating from ConversationalRetrievalChain | 🦜️🔗 LangChain",
    "Skip to main contentThese docs will be deprecated and no longer maintained with the release of LangChain v1.0 in October 2025. Visit the v1.0 alpha docsIntegrationsAPI ReferenceMoreContributingPeopleError referenceLangSmithLangGraphLangChain HubLangChain JS/TSv0.3v0.3v0.2v0.1💬SearchIntroductionTutorialsBuild a Question Answering application over a Graph DatabaseTutorialsBuild a simple LLM application with chat models and prompt templatesBuild a ChatbotBuild a Retrieval Augmented Generation",
    "a ChatbotBuild a Retrieval Augmented Generation (RAG) App: Part 2Build an Extraction ChainBuild an AgentTaggingBuild a Retrieval Augmented Generation (RAG) App: Part 1Build a semantic search engineBuild a Question/Answering system over SQL dataSummarize TextHow-to guidesHow-to guidesHow to use tools in a chainHow to use a vectorstore as a retrieverHow to add memory to chatbotsHow to use example selectorsHow to add a semantic layer over graph databaseHow to invoke runnables in parallelHow to",
    "databaseHow to invoke runnables in parallelHow to stream chat model responsesHow to add default invocation args to a RunnableHow to add retrieval to chatbotsHow to use few shot examples in chat modelsHow to do tool/function callingHow to install LangChain packagesHow to add examples to the prompt for query analysisHow to use few shot examplesHow to run custom functionsHow to use output parsers to parse an LLM response into structured formatHow to handle cases where no queries are generatedHow",
    "to handle cases where no queries are generatedHow to route between sub-chainsHow to return structured data from a modelHow to summarize text through parallelizationHow to summarize text through iterative refinementHow to summarize text in a single LLM callHow to use toolkitsHow to add ad-hoc tool calling capability to LLMs and Chat ModelsBuild an Agent with AgentExecutor (Legacy)How to construct knowledge graphsHow to partially format prompt templatesHow to handle multiple queries when doing",
    "to handle multiple queries when doing query analysisHow to use built-in tools and toolkitsHow to pass through arguments from one step to the nextHow to compose prompts togetherHow to handle multiple retrievers when doing query analysisHow to add values to a chain's stateHow to construct filters for query analysisHow to configure runtime chain internalsHow to deal with high-cardinality categoricals when doing query analysisCustom Document LoaderHow to use the MultiQueryRetrieverHow to add scores",
    "to use the MultiQueryRetrieverHow to add scores to retriever resultsCachingHow to use callbacks in async environmentsHow to attach callbacks to a runnableHow to propagate callbacks  constructorHow to dispatch custom callback eventsHow to pass callbacks in at runtimeHow to split by characterHow to cache chat model responsesHow to handle rate limitsHow to init any model in one lineHow to track token usage in ChatModelsHow to add tools to chatbotsHow to split codeHow to do retrieval with",
    "chatbotsHow to split codeHow to do retrieval with contextual compressionHow to convert Runnables to ToolsHow to create custom callback handlersHow to create a custom chat model classCustom EmbeddingsHow to create a custom LLM classCustom RetrieverHow to create toolsHow to debug your LLM appsHow to load CSVsHow to load documents from a directoryHow to load HTMLHow to load JSONHow to load MarkdownHow to load Microsoft Office filesHow to load PDFsHow to load web pagesHow to create a dynamic",
    "PDFsHow to load web pagesHow to create a dynamic (self-constructing) chainText embedding modelsHow to combine results from multiple retrieversHow to select examples from a LangSmith datasetHow to select examples by lengthHow to select examples by maximal marginal relevance (MMR)How to select examples by n-gram overlapHow to select examples by similarityHow to use reference examples when doing extractionHow to handle long text when doing extractionHow to use prompting alone (no tool calling) to",
    "to use prompting alone (no tool calling) to do extractionHow to add fallbacks to a runnableHow to filter messagesHybrid SearchHow to use the LangChain indexing APIHow to inspect runnablesLangChain Expression Language CheatsheetHow to cache LLM responsesHow to track token usage for LLMsRun models locallyHow to get log probabilitiesHow to reorder retrieved results to mitigate the \"lost in the middle\" effectHow to split Markdown by HeadersHow to merge consecutive messages of the same typeHow to",
    "merge consecutive messages of the same typeHow to add message historyHow to migrate from legacy LangChain agents to LangGraphHow to retrieve using multiple vectors per documentHow to pass multimodal data to modelsHow to use multimodal promptsHow to create a custom Output ParserHow to use the output-fixing parserHow to parse JSON outputHow to retry when a parsing error occursHow to parse text from message objectsHow to parse XML outputHow to parse YAML outputHow to use the Parent Document",
    "parse YAML outputHow to use the Parent Document RetrieverHow to use LangChain with different Pydantic versionsHow to add chat historyHow to get a RAG application to add citationsHow to do per-user retrievalHow to get your RAG application to return sourcesHow to stream results from your RAG applicationHow to split JSON dataHow to recursively split text by charactersResponse metadataHow to pass runtime secrets to runnablesHow to do \"self-querying\" retrievalHow to split text based on semantic",
    "retrievalHow to split text based on semantic similarityHow to chain runnablesHow to save and load LangChain objectsHow to split text by tokensHow to split HTMLHow to do question answering over CSVsHow to deal with large databases when doing SQL question-answeringHow to better prompt when doing SQL question-answeringHow to do query validation as part of SQL question-answeringHow to stream runnablesHow to stream responses from an LLMHow to use a time-weighted vector store retrieverHow to return",
    "time-weighted vector store retrieverHow to return artifacts from a toolHow to use chat models to call toolsHow to disable parallel tool callingHow to force models to call a toolHow to access the RunnableConfig from a toolHow to pass tool outputs to chat modelsHow to pass run time values to toolsHow to stream events from a toolHow to stream tool callsHow to convert tools to OpenAI FunctionsHow to handle tool errorsHow to use few-shot prompting with tool callingHow to add a human-in-the-loop for",
    "tool callingHow to add a human-in-the-loop for toolsHow to bind model-specific toolsHow to trim messagesHow to create and query vector storesConceptual guideAgentsArchitectureAsync programming with LangChainCallbacksChat historyChat modelsDocument loadersEmbedding modelsEvaluationExample selectorsFew-shot promptingConceptual guideKey-value storesLangChain Expression Language (LCEL)MessagesMultimodalityOutput parsersPrompt TemplatesRetrieval augmented generation (RAG)RetrievalRetrieversRunnable",
    "generation (RAG)RetrievalRetrieversRunnable interfaceStreamingStructured outputsTestingString-in, string-out llmsText splittersTokensTool callingToolsTracingVector storesWhy LangChain?Ecosystem🦜🛠️ LangSmith🦜🕸️ LangGraphVersionsv0.3v0.2Pydantic compatibilityMigrating from v0.0 chainsHow to migrate from v0.0 chainsMigrating from ConstitutionalChainMigrating from ConversationalChainMigrating from ConversationalRetrievalChainMigrating from LLMChainMigrating from LLMMathChainMigrating from",
    "LLMChainMigrating from LLMMathChainMigrating from LLMRouterChainMigrating from MapReduceDocumentsChainMigrating from MapRerankDocumentsChainMigrating from MultiPromptChainMigrating from RefineDocumentsChainMigrating from RetrievalQAMigrating from StuffDocumentsChainUpgrading to LangGraph memoryHow to migrate to LangGraph memoryHow to use BaseChatMessageHistory with LangGraphMigrating off ConversationBufferMemory or ConversationStringBufferMemoryMigrating off ConversationBufferWindowMemory or",
    "off ConversationBufferWindowMemory or ConversationTokenBufferMemoryMigrating off ConversationSummaryMemory or ConversationSummaryBufferMemoryA Long-Term Memory AgentRelease policySecurity PolicyVersionsMigrating from v0.0 chainsMigrating from ConversationalRetrievalChainOn this pageMigrating from ConversationalRetrievalChain",
    "The ConversationalRetrievalChain was an all-in one way that combined retrieval-augmented generation with chat history, allowing you to \"chat with\" your documents.\nAdvantages of switching to the LCEL implementation are similar to the RetrievalQA migration guide:",
    "Clearer internals. The ConversationalRetrievalChain chain hides an entire question rephrasing step which dereferences the initial query against the chat history.\n\nThis means the class contains two sets of configurable prompts, LLMs, etc.\n\n\nMore easily return source documents.\nSupport for runnable methods like streaming and async operations.",
    "Here are equivalent implementations with custom prompts.\nWe'll use the following ingestion code to load a blog post by Lilian Weng on autonomous agents into a local vector store:\nShared setup​\nFor both versions, we'll need to load the data with the WebBaseLoader document loader, split it with RecursiveCharacterTextSplitter, and add it to an in-memory FAISS vector store.\nWe will also instantiate a chat model to use.",
    "We will also instantiate a chat model to use.\n%pip install --upgrade --quiet langchain-community langchain langchain-openai faiss-cpu beautifulsoup4\nimport osfrom getpass import getpassif \"OPENAI_API_KEY\" not in os.environ:    os.environ[\"OPENAI_API_KEY\"] = getpass()",
    "# Load docsfrom langchain_community.document_loaders import WebBaseLoaderfrom langchain_community.vectorstores import FAISSfrom langchain_openai.chat_models import ChatOpenAIfrom langchain_openai.embeddings import OpenAIEmbeddingsfrom langchain_text_splitters import RecursiveCharacterTextSplitterloader = WebBaseLoader(\"https://lilianweng.github.io/posts/2023-06-23-agent/\")data = loader.load()# Splittext_splitter = RecursiveCharacterTextSplitter(chunk_size=500, chunk_overlap=0)all_splits =",
    "chunk_overlap=0)all_splits = text_splitter.split_documents(data)# Store splitsvectorstore = FAISS.from_documents(documents=all_splits, embedding=OpenAIEmbeddings())# LLMllm = ChatOpenAI()",
    "Legacy​",
    "Detailsfrom langchain.chains import ConversationalRetrievalChainfrom langchain_core.prompts import ChatPromptTemplatecondense_question_template = \"\"\"Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question.Chat History:{chat_history}Follow Up Input: {question}Standalone question:\"\"\"condense_question_prompt = ChatPromptTemplate.from_template(condense_question_template)qa_template = \"\"\"You are an assistant for question-answering",
    "= \"\"\"You are an assistant for question-answering tasks.Use the following pieces of retrieved context to answerthe question. If you don't know the answer, say that youdon't know. Use three sentences maximum and keep theanswer concise.Chat History:{chat_history}Other context:{context}Question: {question}\"\"\"qa_prompt = ChatPromptTemplate.from_template(qa_template)convo_qa_chain = ConversationalRetrievalChain.from_llm(    llm,    vectorstore.as_retriever(),",
    "llm,    vectorstore.as_retriever(),    condense_question_prompt=condense_question_prompt,    combine_docs_chain_kwargs={        \"prompt\": qa_prompt,    },)convo_qa_chain(    {        \"question\": \"What are autonomous agents?\",        \"chat_history\": \"\",    })API Reference:ChatPromptTemplate{'question': 'What are autonomous agents?', 'chat_history': '', 'answer': 'Autonomous agents are entities empowered with capabilities like planning, task decomposition, and memory to perform complex tasks",
    "and memory to perform complex tasks independently. These agents can leverage tools like browsing the internet, reading documentation, executing code, and calling APIs to achieve their objectives. They are designed to handle tasks like scientific discovery and experimentation autonomously.'}",
    "LCEL​",
    "Detailsfrom langchain.chains import create_history_aware_retriever, create_retrieval_chainfrom langchain.chains.combine_documents import create_stuff_documents_chaincondense_question_system_template = (    \"Given a chat history and the latest user question \"    \"which might reference context in the chat history, \"    \"formulate a standalone question which can be understood \"    \"without the chat history. Do NOT answer the question, \"    \"just reformulate it if needed and otherwise return it as",
    "it if needed and otherwise return it as is.\")condense_question_prompt = ChatPromptTemplate.from_messages(    [        (\"system\", condense_question_system_template),        (\"placeholder\", \"{chat_history}\"),        (\"human\", \"{input}\"),    ])history_aware_retriever = create_history_aware_retriever(    llm, vectorstore.as_retriever(), condense_question_prompt)system_prompt = (    \"You are an assistant for question-answering tasks. \"    \"Use the following pieces of retrieved context to answer \"",
    "pieces of retrieved context to answer \"    \"the question. If you don't know the answer, say that you \"    \"don't know. Use three sentences maximum and keep the \"    \"answer concise.\"    \"\\n\\n\"    \"{context}\")qa_prompt = ChatPromptTemplate.from_messages(    [        (\"system\", system_prompt),        (\"placeholder\", \"{chat_history}\"),        (\"human\", \"{input}\"),    ])qa_chain = create_stuff_documents_chain(llm, qa_prompt)convo_qa_chain = create_retrieval_chain(history_aware_retriever,",
    "= create_retrieval_chain(history_aware_retriever, qa_chain)convo_qa_chain.invoke(    {        \"input\": \"What are autonomous agents?\",        \"chat_history\": [],    }){'input': 'What are autonomous agents?', 'chat_history': [], 'context': [Document(metadata={'source': 'https://lilianweng.github.io/posts/2023-06-23-agent/', 'title': \"LLM Powered Autonomous Agents | Lil'Log\", 'description': 'Building agents with LLM (large language model) as its core controller is a cool concept. Several",
    "as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\\nAgent System Overview In a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:', 'language': 'en'}, page_content='Boiko et al. (2023)",
    "'en'}, page_content='Boiko et al. (2023) also looked into LLM-empowered agents for scientific discovery, to handle autonomous design, planning, and performance of complex scientific experiments. This agent can use tools to browse the Internet, read documentation, execute code, call robotics experimentation APIs and leverage other LLMs.\\nFor example, when requested to \"develop a novel anticancer drug\", the model came up with the following reasoning steps:'),  Document(metadata={'source':",
    "reasoning steps:'),  Document(metadata={'source': 'https://lilianweng.github.io/posts/2023-06-23-agent/', 'title': \"LLM Powered Autonomous Agents | Lil'Log\", 'description': 'Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a",
    "essays and programs; it can be framed as a powerful general problem solver.\\nAgent System Overview In a LLM-powered autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:', 'language': 'en'}, page_content='Weng, Lilian. (Jun 2023). “LLM-powered Autonomous Agents”. Lil’Log. https://lilianweng.github.io/posts/2023-06-23-agent/.'),  Document(metadata={'source': 'https://lilianweng.github.io/posts/2023-06-23-agent/', 'title': \"LLM Powered Autonomous",
    "'title': \"LLM Powered Autonomous Agents | Lil'Log\", 'description': 'Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\\nAgent System Overview In a LLM-powered autonomous agent system, LLM functions",
    "autonomous agent system, LLM functions as the agent’s brain, complemented by several key components:', 'language': 'en'}, page_content='Fig. 1. Overview of a LLM-powered autonomous agent system.\\nComponent One: Planning#\\nA complicated task usually involves many steps. An agent needs to know what they are and plan ahead.\\nTask Decomposition#'),  Document(metadata={'source': 'https://lilianweng.github.io/posts/2023-06-23-agent/', 'title': \"LLM Powered Autonomous Agents | Lil'Log\", 'description':",
    "Autonomous Agents | Lil'Log\", 'description': 'Building agents with LLM (large language model) as its core controller is a cool concept. Several proof-of-concepts demos, such as AutoGPT, GPT-Engineer and BabyAGI, serve as inspiring examples. The potentiality of LLM extends beyond generating well-written copies, stories, essays and programs; it can be framed as a powerful general problem solver.\\nAgent System Overview In a LLM-powered autonomous agent system, LLM functions as the agent’s brain,",
    "agent system, LLM functions as the agent’s brain, complemented by several key components:', 'language': 'en'}, page_content=\"LLM Powered Autonomous Agents | Lil'Log\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nLil'Log\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nPosts\\n\\n\\n\\n\\nArchive\\n\\n\\n\\n\\nSearch\\n\\n\\n\\n\\nTags\\n\\n\\n\\n\\nFAQ\\n\\n\\n\\n\\nemojisearch.app\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n      LLM Powered Autonomous Agents\\n    \\nDate: June 23, 2023  |  Estimated Reading Time:",
    "\\nDate: June 23, 2023  |  Estimated Reading Time: 31 min  |  Author: Lilian Weng\\n\\n\\n \\n\\n\\nTable of Contents\\n\\n\\n\\nAgent System Overview\\n\\nComponent One: Planning\\n\\nTask Decomposition\\n\\nSelf-Reflection\\n\\n\\nComponent Two: Memory\\n\\nTypes of Memory\\n\\nMaximum Inner Product Search (MIPS)\")], 'answer': 'Autonomous agents are entities that can act independently to achieve specific goals or tasks without direct human intervention. These agents have the ability to perceive their environment,",
    "have the ability to perceive their environment, make decisions, and take actions based on their programming or learning. They can perform tasks such as planning, execution, and problem-solving autonomously.'}",
    "Next steps​\nYou've now seen how to migrate existing usage of some legacy chains to LCEL.\nNext, check out the LCEL conceptual docs for more background information.Edit this pagePreviousMigrating from ConversationalChainNextMigrating from LLMChainShared setupLegacyLCELNext stepsCommunityLangChain ForumTwitterSlackGitHubOrganizationPythonJS/TSMoreHomepageBlogYouTubeCopyright © 2025 LangChain, Inc.",
    "Migrating from LLMChain | 🦜️🔗 LangChain",
    "Skip to main contentThese docs will be deprecated and no longer maintained with the release of LangChain v1.0 in October 2025. Visit the v1.0 alpha docsIntegrationsAPI ReferenceMoreContributingPeopleError referenceLangSmithLangGraphLangChain HubLangChain JS/TSv0.3v0.3v0.2v0.1💬SearchIntroductionTutorialsBuild a Question Answering application over a Graph DatabaseTutorialsBuild a simple LLM application with chat models and prompt templatesBuild a ChatbotBuild a Retrieval Augmented Generation",
    "a ChatbotBuild a Retrieval Augmented Generation (RAG) App: Part 2Build an Extraction ChainBuild an AgentTaggingBuild a Retrieval Augmented Generation (RAG) App: Part 1Build a semantic search engineBuild a Question/Answering system over SQL dataSummarize TextHow-to guidesHow-to guidesHow to use tools in a chainHow to use a vectorstore as a retrieverHow to add memory to chatbotsHow to use example selectorsHow to add a semantic layer over graph databaseHow to invoke runnables in parallelHow to",
    "databaseHow to invoke runnables in parallelHow to stream chat model responsesHow to add default invocation args to a RunnableHow to add retrieval to chatbotsHow to use few shot examples in chat modelsHow to do tool/function callingHow to install LangChain packagesHow to add examples to the prompt for query analysisHow to use few shot examplesHow to run custom functionsHow to use output parsers to parse an LLM response into structured formatHow to handle cases where no queries are generatedHow",
    "to handle cases where no queries are generatedHow to route between sub-chainsHow to return structured data from a modelHow to summarize text through parallelizationHow to summarize text through iterative refinementHow to summarize text in a single LLM callHow to use toolkitsHow to add ad-hoc tool calling capability to LLMs and Chat ModelsBuild an Agent with AgentExecutor (Legacy)How to construct knowledge graphsHow to partially format prompt templatesHow to handle multiple queries when doing",
    "to handle multiple queries when doing query analysisHow to use built-in tools and toolkitsHow to pass through arguments from one step to the nextHow to compose prompts togetherHow to handle multiple retrievers when doing query analysisHow to add values to a chain's stateHow to construct filters for query analysisHow to configure runtime chain internalsHow to deal with high-cardinality categoricals when doing query analysisCustom Document LoaderHow to use the MultiQueryRetrieverHow to add scores",
    "to use the MultiQueryRetrieverHow to add scores to retriever resultsCachingHow to use callbacks in async environmentsHow to attach callbacks to a runnableHow to propagate callbacks  constructorHow to dispatch custom callback eventsHow to pass callbacks in at runtimeHow to split by characterHow to cache chat model responsesHow to handle rate limitsHow to init any model in one lineHow to track token usage in ChatModelsHow to add tools to chatbotsHow to split codeHow to do retrieval with",
    "chatbotsHow to split codeHow to do retrieval with contextual compressionHow to convert Runnables to ToolsHow to create custom callback handlersHow to create a custom chat model classCustom EmbeddingsHow to create a custom LLM classCustom RetrieverHow to create toolsHow to debug your LLM appsHow to load CSVsHow to load documents from a directoryHow to load HTMLHow to load JSONHow to load MarkdownHow to load Microsoft Office filesHow to load PDFsHow to load web pagesHow to create a dynamic",
    "PDFsHow to load web pagesHow to create a dynamic (self-constructing) chainText embedding modelsHow to combine results from multiple retrieversHow to select examples from a LangSmith datasetHow to select examples by lengthHow to select examples by maximal marginal relevance (MMR)How to select examples by n-gram overlapHow to select examples by similarityHow to use reference examples when doing extractionHow to handle long text when doing extractionHow to use prompting alone (no tool calling) to",
    "to use prompting alone (no tool calling) to do extractionHow to add fallbacks to a runnableHow to filter messagesHybrid SearchHow to use the LangChain indexing APIHow to inspect runnablesLangChain Expression Language CheatsheetHow to cache LLM responsesHow to track token usage for LLMsRun models locallyHow to get log probabilitiesHow to reorder retrieved results to mitigate the \"lost in the middle\" effectHow to split Markdown by HeadersHow to merge consecutive messages of the same typeHow to",
    "merge consecutive messages of the same typeHow to add message historyHow to migrate from legacy LangChain agents to LangGraphHow to retrieve using multiple vectors per documentHow to pass multimodal data to modelsHow to use multimodal promptsHow to create a custom Output ParserHow to use the output-fixing parserHow to parse JSON outputHow to retry when a parsing error occursHow to parse text from message objectsHow to parse XML outputHow to parse YAML outputHow to use the Parent Document",
    "parse YAML outputHow to use the Parent Document RetrieverHow to use LangChain with different Pydantic versionsHow to add chat historyHow to get a RAG application to add citationsHow to do per-user retrievalHow to get your RAG application to return sourcesHow to stream results from your RAG applicationHow to split JSON dataHow to recursively split text by charactersResponse metadataHow to pass runtime secrets to runnablesHow to do \"self-querying\" retrievalHow to split text based on semantic",
    "retrievalHow to split text based on semantic similarityHow to chain runnablesHow to save and load LangChain objectsHow to split text by tokensHow to split HTMLHow to do question answering over CSVsHow to deal with large databases when doing SQL question-answeringHow to better prompt when doing SQL question-answeringHow to do query validation as part of SQL question-answeringHow to stream runnablesHow to stream responses from an LLMHow to use a time-weighted vector store retrieverHow to return",
    "time-weighted vector store retrieverHow to return artifacts from a toolHow to use chat models to call toolsHow to disable parallel tool callingHow to force models to call a toolHow to access the RunnableConfig from a toolHow to pass tool outputs to chat modelsHow to pass run time values to toolsHow to stream events from a toolHow to stream tool callsHow to convert tools to OpenAI FunctionsHow to handle tool errorsHow to use few-shot prompting with tool callingHow to add a human-in-the-loop for",
    "tool callingHow to add a human-in-the-loop for toolsHow to bind model-specific toolsHow to trim messagesHow to create and query vector storesConceptual guideAgentsArchitectureAsync programming with LangChainCallbacksChat historyChat modelsDocument loadersEmbedding modelsEvaluationExample selectorsFew-shot promptingConceptual guideKey-value storesLangChain Expression Language (LCEL)MessagesMultimodalityOutput parsersPrompt TemplatesRetrieval augmented generation (RAG)RetrievalRetrieversRunnable",
    "generation (RAG)RetrievalRetrieversRunnable interfaceStreamingStructured outputsTestingString-in, string-out llmsText splittersTokensTool callingToolsTracingVector storesWhy LangChain?Ecosystem🦜🛠️ LangSmith🦜🕸️ LangGraphVersionsv0.3v0.2Pydantic compatibilityMigrating from v0.0 chainsHow to migrate from v0.0 chainsMigrating from ConstitutionalChainMigrating from ConversationalChainMigrating from ConversationalRetrievalChainMigrating from LLMChainMigrating from LLMMathChainMigrating from",
    "LLMChainMigrating from LLMMathChainMigrating from LLMRouterChainMigrating from MapReduceDocumentsChainMigrating from MapRerankDocumentsChainMigrating from MultiPromptChainMigrating from RefineDocumentsChainMigrating from RetrievalQAMigrating from StuffDocumentsChainUpgrading to LangGraph memoryHow to migrate to LangGraph memoryHow to use BaseChatMessageHistory with LangGraphMigrating off ConversationBufferMemory or ConversationStringBufferMemoryMigrating off ConversationBufferWindowMemory or",
    "off ConversationBufferWindowMemory or ConversationTokenBufferMemoryMigrating off ConversationSummaryMemory or ConversationSummaryBufferMemoryA Long-Term Memory AgentRelease policySecurity PolicyVersionsMigrating from v0.0 chainsMigrating from LLMChainOn this pageMigrating from LLMChain",
    "LLMChain combined a prompt template, LLM, and output parser into a class.\nSome advantages of switching to the LCEL implementation are:",
    "Clarity around contents and parameters. The legacy LLMChain contains a default output parser and other options.\nEasier streaming. LLMChain only supports streaming via callbacks.\nEasier access to raw message outputs if desired. LLMChain only exposes these via a parameter or via callback.",
    "%pip install --upgrade --quiet langchain-openai\nimport osfrom getpass import getpassif \"OPENAI_API_KEY\" not in os.environ:    os.environ[\"OPENAI_API_KEY\"] = getpass()\nLegacy​",
    "Detailsfrom langchain.chains import LLMChainfrom langchain_core.prompts import ChatPromptTemplatefrom langchain_openai import ChatOpenAIprompt = ChatPromptTemplate.from_messages(    [(\"user\", \"Tell me a {adjective} joke\")],)legacy_chain = LLMChain(llm=ChatOpenAI(), prompt=prompt)legacy_result = legacy_chain({\"adjective\": \"funny\"})legacy_resultAPI Reference:ChatPromptTemplate{'adjective': 'funny', 'text': \"Why couldn't the bicycle stand up by itself?\\n\\nBecause it was two tired!\"}Note that",
    "itself?\\n\\nBecause it was two tired!\"}Note that LLMChain by default returned a dict containing both the input and the output from StrOutputParser, so to extract the output, you need to access the \"text\" key.legacy_result[\"text\"]\"Why couldn't the bicycle stand up by itself?\\n\\nBecause it was two tired!\"",
    "LCEL​",
    "Detailsfrom langchain_core.output_parsers import StrOutputParserfrom langchain_core.prompts import ChatPromptTemplatefrom langchain_openai import ChatOpenAIprompt = ChatPromptTemplate.from_messages(    [(\"user\", \"Tell me a {adjective} joke\")],)chain = prompt | ChatOpenAI() | StrOutputParser()chain.invoke({\"adjective\": \"funny\"})API Reference:StrOutputParser | ChatPromptTemplate'Why was the math book sad?\\n\\nBecause it had too many problems.'If you'd like to mimic the dict packaging of input and",
    "like to mimic the dict packaging of input and output in LLMChain, you can use a RunnablePassthrough.assign like:from langchain_core.runnables import RunnablePassthroughouter_chain = RunnablePassthrough().assign(text=chain)outer_chain.invoke({\"adjective\": \"funny\"})API Reference:RunnablePassthrough{'adjective': 'funny', 'text': 'Why did the scarecrow win an award? Because he was outstanding in his field!'}",
    "Next steps​\nSee this tutorial for more detail on building with prompt templates, LLMs, and output parsers.\nCheck out the LCEL conceptual docs for more background information.Edit this pagePreviousMigrating from ConversationalRetrievalChainNextMigrating from LLMMathChainLegacyLCELNext stepsCommunityLangChain ForumTwitterSlackGitHubOrganizationPythonJS/TSMoreHomepageBlogYouTubeCopyright © 2025 LangChain, Inc.",
    "Migrating from LLMMathChain | 🦜️🔗 LangChain",
    "Skip to main contentThese docs will be deprecated and no longer maintained with the release of LangChain v1.0 in October 2025. Visit the v1.0 alpha docsIntegrationsAPI ReferenceMoreContributingPeopleError referenceLangSmithLangGraphLangChain HubLangChain JS/TSv0.3v0.3v0.2v0.1💬SearchIntroductionTutorialsBuild a Question Answering application over a Graph DatabaseTutorialsBuild a simple LLM application with chat models and prompt templatesBuild a ChatbotBuild a Retrieval Augmented Generation",
    "a ChatbotBuild a Retrieval Augmented Generation (RAG) App: Part 2Build an Extraction ChainBuild an AgentTaggingBuild a Retrieval Augmented Generation (RAG) App: Part 1Build a semantic search engineBuild a Question/Answering system over SQL dataSummarize TextHow-to guidesHow-to guidesHow to use tools in a chainHow to use a vectorstore as a retrieverHow to add memory to chatbotsHow to use example selectorsHow to add a semantic layer over graph databaseHow to invoke runnables in parallelHow to",
    "databaseHow to invoke runnables in parallelHow to stream chat model responsesHow to add default invocation args to a RunnableHow to add retrieval to chatbotsHow to use few shot examples in chat modelsHow to do tool/function callingHow to install LangChain packagesHow to add examples to the prompt for query analysisHow to use few shot examplesHow to run custom functionsHow to use output parsers to parse an LLM response into structured formatHow to handle cases where no queries are generatedHow",
    "to handle cases where no queries are generatedHow to route between sub-chainsHow to return structured data from a modelHow to summarize text through parallelizationHow to summarize text through iterative refinementHow to summarize text in a single LLM callHow to use toolkitsHow to add ad-hoc tool calling capability to LLMs and Chat ModelsBuild an Agent with AgentExecutor (Legacy)How to construct knowledge graphsHow to partially format prompt templatesHow to handle multiple queries when doing",
    "to handle multiple queries when doing query analysisHow to use built-in tools and toolkitsHow to pass through arguments from one step to the nextHow to compose prompts togetherHow to handle multiple retrievers when doing query analysisHow to add values to a chain's stateHow to construct filters for query analysisHow to configure runtime chain internalsHow to deal with high-cardinality categoricals when doing query analysisCustom Document LoaderHow to use the MultiQueryRetrieverHow to add scores",
    "to use the MultiQueryRetrieverHow to add scores to retriever resultsCachingHow to use callbacks in async environmentsHow to attach callbacks to a runnableHow to propagate callbacks  constructorHow to dispatch custom callback eventsHow to pass callbacks in at runtimeHow to split by characterHow to cache chat model responsesHow to handle rate limitsHow to init any model in one lineHow to track token usage in ChatModelsHow to add tools to chatbotsHow to split codeHow to do retrieval with",
    "chatbotsHow to split codeHow to do retrieval with contextual compressionHow to convert Runnables to ToolsHow to create custom callback handlersHow to create a custom chat model classCustom EmbeddingsHow to create a custom LLM classCustom RetrieverHow to create toolsHow to debug your LLM appsHow to load CSVsHow to load documents from a directoryHow to load HTMLHow to load JSONHow to load MarkdownHow to load Microsoft Office filesHow to load PDFsHow to load web pagesHow to create a dynamic",
    "PDFsHow to load web pagesHow to create a dynamic (self-constructing) chainText embedding modelsHow to combine results from multiple retrieversHow to select examples from a LangSmith datasetHow to select examples by lengthHow to select examples by maximal marginal relevance (MMR)How to select examples by n-gram overlapHow to select examples by similarityHow to use reference examples when doing extractionHow to handle long text when doing extractionHow to use prompting alone (no tool calling) to",
    "to use prompting alone (no tool calling) to do extractionHow to add fallbacks to a runnableHow to filter messagesHybrid SearchHow to use the LangChain indexing APIHow to inspect runnablesLangChain Expression Language CheatsheetHow to cache LLM responsesHow to track token usage for LLMsRun models locallyHow to get log probabilitiesHow to reorder retrieved results to mitigate the \"lost in the middle\" effectHow to split Markdown by HeadersHow to merge consecutive messages of the same typeHow to",
    "merge consecutive messages of the same typeHow to add message historyHow to migrate from legacy LangChain agents to LangGraphHow to retrieve using multiple vectors per documentHow to pass multimodal data to modelsHow to use multimodal promptsHow to create a custom Output ParserHow to use the output-fixing parserHow to parse JSON outputHow to retry when a parsing error occursHow to parse text from message objectsHow to parse XML outputHow to parse YAML outputHow to use the Parent Document",
    "parse YAML outputHow to use the Parent Document RetrieverHow to use LangChain with different Pydantic versionsHow to add chat historyHow to get a RAG application to add citationsHow to do per-user retrievalHow to get your RAG application to return sourcesHow to stream results from your RAG applicationHow to split JSON dataHow to recursively split text by charactersResponse metadataHow to pass runtime secrets to runnablesHow to do \"self-querying\" retrievalHow to split text based on semantic",
    "retrievalHow to split text based on semantic similarityHow to chain runnablesHow to save and load LangChain objectsHow to split text by tokensHow to split HTMLHow to do question answering over CSVsHow to deal with large databases when doing SQL question-answeringHow to better prompt when doing SQL question-answeringHow to do query validation as part of SQL question-answeringHow to stream runnablesHow to stream responses from an LLMHow to use a time-weighted vector store retrieverHow to return",
    "time-weighted vector store retrieverHow to return artifacts from a toolHow to use chat models to call toolsHow to disable parallel tool callingHow to force models to call a toolHow to access the RunnableConfig from a toolHow to pass tool outputs to chat modelsHow to pass run time values to toolsHow to stream events from a toolHow to stream tool callsHow to convert tools to OpenAI FunctionsHow to handle tool errorsHow to use few-shot prompting with tool callingHow to add a human-in-the-loop for",
    "tool callingHow to add a human-in-the-loop for toolsHow to bind model-specific toolsHow to trim messagesHow to create and query vector storesConceptual guideAgentsArchitectureAsync programming with LangChainCallbacksChat historyChat modelsDocument loadersEmbedding modelsEvaluationExample selectorsFew-shot promptingConceptual guideKey-value storesLangChain Expression Language (LCEL)MessagesMultimodalityOutput parsersPrompt TemplatesRetrieval augmented generation (RAG)RetrievalRetrieversRunnable",
    "generation (RAG)RetrievalRetrieversRunnable interfaceStreamingStructured outputsTestingString-in, string-out llmsText splittersTokensTool callingToolsTracingVector storesWhy LangChain?Ecosystem🦜🛠️ LangSmith🦜🕸️ LangGraphVersionsv0.3v0.2Pydantic compatibilityMigrating from v0.0 chainsHow to migrate from v0.0 chainsMigrating from ConstitutionalChainMigrating from ConversationalChainMigrating from ConversationalRetrievalChainMigrating from LLMChainMigrating from LLMMathChainMigrating from",
    "LLMChainMigrating from LLMMathChainMigrating from LLMRouterChainMigrating from MapReduceDocumentsChainMigrating from MapRerankDocumentsChainMigrating from MultiPromptChainMigrating from RefineDocumentsChainMigrating from RetrievalQAMigrating from StuffDocumentsChainUpgrading to LangGraph memoryHow to migrate to LangGraph memoryHow to use BaseChatMessageHistory with LangGraphMigrating off ConversationBufferMemory or ConversationStringBufferMemoryMigrating off ConversationBufferWindowMemory or",
    "off ConversationBufferWindowMemory or ConversationTokenBufferMemoryMigrating off ConversationSummaryMemory or ConversationSummaryBufferMemoryA Long-Term Memory AgentRelease policySecurity PolicyVersionsMigrating from v0.0 chainsMigrating from LLMMathChainOn this pageMigrating from LLMMathChain",
    "LLMMathChain enabled the evaluation of mathematical expressions generated by a LLM. Instructions for generating the expressions were formatted into the prompt, and the expressions were parsed out of the string response before evaluation using the numexpr library.\nThis is more naturally achieved via tool calling. We can equip a chat model with a simple calculator tool leveraging numexpr and construct a simple chain around it using LangGraph. Some advantages of this approach include:",
    "Leverage tool-calling capabilities of chat models that have been fine-tuned for this purpose;\nReduce parsing errors from extracting expression from a string LLM response;\nDelegation of instructions to message roles (e.g., chat models can understand what a ToolMessage represents without the need for additional prompting);\nSupport for streaming, both of individual tokens and chain steps.",
    "%pip install --upgrade --quiet numexpr\nimport osfrom getpass import getpassif \"OPENAI_API_KEY\" not in os.environ:    os.environ[\"OPENAI_API_KEY\"] = getpass()\nLegacy​",
    "Legacy​\nDetailsfrom langchain.chains import LLMMathChainfrom langchain_core.prompts import ChatPromptTemplatefrom langchain_openai import ChatOpenAIllm = ChatOpenAI(model=\"gpt-4o-mini\")chain = LLMMathChain.from_llm(llm)chain.invoke(\"What is 551368 divided by 82?\")API Reference:ChatPromptTemplate{'question': 'What is 551368 divided by 82?', 'answer': 'Answer: 6724.0'}\nLangGraph​",
    "Detailsimport mathfrom typing import Annotated, Sequenceimport numexprfrom langchain_core.messages import BaseMessagefrom langchain_core.runnables import RunnableConfigfrom langchain_core.tools import toolfrom langchain_openai import ChatOpenAIfrom langgraph.graph import END, StateGraphfrom langgraph.graph.message import add_messagesfrom langgraph.prebuilt.tool_node import ToolNodefrom typing_extensions import TypedDict@tooldef calculator(expression: str) -> str:    \"\"\"Calculate expression",
    "str) -> str:    \"\"\"Calculate expression using Python's numexpr library.    Expression should be a single line mathematical expression    that solves the problem.    Examples:        \"37593 * 67\" for \"37593 times 67\"        \"37593**(1/5)\" for \"37593^(1/5)\"    \"\"\"    local_dict = {\"pi\": math.pi, \"e\": math.e}    return str(        numexpr.evaluate(            expression.strip(),            global_dict={},  # restrict access to globals            local_dict=local_dict,  # add common mathematical",
    "local_dict=local_dict,  # add common mathematical functions        )    )llm = ChatOpenAI(model=\"gpt-4o-mini\", temperature=0)tools = [calculator]llm_with_tools = llm.bind_tools(tools, tool_choice=\"any\")class ChainState(TypedDict):    \"\"\"LangGraph state.\"\"\"    messages: Annotated[Sequence[BaseMessage], add_messages]async def acall_chain(state: ChainState, config: RunnableConfig):    last_message = state[\"messages\"][-1]    response = await llm_with_tools.ainvoke(state[\"messages\"], config)",
    "config)    return {\"messages\": [response]}async def acall_model(state: ChainState, config: RunnableConfig):    response = await llm.ainvoke(state[\"messages\"], config)    return {\"messages\": [response]}graph_builder = StateGraph(ChainState)graph_builder.add_node(\"call_tool\", acall_chain)graph_builder.add_node(\"execute_tool\", ToolNode(tools))graph_builder.add_node(\"call_model\", acall_model)graph_builder.set_entry_point(\"call_tool\")graph_builder.add_edge(\"call_tool\",",
    "\"execute_tool\")graph_builder.add_edge(\"execute_tool\", \"call_model\")graph_builder.add_edge(\"call_model\", END)chain = graph_builder.compile()API Reference:BaseMessage | RunnableConfig | tool | StateGraph | add_messages | ToolNode# Visualize chain:from IPython.display import ImageImage(chain.get_graph().draw_mermaid_png())# Stream chain steps:example_query = \"What is 551368 divided by 82\"events = chain.astream(    {\"messages\": [(\"user\", example_query)]},    stream_mode=\"values\",)async for event in",
    "stream_mode=\"values\",)async for event in events:    event[\"messages\"][-1].pretty_print()================================\u001b[1m Human Message \u001b[0m=================================What is 551368 divided by 82==================================\u001b[1m Ai Message \u001b[0m==================================Tool Calls:  calculator (call_1ic3gjuII0Aq9vxlSYiwvjSb) Call ID: call_1ic3gjuII0Aq9vxlSYiwvjSb  Args:    expression: 551368 / 82=================================\u001b[1m Tool Message",
    "Tool Message \u001b[0m=================================Name: calculator6724.0==================================\u001b[1m Ai Message \u001b[0m==================================551368 divided by 82 equals 6724.",
    "Next steps​\nSee guides for building and working with tools here.\nCheck out the LangGraph documentation for detail on building with LangGraph.Edit this pagePreviousMigrating from LLMChainNextMigrating from LLMRouterChainLegacyLangGraphNext stepsCommunityLangChain ForumTwitterSlackGitHubOrganizationPythonJS/TSMoreHomepageBlogYouTubeCopyright © 2025 LangChain, Inc.",
    "Migrating from LLMRouterChain | 🦜️🔗 LangChain",
    "Skip to main contentThese docs will be deprecated and no longer maintained with the release of LangChain v1.0 in October 2025. Visit the v1.0 alpha docsIntegrationsAPI ReferenceMoreContributingPeopleError referenceLangSmithLangGraphLangChain HubLangChain JS/TSv0.3v0.3v0.2v0.1💬SearchIntroductionTutorialsBuild a Question Answering application over a Graph DatabaseTutorialsBuild a simple LLM application with chat models and prompt templatesBuild a ChatbotBuild a Retrieval Augmented Generation",
    "a ChatbotBuild a Retrieval Augmented Generation (RAG) App: Part 2Build an Extraction ChainBuild an AgentTaggingBuild a Retrieval Augmented Generation (RAG) App: Part 1Build a semantic search engineBuild a Question/Answering system over SQL dataSummarize TextHow-to guidesHow-to guidesHow to use tools in a chainHow to use a vectorstore as a retrieverHow to add memory to chatbotsHow to use example selectorsHow to add a semantic layer over graph databaseHow to invoke runnables in parallelHow to",
    "databaseHow to invoke runnables in parallelHow to stream chat model responsesHow to add default invocation args to a RunnableHow to add retrieval to chatbotsHow to use few shot examples in chat modelsHow to do tool/function callingHow to install LangChain packagesHow to add examples to the prompt for query analysisHow to use few shot examplesHow to run custom functionsHow to use output parsers to parse an LLM response into structured formatHow to handle cases where no queries are generatedHow",
    "to handle cases where no queries are generatedHow to route between sub-chainsHow to return structured data from a modelHow to summarize text through parallelizationHow to summarize text through iterative refinementHow to summarize text in a single LLM callHow to use toolkitsHow to add ad-hoc tool calling capability to LLMs and Chat ModelsBuild an Agent with AgentExecutor (Legacy)How to construct knowledge graphsHow to partially format prompt templatesHow to handle multiple queries when doing",
    "to handle multiple queries when doing query analysisHow to use built-in tools and toolkitsHow to pass through arguments from one step to the nextHow to compose prompts togetherHow to handle multiple retrievers when doing query analysisHow to add values to a chain's stateHow to construct filters for query analysisHow to configure runtime chain internalsHow to deal with high-cardinality categoricals when doing query analysisCustom Document LoaderHow to use the MultiQueryRetrieverHow to add scores",
    "to use the MultiQueryRetrieverHow to add scores to retriever resultsCachingHow to use callbacks in async environmentsHow to attach callbacks to a runnableHow to propagate callbacks  constructorHow to dispatch custom callback eventsHow to pass callbacks in at runtimeHow to split by characterHow to cache chat model responsesHow to handle rate limitsHow to init any model in one lineHow to track token usage in ChatModelsHow to add tools to chatbotsHow to split codeHow to do retrieval with",
    "chatbotsHow to split codeHow to do retrieval with contextual compressionHow to convert Runnables to ToolsHow to create custom callback handlersHow to create a custom chat model classCustom EmbeddingsHow to create a custom LLM classCustom RetrieverHow to create toolsHow to debug your LLM appsHow to load CSVsHow to load documents from a directoryHow to load HTMLHow to load JSONHow to load MarkdownHow to load Microsoft Office filesHow to load PDFsHow to load web pagesHow to create a dynamic",
    "PDFsHow to load web pagesHow to create a dynamic (self-constructing) chainText embedding modelsHow to combine results from multiple retrieversHow to select examples from a LangSmith datasetHow to select examples by lengthHow to select examples by maximal marginal relevance (MMR)How to select examples by n-gram overlapHow to select examples by similarityHow to use reference examples when doing extractionHow to handle long text when doing extractionHow to use prompting alone (no tool calling) to",
    "to use prompting alone (no tool calling) to do extractionHow to add fallbacks to a runnableHow to filter messagesHybrid SearchHow to use the LangChain indexing APIHow to inspect runnablesLangChain Expression Language CheatsheetHow to cache LLM responsesHow to track token usage for LLMsRun models locallyHow to get log probabilitiesHow to reorder retrieved results to mitigate the \"lost in the middle\" effectHow to split Markdown by HeadersHow to merge consecutive messages of the same typeHow to",
    "merge consecutive messages of the same typeHow to add message historyHow to migrate from legacy LangChain agents to LangGraphHow to retrieve using multiple vectors per documentHow to pass multimodal data to modelsHow to use multimodal promptsHow to create a custom Output ParserHow to use the output-fixing parserHow to parse JSON outputHow to retry when a parsing error occursHow to parse text from message objectsHow to parse XML outputHow to parse YAML outputHow to use the Parent Document",
    "parse YAML outputHow to use the Parent Document RetrieverHow to use LangChain with different Pydantic versionsHow to add chat historyHow to get a RAG application to add citationsHow to do per-user retrievalHow to get your RAG application to return sourcesHow to stream results from your RAG applicationHow to split JSON dataHow to recursively split text by charactersResponse metadataHow to pass runtime secrets to runnablesHow to do \"self-querying\" retrievalHow to split text based on semantic",
    "retrievalHow to split text based on semantic similarityHow to chain runnablesHow to save and load LangChain objectsHow to split text by tokensHow to split HTMLHow to do question answering over CSVsHow to deal with large databases when doing SQL question-answeringHow to better prompt when doing SQL question-answeringHow to do query validation as part of SQL question-answeringHow to stream runnablesHow to stream responses from an LLMHow to use a time-weighted vector store retrieverHow to return",
    "time-weighted vector store retrieverHow to return artifacts from a toolHow to use chat models to call toolsHow to disable parallel tool callingHow to force models to call a toolHow to access the RunnableConfig from a toolHow to pass tool outputs to chat modelsHow to pass run time values to toolsHow to stream events from a toolHow to stream tool callsHow to convert tools to OpenAI FunctionsHow to handle tool errorsHow to use few-shot prompting with tool callingHow to add a human-in-the-loop for",
    "tool callingHow to add a human-in-the-loop for toolsHow to bind model-specific toolsHow to trim messagesHow to create and query vector storesConceptual guideAgentsArchitectureAsync programming with LangChainCallbacksChat historyChat modelsDocument loadersEmbedding modelsEvaluationExample selectorsFew-shot promptingConceptual guideKey-value storesLangChain Expression Language (LCEL)MessagesMultimodalityOutput parsersPrompt TemplatesRetrieval augmented generation (RAG)RetrievalRetrieversRunnable",
    "generation (RAG)RetrievalRetrieversRunnable interfaceStreamingStructured outputsTestingString-in, string-out llmsText splittersTokensTool callingToolsTracingVector storesWhy LangChain?Ecosystem🦜🛠️ LangSmith🦜🕸️ LangGraphVersionsv0.3v0.2Pydantic compatibilityMigrating from v0.0 chainsHow to migrate from v0.0 chainsMigrating from ConstitutionalChainMigrating from ConversationalChainMigrating from ConversationalRetrievalChainMigrating from LLMChainMigrating from LLMMathChainMigrating from",
    "LLMChainMigrating from LLMMathChainMigrating from LLMRouterChainMigrating from MapReduceDocumentsChainMigrating from MapRerankDocumentsChainMigrating from MultiPromptChainMigrating from RefineDocumentsChainMigrating from RetrievalQAMigrating from StuffDocumentsChainUpgrading to LangGraph memoryHow to migrate to LangGraph memoryHow to use BaseChatMessageHistory with LangGraphMigrating off ConversationBufferMemory or ConversationStringBufferMemoryMigrating off ConversationBufferWindowMemory or",
    "off ConversationBufferWindowMemory or ConversationTokenBufferMemoryMigrating off ConversationSummaryMemory or ConversationSummaryBufferMemoryA Long-Term Memory AgentRelease policySecurity PolicyVersionsMigrating from v0.0 chainsMigrating from LLMRouterChainOn this pageMigrating from LLMRouterChain",
    "The LLMRouterChain routed an input query to one of multiple destinations-- that is, given an input query, it used a LLM to select from a list of destination chains, and passed its inputs to the selected chain.\nLLMRouterChain does not support common chat model features, such as message roles and tool calling. Under the hood, LLMRouterChain routes a query by instructing the LLM to generate JSON-formatted text, and parsing out the intended destination.",
    "Consider an example from a MultiPromptChain, which uses LLMRouterChain. Below is an (example) default prompt:\nfrom langchain.chains.router.multi_prompt import MULTI_PROMPT_ROUTER_TEMPLATEdestinations = \"\"\"animals: prompt for animal expertvegetables: prompt for a vegetable expert\"\"\"router_template = MULTI_PROMPT_ROUTER_TEMPLATE.format(destinations=destinations)print(router_template.replace(\"`\", \"'\"))  # for rendering purposes",
    "Given a raw text input to a language model select the model prompt best suited for the input. You will be given the names of the available prompts and a description of what the prompt is best suited for. You may also revise the original input if you think that revising it will ultimately lead to a better response from the language model.<< FORMATTING >>Return a markdown code snippet with a JSON object formatted to look like:'''json{{    \"destination\": string \\ name of the prompt to use or",
    "string \\ name of the prompt to use or \"DEFAULT\"    \"next_inputs\": string \\ a potentially modified version of the original input}}'''REMEMBER: \"destination\" MUST be one of the candidate prompt names specified below OR it can be \"DEFAULT\" if the input is not well suited for any of the candidate prompts.REMEMBER: \"next_inputs\" can just be the original input if you don't think any modifications are needed.<< CANDIDATE PROMPTS >>animals: prompt for animal expertvegetables: prompt for a vegetable",
    "animal expertvegetables: prompt for a vegetable expert<< INPUT >>{input}<< OUTPUT (must include '''json at the start of the response) >><< OUTPUT (must end with ''') >>",
    "Most of the behavior is determined via a single natural language prompt. Chat models that support tool calling features confer a number of advantages for this task:",
    "Supports chat prompt templates, including messages with system and other roles;\nTool-calling models are fine-tuned to generate structured output;\nSupport for runnable methods like streaming and async operations.",
    "Now let's look at LLMRouterChain side-by-side with an LCEL implementation that uses tool-calling. Note that for this guide we will langchain-openai >= 0.1.20:\n%pip install -qU langchain-core langchain-openai\nimport osfrom getpass import getpassif \"OPENAI_API_KEY\" not in os.environ:    os.environ[\"OPENAI_API_KEY\"] = getpass()\nLegacy​",
    "Detailsfrom langchain.chains.router.llm_router import LLMRouterChain, RouterOutputParserfrom langchain_core.prompts import PromptTemplatefrom langchain_openai import ChatOpenAIllm = ChatOpenAI(model=\"gpt-4o-mini\")router_prompt = PromptTemplate(    # Note: here we use the prompt template from above. Generally this would need    # to be customized.    template=router_template,    input_variables=[\"input\"],    output_parser=RouterOutputParser(),)chain = LLMRouterChain.from_llm(llm,",
    "= LLMRouterChain.from_llm(llm, router_prompt)API Reference:PromptTemplateresult = chain.invoke({\"input\": \"What color are carrots?\"})print(result[\"destination\"])vegetables",
    "LCEL​",
    "Detailsfrom operator import itemgetterfrom typing import Literalfrom langchain_core.prompts import ChatPromptTemplatefrom langchain_core.runnables import RunnablePassthroughfrom langchain_openai import ChatOpenAIfrom typing_extensions import TypedDictllm = ChatOpenAI(model=\"gpt-4o-mini\")route_system = \"Route the user's query to either the animal or vegetable expert.\"route_prompt = ChatPromptTemplate.from_messages(    [        (\"system\", route_system),        (\"human\", \"{input}\"),    ])# Define",
    "(\"human\", \"{input}\"),    ])# Define schema for output:class RouteQuery(TypedDict):    \"\"\"Route query to destination expert.\"\"\"    destination: Literal[\"animal\", \"vegetable\"]# Instead of writing formatting instructions into the prompt, we# leverage .with_structured_output to coerce the output into a simple# schema.chain = route_prompt | llm.with_structured_output(RouteQuery)API Reference:ChatPromptTemplate | RunnablePassthroughresult = chain.invoke({\"input\": \"What color are",
    "= chain.invoke({\"input\": \"What color are carrots?\"})print(result[\"destination\"])vegetable",
    "Next steps​\nSee this tutorial for more detail on building with prompt templates, LLMs, and output parsers.\nCheck out the LCEL conceptual docs for more background information.Edit this pagePreviousMigrating from LLMMathChainNextMigrating from MapReduceDocumentsChainLegacyLCELNext stepsCommunityLangChain ForumTwitterSlackGitHubOrganizationPythonJS/TSMoreHomepageBlogYouTubeCopyright © 2025 LangChain, Inc.",
    "Migrating from MapReduceDocumentsChain | 🦜️🔗 LangChain",
    "Skip to main contentThese docs will be deprecated and no longer maintained with the release of LangChain v1.0 in October 2025. Visit the v1.0 alpha docsIntegrationsAPI ReferenceMoreContributingPeopleError referenceLangSmithLangGraphLangChain HubLangChain JS/TSv0.3v0.3v0.2v0.1💬SearchIntroductionTutorialsBuild a Question Answering application over a Graph DatabaseTutorialsBuild a simple LLM application with chat models and prompt templatesBuild a ChatbotBuild a Retrieval Augmented Generation",
    "a ChatbotBuild a Retrieval Augmented Generation (RAG) App: Part 2Build an Extraction ChainBuild an AgentTaggingBuild a Retrieval Augmented Generation (RAG) App: Part 1Build a semantic search engineBuild a Question/Answering system over SQL dataSummarize TextHow-to guidesHow-to guidesHow to use tools in a chainHow to use a vectorstore as a retrieverHow to add memory to chatbotsHow to use example selectorsHow to add a semantic layer over graph databaseHow to invoke runnables in parallelHow to",
    "databaseHow to invoke runnables in parallelHow to stream chat model responsesHow to add default invocation args to a RunnableHow to add retrieval to chatbotsHow to use few shot examples in chat modelsHow to do tool/function callingHow to install LangChain packagesHow to add examples to the prompt for query analysisHow to use few shot examplesHow to run custom functionsHow to use output parsers to parse an LLM response into structured formatHow to handle cases where no queries are generatedHow",
    "to handle cases where no queries are generatedHow to route between sub-chainsHow to return structured data from a modelHow to summarize text through parallelizationHow to summarize text through iterative refinementHow to summarize text in a single LLM callHow to use toolkitsHow to add ad-hoc tool calling capability to LLMs and Chat ModelsBuild an Agent with AgentExecutor (Legacy)How to construct knowledge graphsHow to partially format prompt templatesHow to handle multiple queries when doing",
    "to handle multiple queries when doing query analysisHow to use built-in tools and toolkitsHow to pass through arguments from one step to the nextHow to compose prompts togetherHow to handle multiple retrievers when doing query analysisHow to add values to a chain's stateHow to construct filters for query analysisHow to configure runtime chain internalsHow to deal with high-cardinality categoricals when doing query analysisCustom Document LoaderHow to use the MultiQueryRetrieverHow to add scores",
    "to use the MultiQueryRetrieverHow to add scores to retriever resultsCachingHow to use callbacks in async environmentsHow to attach callbacks to a runnableHow to propagate callbacks  constructorHow to dispatch custom callback eventsHow to pass callbacks in at runtimeHow to split by characterHow to cache chat model responsesHow to handle rate limitsHow to init any model in one lineHow to track token usage in ChatModelsHow to add tools to chatbotsHow to split codeHow to do retrieval with",
    "chatbotsHow to split codeHow to do retrieval with contextual compressionHow to convert Runnables to ToolsHow to create custom callback handlersHow to create a custom chat model classCustom EmbeddingsHow to create a custom LLM classCustom RetrieverHow to create toolsHow to debug your LLM appsHow to load CSVsHow to load documents from a directoryHow to load HTMLHow to load JSONHow to load MarkdownHow to load Microsoft Office filesHow to load PDFsHow to load web pagesHow to create a dynamic",
    "PDFsHow to load web pagesHow to create a dynamic (self-constructing) chainText embedding modelsHow to combine results from multiple retrieversHow to select examples from a LangSmith datasetHow to select examples by lengthHow to select examples by maximal marginal relevance (MMR)How to select examples by n-gram overlapHow to select examples by similarityHow to use reference examples when doing extractionHow to handle long text when doing extractionHow to use prompting alone (no tool calling) to",
    "to use prompting alone (no tool calling) to do extractionHow to add fallbacks to a runnableHow to filter messagesHybrid SearchHow to use the LangChain indexing APIHow to inspect runnablesLangChain Expression Language CheatsheetHow to cache LLM responsesHow to track token usage for LLMsRun models locallyHow to get log probabilitiesHow to reorder retrieved results to mitigate the \"lost in the middle\" effectHow to split Markdown by HeadersHow to merge consecutive messages of the same typeHow to",
    "merge consecutive messages of the same typeHow to add message historyHow to migrate from legacy LangChain agents to LangGraphHow to retrieve using multiple vectors per documentHow to pass multimodal data to modelsHow to use multimodal promptsHow to create a custom Output ParserHow to use the output-fixing parserHow to parse JSON outputHow to retry when a parsing error occursHow to parse text from message objectsHow to parse XML outputHow to parse YAML outputHow to use the Parent Document",
    "parse YAML outputHow to use the Parent Document RetrieverHow to use LangChain with different Pydantic versionsHow to add chat historyHow to get a RAG application to add citationsHow to do per-user retrievalHow to get your RAG application to return sourcesHow to stream results from your RAG applicationHow to split JSON dataHow to recursively split text by charactersResponse metadataHow to pass runtime secrets to runnablesHow to do \"self-querying\" retrievalHow to split text based on semantic",
    "retrievalHow to split text based on semantic similarityHow to chain runnablesHow to save and load LangChain objectsHow to split text by tokensHow to split HTMLHow to do question answering over CSVsHow to deal with large databases when doing SQL question-answeringHow to better prompt when doing SQL question-answeringHow to do query validation as part of SQL question-answeringHow to stream runnablesHow to stream responses from an LLMHow to use a time-weighted vector store retrieverHow to return",
    "time-weighted vector store retrieverHow to return artifacts from a toolHow to use chat models to call toolsHow to disable parallel tool callingHow to force models to call a toolHow to access the RunnableConfig from a toolHow to pass tool outputs to chat modelsHow to pass run time values to toolsHow to stream events from a toolHow to stream tool callsHow to convert tools to OpenAI FunctionsHow to handle tool errorsHow to use few-shot prompting with tool callingHow to add a human-in-the-loop for",
    "tool callingHow to add a human-in-the-loop for toolsHow to bind model-specific toolsHow to trim messagesHow to create and query vector storesConceptual guideAgentsArchitectureAsync programming with LangChainCallbacksChat historyChat modelsDocument loadersEmbedding modelsEvaluationExample selectorsFew-shot promptingConceptual guideKey-value storesLangChain Expression Language (LCEL)MessagesMultimodalityOutput parsersPrompt TemplatesRetrieval augmented generation (RAG)RetrievalRetrieversRunnable",
    "generation (RAG)RetrievalRetrieversRunnable interfaceStreamingStructured outputsTestingString-in, string-out llmsText splittersTokensTool callingToolsTracingVector storesWhy LangChain?Ecosystem🦜🛠️ LangSmith🦜🕸️ LangGraphVersionsv0.3v0.2Pydantic compatibilityMigrating from v0.0 chainsHow to migrate from v0.0 chainsMigrating from ConstitutionalChainMigrating from ConversationalChainMigrating from ConversationalRetrievalChainMigrating from LLMChainMigrating from LLMMathChainMigrating from",
    "LLMChainMigrating from LLMMathChainMigrating from LLMRouterChainMigrating from MapReduceDocumentsChainMigrating from MapRerankDocumentsChainMigrating from MultiPromptChainMigrating from RefineDocumentsChainMigrating from RetrievalQAMigrating from StuffDocumentsChainUpgrading to LangGraph memoryHow to migrate to LangGraph memoryHow to use BaseChatMessageHistory with LangGraphMigrating off ConversationBufferMemory or ConversationStringBufferMemoryMigrating off ConversationBufferWindowMemory or",
    "off ConversationBufferWindowMemory or ConversationTokenBufferMemoryMigrating off ConversationSummaryMemory or ConversationSummaryBufferMemoryA Long-Term Memory AgentRelease policySecurity PolicyVersionsMigrating from v0.0 chainsMigrating from MapReduceDocumentsChainOn this pageMigrating from MapReduceDocumentsChain",
    "MapReduceDocumentsChain implements a map-reduce strategy over (potentially long) texts. The strategy is as follows:",
    "Split a text into smaller documents;\nMap a process onto the smaller documents;\nReduce or consolidate the results of the process into a final result.",
    "Note that the map step is typically parallelized over the input documents.\nA common process applied in this context is summarization, in which the map step summarizes individual documents, and the reduce step generates a summary of the summaries.",
    "In the reduce step, MapReduceDocumentsChain supports a recursive \"collapsing\" of the summaries: the inputs would be partitioned based on a token limit, and summaries would be generated of the partitions. This step would be repeated until the total length of the summaries was within a desired limit, allowing for the summarization of arbitrary-length text. This is particularly useful for models with smaller context windows.",
    "LangGraph supports map-reduce workflows, and confers a number of advantages for this problem:",
    "LangGraph allows for individual steps (such as successive summarizations) to be streamed, allowing for greater control of execution;\nLangGraph's checkpointing supports error recovery, extending with human-in-the-loop workflows, and easier incorporation into conversational applications.\nThe LangGraph implementation is easier to extend, as we will see below.",
    "Below we will go through both MapReduceDocumentsChain and a corresponding LangGraph implementation, first on a simple example for illustrative purposes, and second on a longer example text to demonstrate the recursive reduce step.\nLet's first load a chat model:",
    "Select chat model:Google Gemini▾OpenAIAnthropicAzureGoogle GeminiGoogle VertexAWSGroqCohereNVIDIAFireworks AIMistral AITogether AIIBM watsonxDatabricksxAIPerplexityDeepSeekChatOCIGenAIpip install -qU \"langchain[google-genai]\"import getpassimport osif not os.environ.get(\"GOOGLE_API_KEY\"):  os.environ[\"GOOGLE_API_KEY\"] = getpass.getpass(\"Enter API key for Google Gemini: \")from langchain.chat_models import init_chat_modelllm = init_chat_model(\"gemini-2.5-flash\", model_provider=\"google_genai\")",
    "Basic example (short documents)​\nLet's use the following 3 documents for illustrative purposes.\nfrom langchain_core.documents import Documentdocuments = [    Document(page_content=\"Apples are red\", metadata={\"title\": \"apple_book\"}),    Document(page_content=\"Blueberries are blue\", metadata={\"title\": \"blueberry_book\"}),    Document(page_content=\"Bananas are yelow\", metadata={\"title\": \"banana_book\"}),]API Reference:Document\nLegacy​",
    "DetailsBelow we show an implementation with MapReduceDocumentsChain. We define the prompt templates for the map and reduce steps, instantiate separate chains for these steps, and finally instantiate the MapReduceDocumentsChain:from langchain.chains import MapReduceDocumentsChain, ReduceDocumentsChainfrom langchain.chains.combine_documents.stuff import StuffDocumentsChainfrom langchain.chains.llm import LLMChainfrom langchain_core.prompts import ChatPromptTemplatefrom langchain_text_splitters",
    "ChatPromptTemplatefrom langchain_text_splitters import CharacterTextSplitter# Mapmap_template = \"Write a concise summary of the following: {docs}.\"map_prompt = ChatPromptTemplate([(\"human\", map_template)])map_chain = LLMChain(llm=llm, prompt=map_prompt)# Reducereduce_template = \"\"\"The following is a set of summaries:{docs}Take these and distill it into a final, consolidated summaryof the main themes.\"\"\"reduce_prompt = ChatPromptTemplate([(\"human\", reduce_template)])reduce_chain =",
    "reduce_template)])reduce_chain = LLMChain(llm=llm, prompt=reduce_prompt)# Takes a list of documents, combines them into a single string, and passes this to an LLMChaincombine_documents_chain = StuffDocumentsChain(    llm_chain=reduce_chain, document_variable_name=\"docs\")# Combines and iteratively reduces the mapped documentsreduce_documents_chain = ReduceDocumentsChain(    # This is final chain that is called.    combine_documents_chain=combine_documents_chain,    # If documents exceed context",
    "# If documents exceed context for `StuffDocumentsChain`    collapse_documents_chain=combine_documents_chain,    # The maximum number of tokens to group documents into.    token_max=1000,)# Combining documents by mapping a chain over them, then combining resultsmap_reduce_chain = MapReduceDocumentsChain(    # Map chain    llm_chain=map_chain,    # Reduce chain    reduce_documents_chain=reduce_documents_chain,    # The variable name in the llm_chain to put the documents in",
    "name in the llm_chain to put the documents in    document_variable_name=\"docs\",    # Return the results of the map steps in the output    return_intermediate_steps=False,)API Reference:ChatPromptTemplateresult = map_reduce_chain.invoke(documents)print(result[\"output_text\"])Fruits come in a variety of colors, with apples being red, blueberries being blue, and bananas being yellow.In the LangSmith trace we observe four LLM calls: one summarizing each of the three input documents, and one",
    "each of the three input documents, and one summarizing the summaries.",
    "LangGraph​\nBelow we show a LangGraph implementation, using the same prompt templates as above. The graph includes a node for generating summaries which is mapped across a list of input documents. This node then flows to a second node that generates the final summary.",
    "DetailsWe will need to install langgraph:%pip install -qU langgraphimport operatorfrom typing import Annotated, List, TypedDictfrom langchain_core.output_parsers import StrOutputParserfrom langchain_core.prompts import ChatPromptTemplatefrom langgraph.constants import Sendfrom langgraph.graph import END, START, StateGraphmap_template = \"Write a concise summary of the following: {context}.\"reduce_template = \"\"\"The following is a set of summaries:{docs}Take these and distill it into a final,",
    "these and distill it into a final, consolidated summaryof the main themes.\"\"\"map_prompt = ChatPromptTemplate([(\"human\", map_template)])reduce_prompt = ChatPromptTemplate([(\"human\", reduce_template)])map_chain = map_prompt | llm | StrOutputParser()reduce_chain = reduce_prompt | llm | StrOutputParser()# Graph components: define the components that will make up the graph# This will be the overall state of the main graph.# It will contain the input document contents, corresponding# summaries, and a",
    "contents, corresponding# summaries, and a final summary.class OverallState(TypedDict):    # Notice here we use the operator.add    # This is because we want combine all the summaries we generate    # from individual nodes back into one list - this is essentially    # the \"reduce\" part    contents: List[str]    summaries: Annotated[list, operator.add]    final_summary: str# This will be the state of the node that we will \"map\" all# documents to in order to generate summariesclass",
    "documents to in order to generate summariesclass SummaryState(TypedDict):    content: str# Here we generate a summary, given a documentasync def generate_summary(state: SummaryState):    response = await map_chain.ainvoke(state[\"content\"])    return {\"summaries\": [response]}# Here we define the logic to map out over the documents# We will use this an edge in the graphdef map_summaries(state: OverallState):    # We will return a list of `Send` objects    # Each `Send` object consists of the name",
    "# Each `Send` object consists of the name of a node in the graph    # as well as the state to send to that node    return [        Send(\"generate_summary\", {\"content\": content}) for content in state[\"contents\"]    ]# Here we will generate the final summaryasync def generate_final_summary(state: OverallState):    response = await reduce_chain.ainvoke(state[\"summaries\"])    return {\"final_summary\": response}# Construct the graph: here we put everything together to construct our graphgraph =",
    "everything together to construct our graphgraph = StateGraph(OverallState)graph.add_node(\"generate_summary\", generate_summary)graph.add_node(\"generate_final_summary\", generate_final_summary)graph.add_conditional_edges(START, map_summaries, [\"generate_summary\"])graph.add_edge(\"generate_summary\", \"generate_final_summary\")graph.add_edge(\"generate_final_summary\", END)app = graph.compile()API Reference:StrOutputParser | ChatPromptTemplate | Send | StateGraphfrom IPython.display import",
    "| Send | StateGraphfrom IPython.display import ImageImage(app.get_graph().draw_mermaid_png())Note that calling the graph in streaming mode allows us to monitor steps and potentially take action on them during execution.# Call the graph:async for step in app.astream({\"contents\": [doc.page_content for doc in documents]}):    print(step){'generate_summary': {'summaries': ['Apples are typically red in color.']}}{'generate_summary': {'summaries': ['Bananas are yellow in",
    "{'summaries': ['Bananas are yellow in color.']}}{'generate_summary': {'summaries': ['Blueberries are a type of fruit that are blue in color.']}}{'generate_final_summary': {'final_summary': 'The main themes are the colors of different fruits: apples are red, blueberries are blue, and bananas are yellow.'}}In the LangSmith trace we recover the same four LLM calls as before.",
    "Summarizing long documents​\nMap-reduce flows are particularly useful when texts are long compared to the context window of a LLM. MapReduceDocumentsChain supports a recursive \"collapsing\" of the summaries: the inputs are partitioned based on a token limit, and summaries are generated of the partitions. This step is repeated until the total length of the summaries is within a desired limit, allowing for the summarization of arbitrary-length text.",
    "This \"collapse\" step is implemented as a while loop within MapReduceDocumentsChain. We can demonstrate this step on a longer text, a LLM Powered Autonomous Agents blog post by Lilian Weng (as featured in the RAG tutorial and other documentation).\nFirst we load the post and chunk it into smaller \"sub documents\":",
    "from langchain_community.document_loaders import WebBaseLoaderfrom langchain_text_splitters import CharacterTextSplitterloader = WebBaseLoader(\"https://lilianweng.github.io/posts/2023-06-23-agent/\")documents = loader.load()text_splitter = CharacterTextSplitter.from_tiktoken_encoder(    chunk_size=1000, chunk_overlap=0)split_docs = text_splitter.split_documents(documents)print(f\"Generated {len(split_docs)} documents.\")",
    "USER_AGENT environment variable not set, consider setting it to identify your requests.Created a chunk of size 1003, which is longer than the specified 1000``````outputGenerated 14 documents.\nLegacy​",
    "DetailsWe can invoke MapReduceDocumentsChain as before:result = map_reduce_chain.invoke(split_docs)print(result[\"output_text\"])The article discusses the use of Large Language Models (LLMs) to power autonomous agents in various tasks, showcasing their capabilities in problem-solving beyond generating written content. Key components such as planning, memory optimization, and tool use are explored, with proof-of-concept demos like AutoGPT and GPT-Engineer demonstrating the potential of LLM-powered",
    "demonstrating the potential of LLM-powered agents. Challenges include limitations in historical information retention and natural language interface reliability, while the potential of LLMs in enhancing reasoning, problem-solving, and planning proficiency for autonomous agents is highlighted. Overall, the article emphasizes the versatility and power of LLMs in creating intelligent agents for tasks like scientific discovery and experiment design.Consider the LangSmith trace for the above",
    "design.Consider the LangSmith trace for the above invocation. When instantiating our ReduceDocumentsChain, we set a token_max of 1,000 tokens. This results in a total of 17 LLM calls:",
    "14 calls are for summarizing the 14 sub-documents generated by our text splitter.\nThis generated summaries that totaled about 1,000 - 2,000 tokens. Because we set a token_max of 1,000, there are two more calls to summarize (or \"collapse\") these summaries.\nOne final call is for generating a final summary of the two \"collapsed\" summaries.",
    "LangGraph​\nDetailsWe can extend our original map-reduce implementation in LangGraph to implement the same recursive collapsing step. We make the following changes:\nAdd a collapsed_summaries key to the state to store the collapsed summaries;\nUpdate the final summarization node to summarize the collapsed summaries;",
    "Add a collapse_summaries node that partitions a list of documents based on a token length (1,000 tokens here, as before) and generates summaries of each partition and stores the result in collapsed_summaries.",
    "We add a conditional edge from collapse_summaries to itself to form a loop: if the collapsed summaries total more than the token_max, we re-run the node.from typing import Literalfrom langchain.chains.combine_documents.reduce import (    acollapse_docs,    split_list_of_docs,)def length_function(documents: List[Document]) -> int:    \"\"\"Get number of tokens for input contents.\"\"\"    return sum(llm.get_num_tokens(doc.page_content) for doc in documents)token_max = 1000class",
    "for doc in documents)token_max = 1000class OverallState(TypedDict):    contents: List[str]    summaries: Annotated[list, operator.add]    collapsed_summaries: List[Document]  # add key for collapsed summaries    final_summary: str# Add node to store summaries for collapsingdef collect_summaries(state: OverallState):    return {        \"collapsed_summaries\": [Document(summary) for summary in state[\"summaries\"]]    }# Modify final summary to read off collapsed summariesasync def",
    "summary to read off collapsed summariesasync def generate_final_summary(state: OverallState):    response = await reduce_chain.ainvoke(state[\"collapsed_summaries\"])    return {\"final_summary\": response}graph = StateGraph(OverallState)graph.add_node(\"generate_summary\", generate_summary)  # same as beforegraph.add_node(\"collect_summaries\", collect_summaries)graph.add_node(\"generate_final_summary\", generate_final_summary)# Add node to collapse summariesasync def collapse_summaries(state:",
    "summariesasync def collapse_summaries(state: OverallState):    doc_lists = split_list_of_docs(        state[\"collapsed_summaries\"], length_function, token_max    )    results = []    for doc_list in doc_lists:        results.append(await acollapse_docs(doc_list, reduce_chain.ainvoke))    return {\"collapsed_summaries\": results}graph.add_node(\"collapse_summaries\", collapse_summaries)def should_collapse(    state: OverallState,) -> Literal[\"collapse_summaries\", \"generate_final_summary\"]:",
    "\"generate_final_summary\"]:    num_tokens = length_function(state[\"collapsed_summaries\"])    if num_tokens > token_max:        return \"collapse_summaries\"    else:        return \"generate_final_summary\"graph.add_conditional_edges(START, map_summaries, [\"generate_summary\"])graph.add_edge(\"generate_summary\", \"collect_summaries\")graph.add_conditional_edges(\"collect_summaries\", should_collapse)graph.add_conditional_edges(\"collapse_summaries\", should_collapse)graph.add_edge(\"generate_final_summary\",",
    "END)app = graph.compile()LangGraph allows the graph structure to be plotted to help visualize its function:from IPython.display import ImageImage(app.get_graph().draw_mermaid_png())As before, we can stream the graph to observe its sequence of steps. Below, we will simply print out the name of the step.Note that because we have a loop in the graph, it can be helpful to specify a recursion_limit on its execution. This is analogous to ReduceDocumentsChain.token_max to will raise a specific error",
    "to will raise a specific error when the specified limit is exceeded.async for step in app.astream(    {\"contents\": [doc.page_content for doc in split_docs]},    {\"recursion_limit\": 10},):",
    "in split_docs]},    {\"recursion_limit\": 10},):    print(list(step.keys()))['generate_summary']['generate_summary']['generate_summary']['generate_summary']['generate_summary']['generate_summary']['generate_summary']['generate_summary']['generate_summary']['generate_summary']['generate_summary']['generate_summary']['generate_summary']['generate_summary']['collect_summaries']['collapse_summaries']['generate_final_summary']print(step){'generate_final_summary': {'final_summary': 'The summaries",
    "{'final_summary': 'The summaries discuss the use of Large Language Models (LLMs) to power autonomous agents in various tasks such as problem-solving, planning, and tool use. Key components like planning, memory, and task decomposition are highlighted, along with challenges such as inefficient planning and hallucination. Techniques like Algorithm Distillation and Maximum Inner Product Search are explored for optimization, while frameworks like ReAct and Reflexion show improvements in",
    "like ReAct and Reflexion show improvements in knowledge-intensive tasks. The importance of accurate interpretation of user input and well-structured code for functional autonomy is emphasized, along with the potential of LLMs in prompting, reasoning, and emergent social behavior in simulation environments. Challenges in real-world scenarios and the use of LLMs with expert-designed tools for tasks like organic synthesis and drug discovery are also discussed.'}}In the corresponding LangSmith",
    "also discussed.'}}In the corresponding LangSmith trace we can see the same 17 LLM calls as before, this time grouped under their respective nodes.",
    "Next steps​\nCheck out the LangGraph documentation for detail on building with LangGraph, including this guide on the details of map-reduce in LangGraph.",
    "See this tutorial for more LLM-based summarization strategies.Edit this pagePreviousMigrating from LLMRouterChainNextMigrating from MapRerankDocumentsChainBasic example (short documents)LegacyLangGraphSummarizing long documentsLegacyLangGraphNext stepsCommunityLangChain ForumTwitterSlackGitHubOrganizationPythonJS/TSMoreHomepageBlogYouTubeCopyright © 2025 LangChain, Inc.",
    "Migrating from MapRerankDocumentsChain | 🦜️🔗 LangChain",
    "Skip to main contentThese docs will be deprecated and no longer maintained with the release of LangChain v1.0 in October 2025. Visit the v1.0 alpha docsIntegrationsAPI ReferenceMoreContributingPeopleError referenceLangSmithLangGraphLangChain HubLangChain JS/TSv0.3v0.3v0.2v0.1💬SearchIntroductionTutorialsBuild a Question Answering application over a Graph DatabaseTutorialsBuild a simple LLM application with chat models and prompt templatesBuild a ChatbotBuild a Retrieval Augmented Generation",
    "a ChatbotBuild a Retrieval Augmented Generation (RAG) App: Part 2Build an Extraction ChainBuild an AgentTaggingBuild a Retrieval Augmented Generation (RAG) App: Part 1Build a semantic search engineBuild a Question/Answering system over SQL dataSummarize TextHow-to guidesHow-to guidesHow to use tools in a chainHow to use a vectorstore as a retrieverHow to add memory to chatbotsHow to use example selectorsHow to add a semantic layer over graph databaseHow to invoke runnables in parallelHow to",
    "databaseHow to invoke runnables in parallelHow to stream chat model responsesHow to add default invocation args to a RunnableHow to add retrieval to chatbotsHow to use few shot examples in chat modelsHow to do tool/function callingHow to install LangChain packagesHow to add examples to the prompt for query analysisHow to use few shot examplesHow to run custom functionsHow to use output parsers to parse an LLM response into structured formatHow to handle cases where no queries are generatedHow",
    "to handle cases where no queries are generatedHow to route between sub-chainsHow to return structured data from a modelHow to summarize text through parallelizationHow to summarize text through iterative refinementHow to summarize text in a single LLM callHow to use toolkitsHow to add ad-hoc tool calling capability to LLMs and Chat ModelsBuild an Agent with AgentExecutor (Legacy)How to construct knowledge graphsHow to partially format prompt templatesHow to handle multiple queries when doing",
    "to handle multiple queries when doing query analysisHow to use built-in tools and toolkitsHow to pass through arguments from one step to the nextHow to compose prompts togetherHow to handle multiple retrievers when doing query analysisHow to add values to a chain's stateHow to construct filters for query analysisHow to configure runtime chain internalsHow to deal with high-cardinality categoricals when doing query analysisCustom Document LoaderHow to use the MultiQueryRetrieverHow to add scores",
    "to use the MultiQueryRetrieverHow to add scores to retriever resultsCachingHow to use callbacks in async environmentsHow to attach callbacks to a runnableHow to propagate callbacks  constructorHow to dispatch custom callback eventsHow to pass callbacks in at runtimeHow to split by characterHow to cache chat model responsesHow to handle rate limitsHow to init any model in one lineHow to track token usage in ChatModelsHow to add tools to chatbotsHow to split codeHow to do retrieval with",
    "chatbotsHow to split codeHow to do retrieval with contextual compressionHow to convert Runnables to ToolsHow to create custom callback handlersHow to create a custom chat model classCustom EmbeddingsHow to create a custom LLM classCustom RetrieverHow to create toolsHow to debug your LLM appsHow to load CSVsHow to load documents from a directoryHow to load HTMLHow to load JSONHow to load MarkdownHow to load Microsoft Office filesHow to load PDFsHow to load web pagesHow to create a dynamic",
    "PDFsHow to load web pagesHow to create a dynamic (self-constructing) chainText embedding modelsHow to combine results from multiple retrieversHow to select examples from a LangSmith datasetHow to select examples by lengthHow to select examples by maximal marginal relevance (MMR)How to select examples by n-gram overlapHow to select examples by similarityHow to use reference examples when doing extractionHow to handle long text when doing extractionHow to use prompting alone (no tool calling) to",
    "to use prompting alone (no tool calling) to do extractionHow to add fallbacks to a runnableHow to filter messagesHybrid SearchHow to use the LangChain indexing APIHow to inspect runnablesLangChain Expression Language CheatsheetHow to cache LLM responsesHow to track token usage for LLMsRun models locallyHow to get log probabilitiesHow to reorder retrieved results to mitigate the \"lost in the middle\" effectHow to split Markdown by HeadersHow to merge consecutive messages of the same typeHow to",
    "merge consecutive messages of the same typeHow to add message historyHow to migrate from legacy LangChain agents to LangGraphHow to retrieve using multiple vectors per documentHow to pass multimodal data to modelsHow to use multimodal promptsHow to create a custom Output ParserHow to use the output-fixing parserHow to parse JSON outputHow to retry when a parsing error occursHow to parse text from message objectsHow to parse XML outputHow to parse YAML outputHow to use the Parent Document",
    "parse YAML outputHow to use the Parent Document RetrieverHow to use LangChain with different Pydantic versionsHow to add chat historyHow to get a RAG application to add citationsHow to do per-user retrievalHow to get your RAG application to return sourcesHow to stream results from your RAG applicationHow to split JSON dataHow to recursively split text by charactersResponse metadataHow to pass runtime secrets to runnablesHow to do \"self-querying\" retrievalHow to split text based on semantic",
    "retrievalHow to split text based on semantic similarityHow to chain runnablesHow to save and load LangChain objectsHow to split text by tokensHow to split HTMLHow to do question answering over CSVsHow to deal with large databases when doing SQL question-answeringHow to better prompt when doing SQL question-answeringHow to do query validation as part of SQL question-answeringHow to stream runnablesHow to stream responses from an LLMHow to use a time-weighted vector store retrieverHow to return",
    "time-weighted vector store retrieverHow to return artifacts from a toolHow to use chat models to call toolsHow to disable parallel tool callingHow to force models to call a toolHow to access the RunnableConfig from a toolHow to pass tool outputs to chat modelsHow to pass run time values to toolsHow to stream events from a toolHow to stream tool callsHow to convert tools to OpenAI FunctionsHow to handle tool errorsHow to use few-shot prompting with tool callingHow to add a human-in-the-loop for",
    "tool callingHow to add a human-in-the-loop for toolsHow to bind model-specific toolsHow to trim messagesHow to create and query vector storesConceptual guideAgentsArchitectureAsync programming with LangChainCallbacksChat historyChat modelsDocument loadersEmbedding modelsEvaluationExample selectorsFew-shot promptingConceptual guideKey-value storesLangChain Expression Language (LCEL)MessagesMultimodalityOutput parsersPrompt TemplatesRetrieval augmented generation (RAG)RetrievalRetrieversRunnable",
    "generation (RAG)RetrievalRetrieversRunnable interfaceStreamingStructured outputsTestingString-in, string-out llmsText splittersTokensTool callingToolsTracingVector storesWhy LangChain?Ecosystem🦜🛠️ LangSmith🦜🕸️ LangGraphVersionsv0.3v0.2Pydantic compatibilityMigrating from v0.0 chainsHow to migrate from v0.0 chainsMigrating from ConstitutionalChainMigrating from ConversationalChainMigrating from ConversationalRetrievalChainMigrating from LLMChainMigrating from LLMMathChainMigrating from",
    "LLMChainMigrating from LLMMathChainMigrating from LLMRouterChainMigrating from MapReduceDocumentsChainMigrating from MapRerankDocumentsChainMigrating from MultiPromptChainMigrating from RefineDocumentsChainMigrating from RetrievalQAMigrating from StuffDocumentsChainUpgrading to LangGraph memoryHow to migrate to LangGraph memoryHow to use BaseChatMessageHistory with LangGraphMigrating off ConversationBufferMemory or ConversationStringBufferMemoryMigrating off ConversationBufferWindowMemory or",
    "off ConversationBufferWindowMemory or ConversationTokenBufferMemoryMigrating off ConversationSummaryMemory or ConversationSummaryBufferMemoryA Long-Term Memory AgentRelease policySecurity PolicyVersionsMigrating from v0.0 chainsMigrating from MapRerankDocumentsChainOn this pageMigrating from MapRerankDocumentsChain",
    "MapRerankDocumentsChain implements a strategy for analyzing long texts. The strategy is as follows:",
    "Split a text into smaller documents;\nMap a process to the set of documents, where the process includes generating a score;\nRank the results by score and return the maximum.",
    "A common process in this scenario is question-answering using pieces of context from a document. Forcing the model to generate a score along with its answer helps to select for answers generated only by relevant context.\nAn LangGraph implementation allows for the incorporation of tool calling and other features for this problem. Below we will go through both MapRerankDocumentsChain and a corresponding LangGraph implementation on a simple example for illustrative purposes.\nExample​",
    "Example​\nLet's go through an example where we analyze a set of documents. Let's use the following 3 documents:\nfrom langchain_core.documents import Documentdocuments = [    Document(page_content=\"Alice has blue eyes\", metadata={\"title\": \"book_chapter_2\"}),    Document(page_content=\"Bob has brown eyes\", metadata={\"title\": \"book_chapter_1\"}),    Document(        page_content=\"Charlie has green eyes\", metadata={\"title\": \"book_chapter_3\"}    ),]API Reference:Document\nLegacy​",
    "DetailsBelow we show an implementation with MapRerankDocumentsChain. We define the prompt template for a question-answering task and instantiate a LLMChain object for this purpose. We define how documents are formatted into the prompt and ensure consistency among the keys in the various prompts.from langchain.chains import LLMChain, MapRerankDocumentsChainfrom langchain.output_parsers.regex import RegexParserfrom langchain_core.prompts import PromptTemplatefrom langchain_openai import",
    "import PromptTemplatefrom langchain_openai import OpenAIdocument_variable_name = \"context\"llm = OpenAI()# The prompt here should take as an input variable the# `document_variable_name`# The actual prompt will need to be a lot more complex, this is just# an example.prompt_template = (    \"What color are Bob's eyes? \"    \"Output both your answer and a score (1-10) of how confident \"    \"you are in the format: <Answer>\\nScore: <Score>.\\n\\n\"    \"Provide no other commentary.\\n\\n\"    \"Context:",
    "\"Provide no other commentary.\\n\\n\"    \"Context: {context}\")output_parser = RegexParser(    regex=r\"(.*?)\\nScore: (.*)\",    output_keys=[\"answer\", \"score\"],)prompt = PromptTemplate(    template=prompt_template,    input_variables=[\"context\"],    output_parser=output_parser,)llm_chain = LLMChain(llm=llm, prompt=prompt)chain = MapRerankDocumentsChain(    llm_chain=llm_chain,    document_variable_name=document_variable_name,    rank_key=\"score\",    answer_key=\"answer\",)API",
    "rank_key=\"score\",    answer_key=\"answer\",)API Reference:PromptTemplateresponse = chain.invoke(documents)response[\"output_text\"]/langchain/libs/langchain/langchain/chains/llm.py:369: UserWarning: The apply_and_parse method is deprecated, instead pass an output parser directly to LLMChain.  warnings.warn('Brown'Inspecting the LangSmith trace for the above run, we can see three LLM calls-- one for each document-- and that the scoring mechanism mitigated against hallucinations.",
    "LangGraph​",
    "DetailsBelow we show a LangGraph implementation of this process. Note that our template is simplified, as we delegate the formatting instructions to the chat model's tool-calling features via the .with_structured_output method.Here we follow a basic map-reduce workflow to execute the LLM calls in parallel.We will need to install langgraph:pip install -qU langgraphimport operatorfrom typing import Annotated, List, TypedDictfrom langchain_core.prompts import ChatPromptTemplatefrom",
    "import ChatPromptTemplatefrom langchain_openai import ChatOpenAIfrom langgraph.constants import Sendfrom langgraph.graph import END, START, StateGraphclass AnswerWithScore(TypedDict):    answer: str    score: Annotated[int, ..., \"Score from 1-10.\"]llm = ChatOpenAI(model=\"gpt-4o-mini\", temperature=0)prompt_template = \"What color are Bob's eyes?\\n\\nContext: {context}\"prompt = ChatPromptTemplate.from_template(prompt_template)# The below chain formats context from a document into a prompt, then#",
    "context from a document into a prompt, then# generates a response structured according to the AnswerWithScore schema.map_chain = prompt | llm.with_structured_output(AnswerWithScore)# Below we define the components that will make up the graph# This will be the overall state of the graph.# It will contain the input document contents, corresponding# answers with scores, and a final answer.class State(TypedDict):    contents: List[str]    answers_with_scores: Annotated[list, operator.add]",
    "Annotated[list, operator.add]    answer: str# This will be the state of the node that we will \"map\" all# documents to in order to generate answers with scoresclass MapState(TypedDict):    content: str# Here we define the logic to map out over the documents# We will use this an edge in the graphdef map_analyses(state: State):    # We will return a list of `Send` objects    # Each `Send` object consists of the name of a node in the graph    # as well as the state to send to that node    return [",
    "as the state to send to that node    return [        Send(\"generate_analysis\", {\"content\": content}) for content in state[\"contents\"]    ]# Here we generate an answer with score, given a documentasync def generate_analysis(state: MapState):    response = await map_chain.ainvoke(state[\"content\"])    return {\"answers_with_scores\": [response]}# Here we will select the top answerdef pick_top_ranked(state: State):    ranked_answers = sorted(        state[\"answers_with_scores\"], key=lambda x:",
    "state[\"answers_with_scores\"], key=lambda x: -int(x[\"score\"])    )    return {\"answer\": ranked_answers[0]}# Construct the graph: here we put everything together to construct our graphgraph = StateGraph(State)graph.add_node(\"generate_analysis\", generate_analysis)graph.add_node(\"pick_top_ranked\", pick_top_ranked)graph.add_conditional_edges(START, map_analyses, [\"generate_analysis\"])graph.add_edge(\"generate_analysis\", \"pick_top_ranked\")graph.add_edge(\"pick_top_ranked\", END)app =",
    "END)app = graph.compile()API Reference:ChatPromptTemplate | Send | StateGraphfrom IPython.display import ImageImage(app.get_graph().draw_mermaid_png())result = await app.ainvoke({\"contents\": [doc.page_content for doc in documents]})result[\"answer\"]{'answer': 'Bob has brown eyes.', 'score': 10}Inspecting the LangSmith trace for the above run, we can see three LLM calls as before. Using the model's tool-calling features have also enabled us to remove the parsing step.",
    "Next steps​\nSee these how-to guides for more on question-answering tasks with RAG.\nCheck out the LangGraph documentation for detail on building with LangGraph, including this guide on the details of map-reduce in LangGraph.Edit this pagePreviousMigrating from MapReduceDocumentsChainNextMigrating from MultiPromptChainExampleLegacyLangGraphNext stepsCommunityLangChain ForumTwitterSlackGitHubOrganizationPythonJS/TSMoreHomepageBlogYouTubeCopyright © 2025 LangChain, Inc.",
    "Migrating from MultiPromptChain | 🦜️🔗 LangChain",
    "Skip to main contentThese docs will be deprecated and no longer maintained with the release of LangChain v1.0 in October 2025. Visit the v1.0 alpha docsIntegrationsAPI ReferenceMoreContributingPeopleError referenceLangSmithLangGraphLangChain HubLangChain JS/TSv0.3v0.3v0.2v0.1💬SearchIntroductionTutorialsBuild a Question Answering application over a Graph DatabaseTutorialsBuild a simple LLM application with chat models and prompt templatesBuild a ChatbotBuild a Retrieval Augmented Generation",
    "a ChatbotBuild a Retrieval Augmented Generation (RAG) App: Part 2Build an Extraction ChainBuild an AgentTaggingBuild a Retrieval Augmented Generation (RAG) App: Part 1Build a semantic search engineBuild a Question/Answering system over SQL dataSummarize TextHow-to guidesHow-to guidesHow to use tools in a chainHow to use a vectorstore as a retrieverHow to add memory to chatbotsHow to use example selectorsHow to add a semantic layer over graph databaseHow to invoke runnables in parallelHow to",
    "databaseHow to invoke runnables in parallelHow to stream chat model responsesHow to add default invocation args to a RunnableHow to add retrieval to chatbotsHow to use few shot examples in chat modelsHow to do tool/function callingHow to install LangChain packagesHow to add examples to the prompt for query analysisHow to use few shot examplesHow to run custom functionsHow to use output parsers to parse an LLM response into structured formatHow to handle cases where no queries are generatedHow",
    "to handle cases where no queries are generatedHow to route between sub-chainsHow to return structured data from a modelHow to summarize text through parallelizationHow to summarize text through iterative refinementHow to summarize text in a single LLM callHow to use toolkitsHow to add ad-hoc tool calling capability to LLMs and Chat ModelsBuild an Agent with AgentExecutor (Legacy)How to construct knowledge graphsHow to partially format prompt templatesHow to handle multiple queries when doing",
    "to handle multiple queries when doing query analysisHow to use built-in tools and toolkitsHow to pass through arguments from one step to the nextHow to compose prompts togetherHow to handle multiple retrievers when doing query analysisHow to add values to a chain's stateHow to construct filters for query analysisHow to configure runtime chain internalsHow to deal with high-cardinality categoricals when doing query analysisCustom Document LoaderHow to use the MultiQueryRetrieverHow to add scores",
    "to use the MultiQueryRetrieverHow to add scores to retriever resultsCachingHow to use callbacks in async environmentsHow to attach callbacks to a runnableHow to propagate callbacks  constructorHow to dispatch custom callback eventsHow to pass callbacks in at runtimeHow to split by characterHow to cache chat model responsesHow to handle rate limitsHow to init any model in one lineHow to track token usage in ChatModelsHow to add tools to chatbotsHow to split codeHow to do retrieval with",
    "chatbotsHow to split codeHow to do retrieval with contextual compressionHow to convert Runnables to ToolsHow to create custom callback handlersHow to create a custom chat model classCustom EmbeddingsHow to create a custom LLM classCustom RetrieverHow to create toolsHow to debug your LLM appsHow to load CSVsHow to load documents from a directoryHow to load HTMLHow to load JSONHow to load MarkdownHow to load Microsoft Office filesHow to load PDFsHow to load web pagesHow to create a dynamic",
    "PDFsHow to load web pagesHow to create a dynamic (self-constructing) chainText embedding modelsHow to combine results from multiple retrieversHow to select examples from a LangSmith datasetHow to select examples by lengthHow to select examples by maximal marginal relevance (MMR)How to select examples by n-gram overlapHow to select examples by similarityHow to use reference examples when doing extractionHow to handle long text when doing extractionHow to use prompting alone (no tool calling) to",
    "to use prompting alone (no tool calling) to do extractionHow to add fallbacks to a runnableHow to filter messagesHybrid SearchHow to use the LangChain indexing APIHow to inspect runnablesLangChain Expression Language CheatsheetHow to cache LLM responsesHow to track token usage for LLMsRun models locallyHow to get log probabilitiesHow to reorder retrieved results to mitigate the \"lost in the middle\" effectHow to split Markdown by HeadersHow to merge consecutive messages of the same typeHow to",
    "merge consecutive messages of the same typeHow to add message historyHow to migrate from legacy LangChain agents to LangGraphHow to retrieve using multiple vectors per documentHow to pass multimodal data to modelsHow to use multimodal promptsHow to create a custom Output ParserHow to use the output-fixing parserHow to parse JSON outputHow to retry when a parsing error occursHow to parse text from message objectsHow to parse XML outputHow to parse YAML outputHow to use the Parent Document",
    "parse YAML outputHow to use the Parent Document RetrieverHow to use LangChain with different Pydantic versionsHow to add chat historyHow to get a RAG application to add citationsHow to do per-user retrievalHow to get your RAG application to return sourcesHow to stream results from your RAG applicationHow to split JSON dataHow to recursively split text by charactersResponse metadataHow to pass runtime secrets to runnablesHow to do \"self-querying\" retrievalHow to split text based on semantic",
    "retrievalHow to split text based on semantic similarityHow to chain runnablesHow to save and load LangChain objectsHow to split text by tokensHow to split HTMLHow to do question answering over CSVsHow to deal with large databases when doing SQL question-answeringHow to better prompt when doing SQL question-answeringHow to do query validation as part of SQL question-answeringHow to stream runnablesHow to stream responses from an LLMHow to use a time-weighted vector store retrieverHow to return",
    "time-weighted vector store retrieverHow to return artifacts from a toolHow to use chat models to call toolsHow to disable parallel tool callingHow to force models to call a toolHow to access the RunnableConfig from a toolHow to pass tool outputs to chat modelsHow to pass run time values to toolsHow to stream events from a toolHow to stream tool callsHow to convert tools to OpenAI FunctionsHow to handle tool errorsHow to use few-shot prompting with tool callingHow to add a human-in-the-loop for",
    "tool callingHow to add a human-in-the-loop for toolsHow to bind model-specific toolsHow to trim messagesHow to create and query vector storesConceptual guideAgentsArchitectureAsync programming with LangChainCallbacksChat historyChat modelsDocument loadersEmbedding modelsEvaluationExample selectorsFew-shot promptingConceptual guideKey-value storesLangChain Expression Language (LCEL)MessagesMultimodalityOutput parsersPrompt TemplatesRetrieval augmented generation (RAG)RetrievalRetrieversRunnable",
    "generation (RAG)RetrievalRetrieversRunnable interfaceStreamingStructured outputsTestingString-in, string-out llmsText splittersTokensTool callingToolsTracingVector storesWhy LangChain?Ecosystem🦜🛠️ LangSmith🦜🕸️ LangGraphVersionsv0.3v0.2Pydantic compatibilityMigrating from v0.0 chainsHow to migrate from v0.0 chainsMigrating from ConstitutionalChainMigrating from ConversationalChainMigrating from ConversationalRetrievalChainMigrating from LLMChainMigrating from LLMMathChainMigrating from",
    "LLMChainMigrating from LLMMathChainMigrating from LLMRouterChainMigrating from MapReduceDocumentsChainMigrating from MapRerankDocumentsChainMigrating from MultiPromptChainMigrating from RefineDocumentsChainMigrating from RetrievalQAMigrating from StuffDocumentsChainUpgrading to LangGraph memoryHow to migrate to LangGraph memoryHow to use BaseChatMessageHistory with LangGraphMigrating off ConversationBufferMemory or ConversationStringBufferMemoryMigrating off ConversationBufferWindowMemory or",
    "off ConversationBufferWindowMemory or ConversationTokenBufferMemoryMigrating off ConversationSummaryMemory or ConversationSummaryBufferMemoryA Long-Term Memory AgentRelease policySecurity PolicyVersionsMigrating from v0.0 chainsMigrating from MultiPromptChainOn this pageMigrating from MultiPromptChain",
    "The MultiPromptChain routed an input query to one of multiple LLMChains-- that is, given an input query, it used a LLM to select from a list of prompts, formatted the query into the prompt, and generated a response.\nMultiPromptChain does not support common chat model features, such as message roles and tool calling.\nA LangGraph implementation confers a number of advantages for this problem:",
    "Supports chat prompt templates, including messages with system and other roles;\nSupports the use of tool calling for the routing step;\nSupports streaming of both individual steps and output tokens.",
    "Now let's look at them side-by-side. Note that for this guide we will langchain-openai >= 0.1.20\n%pip install -qU langchain-core langchain-openai\nimport osfrom getpass import getpassif \"OPENAI_API_KEY\" not in os.environ:    os.environ[\"OPENAI_API_KEY\"] = getpass()\nLegacy​",
    "Detailsfrom langchain.chains.router.multi_prompt import MultiPromptChainfrom langchain_openai import ChatOpenAIllm = ChatOpenAI(model=\"gpt-4o-mini\")prompt_1_template = \"\"\"You are an expert on animals. Please answer the below query:{input}\"\"\"prompt_2_template = \"\"\"You are an expert on vegetables. Please answer the below query:{input}\"\"\"prompt_infos = [    {        \"name\": \"animals\",        \"description\": \"prompt for an animal expert\",        \"prompt_template\": prompt_1_template,    },    {",
    "prompt_1_template,    },    {        \"name\": \"vegetables\",        \"description\": \"prompt for a vegetable expert\",        \"prompt_template\": prompt_2_template,    },]chain = MultiPromptChain.from_prompts(llm, prompt_infos)chain.invoke({\"input\": \"What color are carrots?\"}){'input': 'What color are carrots?', 'text': 'Carrots are most commonly orange, but they can also be found in a variety of other colors including purple, yellow, white, and red. The orange variety is the most popular and widely",
    "The orange variety is the most popular and widely recognized.'}In the LangSmith trace we can see the two steps of this process, including the prompts for routing the query and the final selected prompt.",
    "LangGraph​",
    "Detailspip install -qU langgraphfrom operator import itemgetterfrom typing import Literalfrom langchain_core.output_parsers import StrOutputParserfrom langchain_core.prompts import ChatPromptTemplatefrom langchain_core.runnables import RunnableConfigfrom langchain_openai import ChatOpenAIfrom langgraph.graph import END, START, StateGraphfrom typing_extensions import TypedDictllm = ChatOpenAI(model=\"gpt-4o-mini\")# Define the prompts we will route toprompt_1 = ChatPromptTemplate.from_messages(",
    "toprompt_1 = ChatPromptTemplate.from_messages(    [        (\"system\", \"You are an expert on animals.\"),        (\"human\", \"{input}\"),    ])prompt_2 = ChatPromptTemplate.from_messages(    [        (\"system\", \"You are an expert on vegetables.\"),        (\"human\", \"{input}\"),    ])# Construct the chains we will route to. These format the input query# into the respective prompt, run it through a chat model, and cast# the result to a string.chain_1 = prompt_1 | llm | StrOutputParser()chain_2 =",
    "= prompt_1 | llm | StrOutputParser()chain_2 = prompt_2 | llm | StrOutputParser()# Next: define the chain that selects which branch to route to.# Here we will take advantage of tool-calling features to force# the output to select one of two desired branches.route_system = \"Route the user's query to either the animal or vegetable expert.\"route_prompt = ChatPromptTemplate.from_messages(    [        (\"system\", route_system),        (\"human\", \"{input}\"),    ])# Define schema for output:class",
    "\"{input}\"),    ])# Define schema for output:class RouteQuery(TypedDict):    \"\"\"Route query to destination expert.\"\"\"    destination: Literal[\"animal\", \"vegetable\"]route_chain = route_prompt | llm.with_structured_output(RouteQuery)# For LangGraph, we will define the state of the graph to hold the query,# destination, and final answer.class State(TypedDict):    query: str    destination: RouteQuery    answer: str# We define functions for each node, including routing the query:async def",
    "each node, including routing the query:async def route_query(state: State, config: RunnableConfig):    destination = await route_chain.ainvoke(state[\"query\"], config)    return {\"destination\": destination}# And one node for each promptasync def prompt_1(state: State, config: RunnableConfig):    return {\"answer\": await chain_1.ainvoke(state[\"query\"], config)}async def prompt_2(state: State, config: RunnableConfig):    return {\"answer\": await chain_2.ainvoke(state[\"query\"], config)}# We then",
    "chain_2.ainvoke(state[\"query\"], config)}# We then define logic that selects the prompt based on the classificationdef select_node(state: State) -> Literal[\"prompt_1\", \"prompt_2\"]:    if state[\"destination\"] == \"animal\":        return \"prompt_1\"    else:        return \"prompt_2\"# Finally, assemble the multi-prompt chain. This is a sequence of two steps:# 1) Select \"animal\" or \"vegetable\" via the route_chain, and collect the answer# alongside the input query.# 2) Route the input query to chain_1",
    "input query.# 2) Route the input query to chain_1 or chain_2, based on the# selection.graph = StateGraph(State)graph.add_node(\"route_query\", route_query)graph.add_node(\"prompt_1\", prompt_1)graph.add_node(\"prompt_2\", prompt_2)graph.add_edge(START, \"route_query\")graph.add_conditional_edges(\"route_query\", select_node)graph.add_edge(\"prompt_1\", END)graph.add_edge(\"prompt_2\", END)app = graph.compile()API Reference:StrOutputParser | ChatPromptTemplate | RunnableConfig | StateGraphfrom IPython.display",
    "| RunnableConfig | StateGraphfrom IPython.display import ImageImage(app.get_graph().draw_mermaid_png())We can invoke the chain as follows:state = await app.ainvoke({\"query\": \"what color are carrots\"})print(state[\"destination\"])print(state[\"answer\"]){'destination': 'vegetable'}Carrots are most commonly orange, but they can also come in a variety of other colors, including purple, red, yellow, and white. The different colors often indicate varying flavors and nutritional profiles. For example,",
    "flavors and nutritional profiles. For example, purple carrots contain anthocyanins, while orange carrots are rich in beta-carotene, which is converted to vitamin A in the body.In the LangSmith trace we can see the tool call that routed the query and the prompt that was selected to generate the answer.",
    "Overview:​",
    "Under the hood, MultiPromptChain routed the query by instructing the LLM to generate JSON-formatted text, and parses out the intended destination. It took a registry of string prompt templates as input.\nThe LangGraph implementation, implemented above via lower-level primitives, uses tool-calling to route to arbitrary chains. In this example, the chains include chat model templates and chat models.",
    "Next steps​\nSee this tutorial for more detail on building with prompt templates, LLMs, and output parsers.\nCheck out the LangGraph documentation for detail on building with LangGraph.Edit this pagePreviousMigrating from MapRerankDocumentsChainNextMigrating from RefineDocumentsChainLegacyLangGraphOverview:Next stepsCommunityLangChain ForumTwitterSlackGitHubOrganizationPythonJS/TSMoreHomepageBlogYouTubeCopyright © 2025 LangChain, Inc."
  ],
  "metadatas": [
    {
      "chunk_index": 0
    },
    {
      "chunk_index": 1
    },
    {
      "chunk_index": 2
    },
    {
      "chunk_index": 3
    },
    {
      "chunk_index": 4
    },
    {
      "chunk_index": 5
    },
    {
      "chunk_index": 6
    },
    {
      "chunk_index": 7
    },
    {
      "chunk_index": 8
    },
    {
      "chunk_index": 9
    },
    {
      "chunk_index": 10
    },
    {
      "chunk_index": 11
    },
    {
      "chunk_index": 12
    },
    {
      "chunk_index": 13
    },
    {
      "chunk_index": 14
    },
    {
      "chunk_index": 15
    },
    {
      "chunk_index": 16
    },
    {
      "chunk_index": 17
    },
    {
      "chunk_index": 18
    },
    {
      "chunk_index": 19
    },
    {
      "chunk_index": 20
    },
    {
      "chunk_index": 21
    },
    {
      "chunk_index": 22
    },
    {
      "chunk_index": 23
    },
    {
      "chunk_index": 24
    },
    {
      "chunk_index": 25
    },
    {
      "chunk_index": 26
    },
    {
      "chunk_index": 27
    },
    {
      "chunk_index": 0
    },
    {
      "chunk_index": 1
    },
    {
      "chunk_index": 2
    },
    {
      "chunk_index": 3
    },
    {
      "chunk_index": 4
    },
    {
      "chunk_index": 5
    },
    {
      "chunk_index": 6
    },
    {
      "chunk_index": 7
    },
    {
      "chunk_index": 8
    },
    {
      "chunk_index": 9
    },
    {
      "chunk_index": 10
    },
    {
      "chunk_index": 11
    },
    {
      "chunk_index": 12
    },
    {
      "chunk_index": 13
    },
    {
      "chunk_index": 14
    },
    {
      "chunk_index": 15
    },
    {
      "chunk_index": 16
    },
    {
      "chunk_index": 17
    },
    {
      "chunk_index": 18
    },
    {
      "chunk_index": 19
    },
    {
      "chunk_index": 20
    },
    {
      "chunk_index": 21
    },
    {
      "chunk_index": 22
    },
    {
      "chunk_index": 23
    },
    {
      "chunk_index": 24
    },
    {
      "chunk_index": 25
    },
    {
      "chunk_index": 26
    },
    {
      "chunk_index": 27
    },
    {
      "chunk_index": 28
    },
    {
      "chunk_index": 29
    },
    {
      "chunk_index": 30
    },
    {
      "chunk_index": 31
    },
    {
      "chunk_index": 32
    },
    {
      "chunk_index": 33
    },
    {
      "chunk_index": 34
    },
    {
      "chunk_index": 35
    },
    {
      "chunk_index": 36
    },
    {
      "chunk_index": 37
    },
    {
      "chunk_index": 38
    },
    {
      "chunk_index": 39
    },
    {
      "chunk_index": 40
    },
    {
      "chunk_index": 0
    },
    {
      "chunk_index": 1
    },
    {
      "chunk_index": 2
    },
    {
      "chunk_index": 3
    },
    {
      "chunk_index": 4
    },
    {
      "chunk_index": 5
    },
    {
      "chunk_index": 6
    },
    {
      "chunk_index": 7
    },
    {
      "chunk_index": 8
    },
    {
      "chunk_index": 9
    },
    {
      "chunk_index": 10
    },
    {
      "chunk_index": 11
    },
    {
      "chunk_index": 12
    },
    {
      "chunk_index": 13
    },
    {
      "chunk_index": 14
    },
    {
      "chunk_index": 15
    },
    {
      "chunk_index": 16
    },
    {
      "chunk_index": 17
    },
    {
      "chunk_index": 18
    },
    {
      "chunk_index": 19
    },
    {
      "chunk_index": 20
    },
    {
      "chunk_index": 21
    },
    {
      "chunk_index": 22
    },
    {
      "chunk_index": 23
    },
    {
      "chunk_index": 24
    },
    {
      "chunk_index": 25
    },
    {
      "chunk_index": 26
    },
    {
      "chunk_index": 27
    },
    {
      "chunk_index": 28
    },
    {
      "chunk_index": 29
    },
    {
      "chunk_index": 30
    },
    {
      "chunk_index": 31
    },
    {
      "chunk_index": 32
    },
    {
      "chunk_index": 33
    },
    {
      "chunk_index": 34
    },
    {
      "chunk_index": 35
    },
    {
      "chunk_index": 36
    },
    {
      "chunk_index": 37
    },
    {
      "chunk_index": 38
    },
    {
      "chunk_index": 39
    },
    {
      "chunk_index": 40
    },
    {
      "chunk_index": 0
    },
    {
      "chunk_index": 1
    },
    {
      "chunk_index": 2
    },
    {
      "chunk_index": 3
    },
    {
      "chunk_index": 4
    },
    {
      "chunk_index": 5
    },
    {
      "chunk_index": 6
    },
    {
      "chunk_index": 7
    },
    {
      "chunk_index": 8
    },
    {
      "chunk_index": 9
    },
    {
      "chunk_index": 10
    },
    {
      "chunk_index": 11
    },
    {
      "chunk_index": 12
    },
    {
      "chunk_index": 13
    },
    {
      "chunk_index": 14
    },
    {
      "chunk_index": 15
    },
    {
      "chunk_index": 16
    },
    {
      "chunk_index": 17
    },
    {
      "chunk_index": 18
    },
    {
      "chunk_index": 19
    },
    {
      "chunk_index": 20
    },
    {
      "chunk_index": 21
    },
    {
      "chunk_index": 22
    },
    {
      "chunk_index": 23
    },
    {
      "chunk_index": 24
    },
    {
      "chunk_index": 25
    },
    {
      "chunk_index": 26
    },
    {
      "chunk_index": 27
    },
    {
      "chunk_index": 28
    },
    {
      "chunk_index": 29
    },
    {
      "chunk_index": 30
    },
    {
      "chunk_index": 31
    },
    {
      "chunk_index": 32
    },
    {
      "chunk_index": 33
    },
    {
      "chunk_index": 34
    },
    {
      "chunk_index": 35
    },
    {
      "chunk_index": 36
    },
    {
      "chunk_index": 37
    },
    {
      "chunk_index": 38
    },
    {
      "chunk_index": 39
    },
    {
      "chunk_index": 40
    },
    {
      "chunk_index": 41
    },
    {
      "chunk_index": 42
    },
    {
      "chunk_index": 0
    },
    {
      "chunk_index": 1
    },
    {
      "chunk_index": 2
    },
    {
      "chunk_index": 3
    },
    {
      "chunk_index": 4
    },
    {
      "chunk_index": 5
    },
    {
      "chunk_index": 6
    },
    {
      "chunk_index": 7
    },
    {
      "chunk_index": 8
    },
    {
      "chunk_index": 9
    },
    {
      "chunk_index": 10
    },
    {
      "chunk_index": 11
    },
    {
      "chunk_index": 12
    },
    {
      "chunk_index": 13
    },
    {
      "chunk_index": 14
    },
    {
      "chunk_index": 15
    },
    {
      "chunk_index": 16
    },
    {
      "chunk_index": 17
    },
    {
      "chunk_index": 18
    },
    {
      "chunk_index": 19
    },
    {
      "chunk_index": 20
    },
    {
      "chunk_index": 21
    },
    {
      "chunk_index": 22
    },
    {
      "chunk_index": 23
    },
    {
      "chunk_index": 24
    },
    {
      "chunk_index": 25
    },
    {
      "chunk_index": 26
    },
    {
      "chunk_index": 27
    },
    {
      "chunk_index": 28
    },
    {
      "chunk_index": 29
    },
    {
      "chunk_index": 0
    },
    {
      "chunk_index": 1
    },
    {
      "chunk_index": 2
    },
    {
      "chunk_index": 3
    },
    {
      "chunk_index": 4
    },
    {
      "chunk_index": 5
    },
    {
      "chunk_index": 6
    },
    {
      "chunk_index": 7
    },
    {
      "chunk_index": 8
    },
    {
      "chunk_index": 9
    },
    {
      "chunk_index": 10
    },
    {
      "chunk_index": 11
    },
    {
      "chunk_index": 12
    },
    {
      "chunk_index": 13
    },
    {
      "chunk_index": 14
    },
    {
      "chunk_index": 15
    },
    {
      "chunk_index": 16
    },
    {
      "chunk_index": 17
    },
    {
      "chunk_index": 18
    },
    {
      "chunk_index": 19
    },
    {
      "chunk_index": 20
    },
    {
      "chunk_index": 21
    },
    {
      "chunk_index": 22
    },
    {
      "chunk_index": 23
    },
    {
      "chunk_index": 24
    },
    {
      "chunk_index": 25
    },
    {
      "chunk_index": 26
    },
    {
      "chunk_index": 27
    },
    {
      "chunk_index": 28
    },
    {
      "chunk_index": 29
    },
    {
      "chunk_index": 30
    },
    {
      "chunk_index": 0
    },
    {
      "chunk_index": 1
    },
    {
      "chunk_index": 2
    },
    {
      "chunk_index": 3
    },
    {
      "chunk_index": 4
    },
    {
      "chunk_index": 5
    },
    {
      "chunk_index": 6
    },
    {
      "chunk_index": 7
    },
    {
      "chunk_index": 8
    },
    {
      "chunk_index": 9
    },
    {
      "chunk_index": 10
    },
    {
      "chunk_index": 11
    },
    {
      "chunk_index": 12
    },
    {
      "chunk_index": 13
    },
    {
      "chunk_index": 14
    },
    {
      "chunk_index": 15
    },
    {
      "chunk_index": 16
    },
    {
      "chunk_index": 17
    },
    {
      "chunk_index": 18
    },
    {
      "chunk_index": 19
    },
    {
      "chunk_index": 20
    },
    {
      "chunk_index": 21
    },
    {
      "chunk_index": 22
    },
    {
      "chunk_index": 23
    },
    {
      "chunk_index": 24
    },
    {
      "chunk_index": 25
    },
    {
      "chunk_index": 26
    },
    {
      "chunk_index": 27
    },
    {
      "chunk_index": 28
    },
    {
      "chunk_index": 29
    },
    {
      "chunk_index": 30
    },
    {
      "chunk_index": 31
    },
    {
      "chunk_index": 32
    },
    {
      "chunk_index": 33
    },
    {
      "chunk_index": 34
    },
    {
      "chunk_index": 35
    },
    {
      "chunk_index": 36
    },
    {
      "chunk_index": 37
    },
    {
      "chunk_index": 38
    },
    {
      "chunk_index": 39
    },
    {
      "chunk_index": 40
    },
    {
      "chunk_index": 41
    },
    {
      "chunk_index": 42
    },
    {
      "chunk_index": 43
    },
    {
      "chunk_index": 44
    },
    {
      "chunk_index": 0
    },
    {
      "chunk_index": 1
    },
    {
      "chunk_index": 2
    },
    {
      "chunk_index": 3
    },
    {
      "chunk_index": 4
    },
    {
      "chunk_index": 5
    },
    {
      "chunk_index": 6
    },
    {
      "chunk_index": 7
    },
    {
      "chunk_index": 8
    },
    {
      "chunk_index": 9
    },
    {
      "chunk_index": 10
    },
    {
      "chunk_index": 11
    },
    {
      "chunk_index": 12
    },
    {
      "chunk_index": 13
    },
    {
      "chunk_index": 14
    },
    {
      "chunk_index": 15
    },
    {
      "chunk_index": 16
    },
    {
      "chunk_index": 17
    },
    {
      "chunk_index": 18
    },
    {
      "chunk_index": 19
    },
    {
      "chunk_index": 20
    },
    {
      "chunk_index": 21
    },
    {
      "chunk_index": 22
    },
    {
      "chunk_index": 23
    },
    {
      "chunk_index": 24
    },
    {
      "chunk_index": 25
    },
    {
      "chunk_index": 26
    },
    {
      "chunk_index": 0
    },
    {
      "chunk_index": 1
    },
    {
      "chunk_index": 2
    },
    {
      "chunk_index": 3
    },
    {
      "chunk_index": 4
    },
    {
      "chunk_index": 5
    },
    {
      "chunk_index": 6
    },
    {
      "chunk_index": 7
    },
    {
      "chunk_index": 8
    },
    {
      "chunk_index": 9
    },
    {
      "chunk_index": 10
    },
    {
      "chunk_index": 11
    },
    {
      "chunk_index": 12
    },
    {
      "chunk_index": 13
    },
    {
      "chunk_index": 14
    },
    {
      "chunk_index": 15
    },
    {
      "chunk_index": 16
    },
    {
      "chunk_index": 17
    },
    {
      "chunk_index": 18
    },
    {
      "chunk_index": 19
    },
    {
      "chunk_index": 20
    },
    {
      "chunk_index": 21
    },
    {
      "chunk_index": 22
    },
    {
      "chunk_index": 23
    },
    {
      "chunk_index": 24
    },
    {
      "chunk_index": 25
    },
    {
      "chunk_index": 26
    },
    {
      "chunk_index": 27
    },
    {
      "chunk_index": 28
    },
    {
      "chunk_index": 29
    },
    {
      "chunk_index": 0
    },
    {
      "chunk_index": 1
    },
    {
      "chunk_index": 2
    },
    {
      "chunk_index": 3
    },
    {
      "chunk_index": 4
    },
    {
      "chunk_index": 5
    },
    {
      "chunk_index": 6
    },
    {
      "chunk_index": 7
    },
    {
      "chunk_index": 8
    },
    {
      "chunk_index": 9
    },
    {
      "chunk_index": 10
    },
    {
      "chunk_index": 11
    },
    {
      "chunk_index": 12
    },
    {
      "chunk_index": 13
    },
    {
      "chunk_index": 14
    },
    {
      "chunk_index": 15
    },
    {
      "chunk_index": 16
    },
    {
      "chunk_index": 17
    },
    {
      "chunk_index": 18
    },
    {
      "chunk_index": 19
    },
    {
      "chunk_index": 20
    },
    {
      "chunk_index": 21
    },
    {
      "chunk_index": 22
    },
    {
      "chunk_index": 23
    },
    {
      "chunk_index": 24
    },
    {
      "chunk_index": 25
    },
    {
      "chunk_index": 26
    },
    {
      "chunk_index": 27
    },
    {
      "chunk_index": 28
    },
    {
      "chunk_index": 29
    },
    {
      "chunk_index": 30
    },
    {
      "chunk_index": 31
    },
    {
      "chunk_index": 32
    },
    {
      "chunk_index": 0
    },
    {
      "chunk_index": 1
    },
    {
      "chunk_index": 2
    },
    {
      "chunk_index": 3
    },
    {
      "chunk_index": 4
    },
    {
      "chunk_index": 5
    },
    {
      "chunk_index": 6
    },
    {
      "chunk_index": 7
    },
    {
      "chunk_index": 8
    },
    {
      "chunk_index": 9
    },
    {
      "chunk_index": 10
    },
    {
      "chunk_index": 11
    },
    {
      "chunk_index": 12
    },
    {
      "chunk_index": 13
    },
    {
      "chunk_index": 14
    },
    {
      "chunk_index": 15
    },
    {
      "chunk_index": 16
    },
    {
      "chunk_index": 17
    },
    {
      "chunk_index": 18
    },
    {
      "chunk_index": 19
    },
    {
      "chunk_index": 20
    },
    {
      "chunk_index": 21
    },
    {
      "chunk_index": 22
    },
    {
      "chunk_index": 23
    },
    {
      "chunk_index": 24
    },
    {
      "chunk_index": 25
    },
    {
      "chunk_index": 26
    },
    {
      "chunk_index": 27
    },
    {
      "chunk_index": 28
    },
    {
      "chunk_index": 29
    },
    {
      "chunk_index": 30
    },
    {
      "chunk_index": 31
    },
    {
      "chunk_index": 32
    },
    {
      "chunk_index": 33
    },
    {
      "chunk_index": 34
    },
    {
      "chunk_index": 35
    },
    {
      "chunk_index": 36
    },
    {
      "chunk_index": 37
    },
    {
      "chunk_index": 38
    },
    {
      "chunk_index": 39
    },
    {
      "chunk_index": 40
    },
    {
      "chunk_index": 41
    },
    {
      "chunk_index": 42
    },
    {
      "chunk_index": 43
    },
    {
      "chunk_index": 44
    },
    {
      "chunk_index": 45
    },
    {
      "chunk_index": 46
    },
    {
      "chunk_index": 47
    },
    {
      "chunk_index": 48
    },
    {
      "chunk_index": 49
    },
    {
      "chunk_index": 50
    },
    {
      "chunk_index": 51
    },
    {
      "chunk_index": 52
    },
    {
      "chunk_index": 53
    },
    {
      "chunk_index": 54
    },
    {
      "chunk_index": 55
    },
    {
      "chunk_index": 56
    },
    {
      "chunk_index": 57
    },
    {
      "chunk_index": 58
    },
    {
      "chunk_index": 59
    },
    {
      "chunk_index": 60
    },
    {
      "chunk_index": 61
    },
    {
      "chunk_index": 62
    },
    {
      "chunk_index": 63
    },
    {
      "chunk_index": 64
    },
    {
      "chunk_index": 0
    },
    {
      "chunk_index": 1
    },
    {
      "chunk_index": 2
    },
    {
      "chunk_index": 3
    },
    {
      "chunk_index": 4
    },
    {
      "chunk_index": 5
    },
    {
      "chunk_index": 6
    },
    {
      "chunk_index": 7
    },
    {
      "chunk_index": 8
    },
    {
      "chunk_index": 9
    },
    {
      "chunk_index": 10
    },
    {
      "chunk_index": 11
    },
    {
      "chunk_index": 12
    },
    {
      "chunk_index": 13
    },
    {
      "chunk_index": 14
    },
    {
      "chunk_index": 15
    },
    {
      "chunk_index": 16
    },
    {
      "chunk_index": 17
    },
    {
      "chunk_index": 18
    },
    {
      "chunk_index": 19
    },
    {
      "chunk_index": 20
    },
    {
      "chunk_index": 21
    },
    {
      "chunk_index": 22
    },
    {
      "chunk_index": 23
    },
    {
      "chunk_index": 24
    },
    {
      "chunk_index": 25
    },
    {
      "chunk_index": 26
    },
    {
      "chunk_index": 27
    },
    {
      "chunk_index": 28
    },
    {
      "chunk_index": 29
    },
    {
      "chunk_index": 30
    },
    {
      "chunk_index": 31
    },
    {
      "chunk_index": 32
    },
    {
      "chunk_index": 33
    },
    {
      "chunk_index": 34
    },
    {
      "chunk_index": 0
    },
    {
      "chunk_index": 1
    },
    {
      "chunk_index": 2
    },
    {
      "chunk_index": 3
    },
    {
      "chunk_index": 4
    },
    {
      "chunk_index": 5
    },
    {
      "chunk_index": 6
    },
    {
      "chunk_index": 7
    },
    {
      "chunk_index": 8
    },
    {
      "chunk_index": 9
    },
    {
      "chunk_index": 10
    },
    {
      "chunk_index": 11
    },
    {
      "chunk_index": 12
    },
    {
      "chunk_index": 13
    },
    {
      "chunk_index": 14
    },
    {
      "chunk_index": 15
    },
    {
      "chunk_index": 16
    },
    {
      "chunk_index": 17
    },
    {
      "chunk_index": 18
    },
    {
      "chunk_index": 19
    },
    {
      "chunk_index": 20
    },
    {
      "chunk_index": 21
    },
    {
      "chunk_index": 22
    },
    {
      "chunk_index": 23
    },
    {
      "chunk_index": 24
    },
    {
      "chunk_index": 25
    },
    {
      "chunk_index": 26
    },
    {
      "chunk_index": 27
    },
    {
      "chunk_index": 28
    },
    {
      "chunk_index": 29
    },
    {
      "chunk_index": 30
    },
    {
      "chunk_index": 31
    },
    {
      "chunk_index": 32
    },
    {
      "chunk_index": 33
    },
    {
      "chunk_index": 34
    },
    {
      "chunk_index": 35
    },
    {
      "chunk_index": 36
    }
  ],
  "dimension": 384
}